M:org.apache.mahout.common.RandomUtilsTest:testHashDouble():['(O)java.lang.Double:<init>(double)', '(M)java.lang.Double:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashDouble(double)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(O)java.lang.Double:<init>(double)', '(M)java.lang.Double:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashDouble(double)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(O)java.lang.Double:<init>(double)', '(M)java.lang.Double:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashDouble(double)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(O)java.lang.Double:<init>(double)', '(M)java.lang.Double:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashDouble(double)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)']
M:org.apache.mahout.common.RandomUtilsTest:testHashFloat():['(O)java.lang.Float:<init>(float)', '(M)java.lang.Float:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashFloat(float)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(O)java.lang.Float:<init>(float)', '(M)java.lang.Float:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashFloat(float)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(O)java.lang.Float:<init>(float)', '(M)java.lang.Float:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashFloat(float)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(O)java.lang.Float:<init>(float)', '(M)java.lang.Float:hashCode()', '(S)org.apache.mahout.common.RandomUtils:hashFloat(float)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)']
M:org.apache.mahout.common.RandomUtilsTest:testNextTwinPrime():['(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:nextTwinPrime(int)', '(S)org.apache.mahout.common.RandomUtilsTest:fail()']
M:org.apache.mahout.common.RandomUtilsTest:testSetSeed():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(S)org.apache.mahout.common.RandomUtils:getRandom(long)', '(S)org.apache.mahout.common.RandomUtils:getRandom(long)', '(M)java.util.Random:nextLong()', '(M)java.util.Random:nextLong()', '(M)java.util.Random:nextLong()', '(M)java.util.Random:nextLong()', '(S)org.apache.mahout.common.RandomUtilsTest:assertEquals(java.lang.String,long,long)', '(S)org.apache.mahout.common.RandomUtilsTest:assertTrue(java.lang.String,boolean)', '(S)org.apache.mahout.common.RandomUtilsTest:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignBinaryFunction():['(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignBinaryFunction2():['(S)org.apache.mahout.math.function.Functions:plus(double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignBinaryFunction3():['(S)org.apache.mahout.math.function.Functions:mult(double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignDouble():['(I)org.apache.mahout.math.Vector:assign(double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignDoubleArray():['(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:assign(double[])', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignDoubleArrayCardinality():['(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:assign(double[])']
M:org.apache.mahout.math.AbstractVectorTest:testAssignUnaryFunction():['(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignVector():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testAssignVectorCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.AbstractVectorTest:testCardinality():['(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.AbstractVectorTest:testCopy():['(I)org.apache.mahout.math.Vector:clone()', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testCrossProduct():['(I)org.apache.mahout.math.Vector:cross(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testDivideDouble():['(I)org.apache.mahout.math.Vector:divide(double)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testDot():['(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testDot2():['(I)org.apache.mahout.math.Vector:clone()', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testDotCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.AbstractVectorTest:testGet():['(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testGetDistanceSquared():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getLengthSquared()', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)java.lang.Math:abs(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.AbstractVectorTest:testGetOver():['(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:get(int)']
M:org.apache.mahout.math.AbstractVectorTest:testGetUnder():['(I)org.apache.mahout.math.Vector:get(int)']
M:org.apache.mahout.math.AbstractVectorTest:testIterator():['(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(S)org.apache.mahout.math.AbstractVectorTest:checkIterator(java.util.Iterator,double[])', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(S)org.apache.mahout.math.AbstractVectorTest:checkIterator(java.util.Iterator,double[])', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:iterateNonZero()', '(S)org.apache.mahout.math.AbstractVectorTest:checkIterator(java.util.Iterator,double[])', '(M)org.apache.mahout.math.RandomAccessSparseVector:iterator()', '(S)org.apache.mahout.math.AbstractVectorTest:checkIterator(java.util.Iterator,double[])', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:iterateNonZero()', '(S)org.apache.mahout.math.AbstractVectorTest:checkIterator(java.util.Iterator,double[])', '(M)org.apache.mahout.math.RandomAccessSparseVector:iterator()', '(S)org.apache.mahout.math.AbstractVectorTest:checkIterator(java.util.Iterator,double[])']
M:org.apache.mahout.math.AbstractVectorTest:testIteratorSet():['(I)org.apache.mahout.math.Vector:clone()', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:get()', '(I)org.apache.mahout.math.Vector$Element:set(double)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:clone()', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:get()', '(I)org.apache.mahout.math.Vector$Element:set(double)', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testIterators():['(M)org.apache.mahout.math.AbstractVectorTest:vectorToTest(int)', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:get()', '(I)org.apache.mahout.math.Vector$Element:get()', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(S)com.google.common.collect.Iterables:size(java.lang.Iterable)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(long,long)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testLike():['(I)org.apache.mahout.math.Vector:like()', '(M)java.lang.Object:getClass()', '(M)java.lang.Object:getClass()', '(M)java.lang.Class:isAssignableFrom(java.lang.Class)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(java.lang.String,boolean)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.AbstractVectorTest:testMinus():['(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Vector:plus(double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Vector:plus(double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testNormalize():['(I)org.apache.mahout.math.Vector:normalize()', '(S)java.lang.Math:sqrt(double)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testPlusDouble():['(I)org.apache.mahout.math.Vector:plus(double)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testPlusVector():['(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testPlusVectorCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.AbstractVectorTest:testSet():['(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testSimpleOps():['(M)org.apache.mahout.math.AbstractVectorTest:vectorToTest(int)', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Normal:<init>(double,double,java.util.Random)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(M)java.util.Random:nextDouble()', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.AbstractVectorTest:vectorToTest(int)', '(O)org.apache.mahout.math.jet.random.Normal:<init>(double,double,java.util.Random)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)org.apache.mahout.math.DenseVector:<init>(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.DenseVector:<init>(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(M)java.util.Random:nextDouble()', '(I)org.apache.mahout.math.Vector:divide(double)', '(I)org.apache.mahout.math.Vector:divide(double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:times(double)', '(I)org.apache.mahout.math.Vector:times(double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:plus(double)', '(I)org.apache.mahout.math.Vector:plus(double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getLengthSquared()', '(I)org.apache.mahout.math.Vector:getLengthSquared()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:minValue()', '(I)org.apache.mahout.math.Vector:minValue()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:minValueIndex()', '(I)org.apache.mahout.math.Vector:minValueIndex()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:maxValue()', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:normalize()', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:normalize()', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:zSum()', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:assign(double)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:plus(double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:zSum()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.function.Functions:minus(double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:zSum()', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.function.Functions:pow(double)', '(I)org.apache.mahout.math.Vector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:viewPart(int,int)', '(I)org.apache.mahout.math.Vector:zSum()', '(I)org.apache.mahout.math.Vector:viewPart(int,int)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:clone()', '(M)java.lang.Object:getClass()', '(M)java.lang.Object:getClass()', '(M)java.lang.Class:isAssignableFrom(java.lang.Class)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(boolean)', '(M)java.lang.Object:getClass()', '(M)java.lang.Object:getClass()', '(M)java.lang.Class:isAssignableFrom(java.lang.Class)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.AbstractVectorTest:assertNotSame(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:assign(double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getLengthSquared()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:logNormalize()', '(I)org.apache.mahout.math.Vector:logNormalize()', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:logNormalize(double)', '(I)org.apache.mahout.math.Vector:logNormalize(double)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testSize():['(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.AbstractVectorTest:testSmallDistances():['(O)org.apache.mahout.math.ConstantVector:<init>(double,int)', '(O)org.apache.mahout.math.random.MultiNormal:<init>(double,org.apache.mahout.math.Vector)', '(M)org.apache.mahout.math.AbstractVectorTest:vectorToTest(int)', '(M)org.apache.mahout.math.random.MultiNormal:sample()', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.lang.String,java.lang.Object[])', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(java.lang.String,boolean)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(java.lang.String,boolean)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.lang.String,java.lang.Object[])', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(java.lang.String,boolean)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.AbstractVectorTest:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.AbstractVectorTest:testSparseDoubleVectorInt():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testTimesDouble():['(I)org.apache.mahout.math.Vector:times(double)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testTimesVector():['(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testTimesVectorCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.AbstractVectorTest:testToString():['(M)org.apache.mahout.math.AbstractVectorTest:generateTestVector(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(M)java.lang.Object:toString()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.AbstractVectorTest:generateTestVector(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(M)java.lang.Object:toString()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.AbstractVectorTest:generateTestVector(int)', '(M)java.lang.Object:toString()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.AbstractVectorTest:testViewPart():['(I)org.apache.mahout.math.Vector:viewPart(int,int)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.AbstractVectorTest:testViewPartCardinality():['(I)org.apache.mahout.math.Vector:viewPart(int,int)']
M:org.apache.mahout.math.AbstractVectorTest:testViewPartOver():['(I)org.apache.mahout.math.Vector:viewPart(int,int)']
M:org.apache.mahout.math.AbstractVectorTest:testViewPartUnder():['(I)org.apache.mahout.math.Vector:viewPart(int,int)']
M:org.apache.mahout.math.AbstractVectorTest:testZSum():['(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.CentroidTest:testSize():['(M)org.apache.mahout.math.CentroidTest:getTestVector()', '(I)org.apache.mahout.math.Vector:getNumNonZeroElements()', '(S)org.apache.mahout.math.CentroidTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.CentroidTest:testUpdate():['(O)org.apache.mahout.math.random.MultiNormal:<init>(int)', '(M)org.apache.mahout.math.random.MultiNormal:sample()', '(M)org.apache.mahout.math.random.MultiNormal:sample()', '(M)org.apache.mahout.math.random.MultiNormal:sample()', '(O)org.apache.mahout.math.DenseVector:<init>(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.Centroid:<init>(int,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.DenseVector:<init>(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.Centroid:<init>(int,org.apache.mahout.math.Vector)', '(M)org.apache.mahout.math.Centroid:update(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.Centroid:<init>(org.apache.mahout.math.WeightedVector)', '(M)org.apache.mahout.math.Centroid:update(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.function.Functions:div(double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(M)org.apache.mahout.math.Centroid:getVector()', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.CentroidTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.Centroid:getWeight()', '(S)org.apache.mahout.math.CentroidTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:divide(double)', '(M)org.apache.mahout.math.Centroid:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.CentroidTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.Centroid:getWeight()', '(S)org.apache.mahout.math.CentroidTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.Centroid:getIndex()', '(M)org.apache.mahout.math.Centroid:getWeight()', '(O)org.apache.mahout.math.Centroid:<init>(int,org.apache.mahout.math.Vector,double)', '(M)org.apache.mahout.math.Centroid:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.CentroidTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DenseVector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.CentroidTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.Centroid:getWeight()', '(S)org.apache.mahout.math.CentroidTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.Centroid:getIndex()', '(S)org.apache.mahout.math.CentroidTest:assertEquals(long,long)']
M:org.apache.mahout.math.CholeskyDecompositionTest:test1():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(O)org.apache.mahout.math.CholeskyDecompositionTest$2:<init>(org.apache.mahout.math.CholeskyDecompositionTest,java.util.Random)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(boolean)', '(M)java.lang.StringBuilder:toString()', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)', '(M)org.apache.mahout.math.CholeskyDecomposition:solveLeft(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(boolean)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(boolean)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:transpose()', '(M)org.apache.mahout.math.CholeskyDecomposition:solveRight(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(boolean)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(boolean)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.CholeskyDecompositionTest:test2():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.CholeskyDecompositionTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.CholeskyDecompositionTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.CholeskyDecompositionTest:testRankDeficient():['(S)org.apache.mahout.math.CholeskyDecompositionTest:rank4Matrix()', '(O)org.apache.mahout.math.CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.CholeskyDecomposition:getPivot()', '(O)org.apache.mahout.math.PivotedMatrix:<init>(org.apache.mahout.math.Matrix,int[])', '(O)org.apache.mahout.math.CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.CholeskyDecompositionTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.CholeskyDecompositionTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.CholeskyDecomposition:isPositiveDefinite()', '(S)org.junit.Assert:assertFalse(boolean)', '(M)org.apache.mahout.math.CholeskyDecomposition:getL()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.DenseSymmetricTest:testBasics():['(O)org.apache.mahout.math.DenseSymmetricMatrix:<init>(double[],boolean)', '(M)java.lang.Object:toString()', '(M)java.io.PrintStream:println(java.lang.String)', '(I)org.apache.mahout.math.Matrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)', '(M)java.io.PrintStream:println(java.lang.Object)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)', '(M)java.io.PrintStream:println(java.lang.Object)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(M)java.io.PrintStream:println(java.lang.Object)', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.DenseSymmetricTest:testEigen():['(O)org.apache.mahout.math.DenseSymmetricMatrix:<init>(double[],boolean)', '(I)org.apache.mahout.math.Matrix:numRows()', '(I)org.apache.mahout.math.Matrix:numCols()', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(M)java.io.PrintStream:println(java.lang.Object)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getRealEigenvalues()', '(M)org.apache.mahout.math.solver.EigenDecomposition:getRealEigenvalues()', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DenseSymmetricTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.DiagonalMatrixTest:testBasics():['(O)org.apache.mahout.math.DiagonalMatrix:<init>(double[])', '(M)org.apache.mahout.math.DiagonalMatrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:get(int,int)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.DiagonalMatrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.DiagonalMatrix:plus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.DiagonalMatrix:timesLeft(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:transpose()', '(M)org.apache.mahout.math.DiagonalMatrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.DiagonalMatrixTest:testSparsity():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(O)org.apache.mahout.math.DiagonalMatrix:<init>(org.apache.mahout.math.Vector)', '(M)org.apache.mahout.math.DiagonalMatrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(S)org.junit.Assert:assertFalse(boolean)', '(M)org.apache.mahout.math.DiagonalMatrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(S)org.junit.Assert:assertFalse(boolean)', '(M)org.apache.mahout.math.DiagonalMatrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertTrue(boolean)', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertFalse(boolean)', '(M)org.apache.mahout.math.DiagonalMatrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(M)org.apache.mahout.math.DiagonalMatrix:get(int,int)', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.DiagonalMatrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.DiagonalMatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.FileBasedMatrixTest:testBigMatrix():['(S)java.lang.System:getProperty(java.lang.String)', '(S)org.junit.Assume:assumeNotNull(java.lang.Object[])', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int)', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(M)java.util.Random:nextInt(int)', '(M)java.util.Random:nextInt(int)', '(S)org.apache.mahout.math.FileBasedMatrixTest:matrixValue(int)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(M)org.apache.mahout.math.FileBasedMatrixTest:getTestTempDir()', '(S)java.io.File:createTempFile(java.lang.String,java.lang.String,java.io.File)', '(M)java.io.File:deleteOnExit()', '(M)java.io.File:getAbsolutePath()', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(S)org.apache.mahout.math.FileBasedMatrix:writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)java.io.File:length()', '(S)java.lang.Double:valueOf(double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(O)org.apache.mahout.math.FileBasedMatrix:<init>(int,int)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.FileBasedMatrix:setData(java.io.File,boolean)', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(S)org.apache.mahout.math.FileBasedMatrixTest:matrixValue(int)', '(M)java.util.Random:nextInt(int)', '(M)java.util.Random:nextInt(int)', '(M)org.apache.mahout.math.FileBasedMatrix:get(int,int)', '(S)org.apache.mahout.math.FileBasedMatrixTest:assertEquals(double,double,double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])']
M:org.apache.mahout.math.FileBasedMatrixTest:testSetData():['(M)org.apache.mahout.math.FileBasedMatrixTest:getTestTempDir()', '(S)java.io.File:createTempFile(java.lang.String,java.lang.String,java.io.File)', '(M)java.io.File:deleteOnExit()', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(O)org.apache.mahout.math.random.MultiNormal:<init>(int)', '(I)org.apache.mahout.math.Matrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:vector()', '(M)org.apache.mahout.math.random.MultiNormal:sample()', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.FileBasedMatrix:writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.FileBasedMatrix:<init>(int,int)', '(M)org.apache.mahout.math.FileBasedMatrix:setData(java.io.File,boolean)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.FileBasedMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.FileBasedMatrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:vector()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.FileBasedMatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.FileBasedSparseBinaryMatrixTest:testSetData():['(M)org.apache.mahout.math.FileBasedSparseBinaryMatrixTest:getTestTempDir()', '(S)java.io.File:createTempFile(java.lang.String,java.lang.String,java.io.File)', '(M)java.io.File:deleteOnExit()', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)java.util.Random:nextDouble()', '(S)java.lang.Math:log(double)', '(S)java.lang.Math:ceil(double)', '(M)org.apache.mahout.math.MatrixSlice:vector()', '(M)java.util.Random:nextInt(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)org.apache.mahout.math.FileBasedSparseBinaryMatrix:writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.FileBasedSparseBinaryMatrix:<init>(int,int)', '(M)org.apache.mahout.math.FileBasedSparseBinaryMatrix:setData(java.io.File)', '(M)org.apache.mahout.math.FileBasedSparseBinaryMatrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:vector()', '(M)org.apache.mahout.math.MatrixSlice:index()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(S)org.apache.mahout.math.FileBasedSparseBinaryMatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.FunctionTest:testIsAssociative():['(M)org.apache.mahout.math.function.DoubleDoubleFunction:isAssociative()', '(M)java.util.Random:nextDouble()', '(M)java.util.Random:nextDouble()', '(M)java.util.Random:nextDouble()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.FunctionTest:testIsCommutative():['(M)org.apache.mahout.math.function.DoubleDoubleFunction:isCommutative()', '(M)java.util.Random:nextDouble()', '(M)java.util.Random:nextDouble()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.FunctionTest:testIsDensifying():['(M)org.apache.mahout.math.function.DoubleDoubleFunction:isDensifying()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.FunctionTest:testIsLikeLeftMult():['(M)org.apache.mahout.math.function.DoubleDoubleFunction:isLikeLeftMult()', '(M)java.util.Random:nextDouble()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.FunctionTest:testIsLikeRightMult():['(M)org.apache.mahout.math.function.DoubleDoubleFunction:isLikeRightMult()', '(M)java.util.Random:nextDouble()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.FunctionTest:testIsLikeRightPlus():['(M)org.apache.mahout.math.function.DoubleDoubleFunction:isLikeRightPlus()', '(M)java.util.Random:nextDouble()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(S)org.junit.Assert:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MahoutTestCase:<init>():['(O)com.carrotsearch.randomizedtesting.RandomizedTest:<init>()']
M:org.apache.mahout.math.MatricesTest:testFunctionalView():['(O)org.apache.mahout.math.MatricesTest$1:<init>(org.apache.mahout.math.MatricesTest)', '(S)org.apache.mahout.math.Matrices:functionalMatrixView(int,int,org.apache.mahout.math.function.IntIntFunction)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.MatricesTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatricesTest:testGaussianView():['(S)org.apache.mahout.math.Matrices:gaussianView(int,int,long)', '(S)org.apache.mahout.math.Matrices:gaussianView(int,int,long)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.MatricesTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatricesTest:testSymmetricUniformView():['(S)org.apache.mahout.math.Matrices:symmetricUniformView(int,int,int)', '(S)org.apache.mahout.math.Matrices:symmetricUniformView(int,int,int)', '(I)org.apache.mahout.math.Matrix:numRows()', '(I)org.apache.mahout.math.Matrix:numCols()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.MatricesTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatricesTest:testTransposeView():['(S)org.apache.mahout.math.Matrices:gaussianView(int,int,long)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.Matrix)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(S)org.apache.mahout.math.Matrices:transposedView(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.MatricesTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatricesTest:testUniformView():['(S)org.apache.mahout.math.Matrices:uniformView(int,int,int)', '(S)org.apache.mahout.math.Matrices:uniformView(int,int,int)', '(I)org.apache.mahout.math.Matrix:numRows()', '(I)org.apache.mahout.math.Matrix:numCols()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.MatricesTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatricesTest:testViewDenseSparseReporting():['(O)org.apache.mahout.math.SparseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(S)org.apache.mahout.math.Matrices:transposedView(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(S)org.apache.mahout.math.Matrices:transposedView(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:isDense()', '(S)org.apache.mahout.math.MatricesTest:assertTrue(boolean)']
M:org.apache.mahout.math.MatrixTest:testAggregate():['(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(O)org.apache.mahout.math.MatrixTest$3:<init>(org.apache.mahout.math.MatrixTest)', '(I)org.apache.mahout.math.Matrix:aggregateRows(org.apache.mahout.math.function.VectorFunction)', '(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAggregateCols():['(O)org.apache.mahout.math.MatrixTest$2:<init>(org.apache.mahout.math.MatrixTest)', '(I)org.apache.mahout.math.Matrix:aggregateColumns(org.apache.mahout.math.function.VectorFunction)', '(I)org.apache.mahout.math.Matrix:numCols()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:zSum()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAggregateRows():['(O)org.apache.mahout.math.MatrixTest$1:<init>(org.apache.mahout.math.MatrixTest)', '(I)org.apache.mahout.math.Matrix:aggregateRows(org.apache.mahout.math.function.VectorFunction)', '(I)org.apache.mahout.math.Matrix:numRows()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:zSum()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAssignColumn():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignColumn(int,org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAssignColumnCardinality():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignColumn(int,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.MatrixTest:testAssignDouble():['(I)org.apache.mahout.math.Matrix:assign(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAssignDoubleArrayArray():['(I)org.apache.mahout.math.Matrix:assign(double[][])', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAssignDoubleArrayArrayCardinality():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:assign(double[][])']
M:org.apache.mahout.math.MatrixTest:testAssignMatrix():['(I)org.apache.mahout.math.Matrix:like()', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAssignMatrixBinaryFunction():['(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAssignMatrixBinaryFunctionCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)']
M:org.apache.mahout.math.MatrixTest:testAssignMatrixCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.MatrixTest:testAssignRow():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignRow(int,org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testAssignRowCardinality():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignRow(int,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.MatrixTest:testAssignUnaryFunction():['(S)org.apache.mahout.math.function.Functions:mult(double)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testCardinality():['(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MatrixTest:testClone():['(M)org.apache.mahout.math.MatrixTest:matrixFactory(double[][])', '(I)org.apache.mahout.math.Matrix:clone()', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testColumnView():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(M)java.util.Random:nextInt(int)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(M)java.util.Random:nextGaussian()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatrixTest:testCopy():['(I)org.apache.mahout.math.Matrix:clone()', '(M)java.lang.Object:getClass()', '(M)java.lang.Object:getClass()', '(S)org.apache.mahout.math.MatrixTest:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testDeterminant():['(M)org.apache.mahout.math.MatrixTest:matrixFactory(double[][])', '(I)org.apache.mahout.math.Matrix:determinant()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testDivide():['(I)org.apache.mahout.math.Matrix:divide(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testGet():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testGetIndexOver():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:get(int,int)']
M:org.apache.mahout.math.MatrixTest:testGetIndexUnder():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:get(int,int)']
M:org.apache.mahout.math.MatrixTest:testGetQuick():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testIterate():['(I)org.apache.mahout.math.Matrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:vector()', '(M)org.apache.mahout.math.MatrixSlice:index()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(M)org.apache.mahout.math.MatrixSlice:index()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:toString()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.MatrixTest:testLabelBindingSerialization():['(M)org.apache.mahout.math.MatrixTest:matrixFactory(double[][])', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNull(java.lang.String,java.lang.Object)', '(O)java.util.HashMap:<init>()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setRowLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', '(O)java.util.HashMap:<init>()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setColumnLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.MatrixTest:testLabelBindings():['(M)org.apache.mahout.math.MatrixTest:matrixFactory(double[][])', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNull(java.lang.String,java.lang.Object)', '(O)java.util.HashMap:<init>()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setRowLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', '(O)java.util.HashMap:<init>()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setColumnLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:set(java.lang.String,double[])', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testLike():['(I)org.apache.mahout.math.Matrix:like()', '(M)java.lang.Object:getClass()', '(M)java.lang.Object:getClass()', '(S)org.apache.mahout.math.MatrixTest:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MatrixTest:testLikeIntInt():['(I)org.apache.mahout.math.Matrix:like(int,int)', '(M)java.lang.Object:getClass()', '(M)java.lang.Object:getClass()', '(S)org.apache.mahout.math.MatrixTest:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MatrixTest:testMatrixViewBug():['(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:zSum()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatrixTest:testMinus():['(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testMinusCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.MatrixTest:testPlusDouble():['(I)org.apache.mahout.math.Matrix:plus(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testPlusMatrix():['(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testPlusMatrixCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.MatrixTest:testRowView():['(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(long,long)', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(M)java.util.Random:nextInt(int)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(M)java.util.Random:nextGaussian()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.MatrixTest:testSetOver():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:set(int,int,double)']
M:org.apache.mahout.math.MatrixTest:testSetQuick():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:setQuick(int,int,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testSetUnder():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:set(int,int,double)']
M:org.apache.mahout.math.MatrixTest:testSettingLabelBindings():['(M)org.apache.mahout.math.MatrixTest:matrixFactory(double[][])', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:set(java.lang.String,java.lang.String,int,int,double)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNotNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.MatrixTest:assertNotNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(I)java.util.Map:get(java.lang.Object)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(I)java.util.Map:get(java.lang.Object)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)']
M:org.apache.mahout.math.MatrixTest:testSize():['(I)org.apache.mahout.math.Matrix:getNumNondefaultElements()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MatrixTest:testTimesDouble():['(I)org.apache.mahout.math.Matrix:times(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testTimesMatrix():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.DenseMatrix:times(double)', '(I)org.apache.mahout.math.Matrix:numCols()', '(I)org.apache.mahout.math.Matrix:numRows()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)java.lang.Math:abs(double)', '(S)org.apache.mahout.math.MatrixTest:assertTrue(java.lang.String,boolean)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.MatrixTest:testTimesMatrixCardinality():['(I)org.apache.mahout.math.Matrix:like(int,int)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.MatrixTest:testTimesSquaredTimesVector():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:timesSquared(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.MatrixTest:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.MatrixTest:testTimesVector():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(java.lang.Object)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.MatrixTest:assertTrue(java.lang.String,boolean)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.MatrixTest:testTranspose():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testViewColumn():['(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MatrixTest:testViewColumnIndexOver():['(I)org.apache.mahout.math.Matrix:viewColumn(int)']
M:org.apache.mahout.math.MatrixTest:testViewColumnIndexUnder():['(I)org.apache.mahout.math.Matrix:viewColumn(int)']
M:org.apache.mahout.math.MatrixTest:testViewPart():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testViewPartCardinality():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])']
M:org.apache.mahout.math.MatrixTest:testViewPartIndexOver():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])']
M:org.apache.mahout.math.MatrixTest:testViewPartIndexUnder():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])']
M:org.apache.mahout.math.MatrixTest:testViewRow():['(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,long,long)', '(O)org.apache.mahout.math.SparseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:assign(double)', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixTest:testViewRowIndexOver():['(I)org.apache.mahout.math.Matrix:viewRow(int)']
M:org.apache.mahout.math.MatrixTest:testViewRowIndexUnder():['(I)org.apache.mahout.math.Matrix:viewRow(int)']
M:org.apache.mahout.math.MatrixTest:testZSum():['(I)org.apache.mahout.math.Matrix:zSum()', '(S)org.apache.mahout.math.MatrixTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.MatrixVectorViewTest:testColumnView():['(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:cross(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:numRows()', '(I)org.apache.mahout.math.Matrix:numRows()', '(S)org.apache.mahout.math.MatrixVectorViewTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Matrix:numRows()', '(I)org.apache.mahout.math.Matrix:numCols()', '(S)org.apache.mahout.math.MatrixVectorViewTest:assertEquals(long,long)']
M:org.apache.mahout.math.MatrixVectorViewTest:testIndexRange():['(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(S)org.apache.mahout.math.function.Functions:random()', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(S)org.apache.mahout.math.MatrixVectorViewTest:fail(java.lang.String)', '(M)java.lang.IllegalArgumentException:getMessage()', '(M)java.lang.String:startsWith(java.lang.String)', '(S)org.apache.mahout.math.MatrixVectorViewTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(S)org.apache.mahout.math.MatrixVectorViewTest:fail(java.lang.String)', '(M)java.lang.IllegalArgumentException:getMessage()', '(M)java.lang.String:startsWith(java.lang.String)', '(S)org.apache.mahout.math.MatrixVectorViewTest:assertTrue(boolean)']
M:org.apache.mahout.math.MurmurHash3Test:testCorrectValues():['(M)java.lang.String:getBytes(java.lang.String)', '(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)', '(S)org.apache.mahout.math.MurmurHash3:murmurhash3x8632(byte[],int,int,int)', '(S)org.apache.mahout.math.MurmurHash3Test:assertEquals(long,long)']
M:org.apache.mahout.math.MurmurHashTest:testChangingKey():['(S)org.apache.mahout.math.MurmurHashTest:setKey(byte[],int)', '(S)org.apache.mahout.math.MurmurHash:hash(byte[],int)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(S)org.junit.Assert:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MurmurHashTest:testChangingKeyLength():['(S)org.apache.mahout.math.MurmurHashTest:setKey(byte[],int)', '(S)org.apache.mahout.math.MurmurHash:hash(byte[],int)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(S)org.junit.Assert:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MurmurHashTest:testChangingSeed():['(S)org.apache.mahout.math.MurmurHash:hash(byte[],int)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(S)org.junit.Assert:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.MurmurHashTest:testForLotsOfChange32():['(M)java.lang.String:getBytes(java.nio.charset.Charset)', '(S)org.apache.mahout.math.MurmurHash:hash(byte[],int)', '(M)java.lang.String:getBytes(java.nio.charset.Charset)', '(S)org.apache.mahout.math.MurmurHash:hash(byte[],int)', '(S)java.lang.Integer:bitCount(int)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(S)org.junit.Assert:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.MurmurHashTest:testForLotsOfChange64():['(M)java.lang.String:getBytes(java.nio.charset.Charset)', '(S)org.apache.mahout.math.MurmurHash:hash64A(byte[],int)', '(M)java.lang.String:getBytes(java.nio.charset.Charset)', '(S)org.apache.mahout.math.MurmurHash:hash64A(byte[],int)', '(S)java.lang.Long:bitCount(long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(S)org.junit.Assert:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.MurmurHashTest:testHash64():['(M)java.lang.String:getBytes(java.nio.charset.Charset)', '(S)org.apache.mahout.math.MurmurHash:hash64A(byte[],int)', '(S)org.junit.Assert:assertEquals(long,long)', '(M)java.lang.String:getBytes(java.nio.charset.Charset)', '(S)org.apache.mahout.math.MurmurHash:hash64A(byte[],int)', '(S)org.junit.Assert:assertEquals(long,long)', '(M)java.lang.String:getBytes(java.nio.charset.Charset)', '(S)org.apache.mahout.math.MurmurHash:hash64A(byte[],int)', '(S)org.junit.Assert:assertEquals(long,long)']
M:org.apache.mahout.math.PermutedVectorViewTest:testIterators():['(S)org.apache.mahout.math.PermutedVectorViewTest:pivot()', '(S)org.apache.mahout.math.PermutedVectorViewTest:unpivot()', '(S)org.apache.mahout.math.PermutedVectorViewTest:randomVector()', '(O)org.apache.mahout.math.PermutedVectorView:<init>(org.apache.mahout.math.Vector,int[])', '(I)org.apache.mahout.math.Vector:zSum()', '(M)org.apache.mahout.math.PermutedVectorView:zSum()', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(M)org.apache.mahout.math.PermutedVectorView:getNumNondefaultElements()', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(M)org.apache.mahout.math.PermutedVectorView:getNumNondefaultElements()', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(long,long)', '(M)org.apache.mahout.math.PermutedVectorView:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector$Element:index()', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(java.lang.String,long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector$Element:index()', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(java.lang.String,long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector$Element:get()', '(I)org.apache.mahout.math.Vector$Element:index()', '(M)org.apache.mahout.math.PermutedVectorView:get(int)', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.PermutedVectorViewTest:testViewBasics():['(S)org.apache.mahout.math.PermutedVectorViewTest:randomVector()', '(S)org.apache.mahout.math.PermutedVectorViewTest:pivot()', '(O)org.apache.mahout.math.PermutedVectorView:<init>(org.apache.mahout.math.Vector,int[])', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.PivotedMatrixTest:testSwap():['(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(O)org.apache.mahout.math.PivotedMatrix:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.PivotedMatrix:swap(int,int)', '(M)org.apache.mahout.math.PivotedMatrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.PivotedMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.PivotedMatrix:swap(int,int)', '(M)org.apache.mahout.math.PivotedMatrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.PivotedMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.PivotedMatrix:swap(int,int)', '(M)org.apache.mahout.math.PivotedMatrix:viewColumn(int)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.PivotedMatrixTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.PivotedMatrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.PivotedMatrixTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestDenseMatrix:testGetValues():['(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(M)org.apache.mahout.math.DenseMatrix:set(int,int,double)', '(M)org.apache.mahout.math.DenseMatrix:getBackingStructure()', '(S)org.junit.Assert:assertEquals(long,long)', '(S)org.junit.Assert:assertEquals(long,long)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestDenseVector:testSize():['(M)org.apache.mahout.math.TestDenseVector:getTestVector()', '(I)org.apache.mahout.math.Vector:getNumNonZeroElements()', '(S)org.apache.mahout.math.TestDenseVector:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestDenseVector:testToString():['(O)org.apache.mahout.math.AbstractVectorTest:testToString()']
M:org.apache.mahout.math.TestMatrixView:testAssignColumn():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignColumn(int,org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testAssignColumnCardinality():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignColumn(int,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.TestMatrixView:testAssignDouble():['(I)org.apache.mahout.math.Matrix:assign(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testAssignDoubleArrayArray():['(I)org.apache.mahout.math.Matrix:assign(double[][])', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testAssignDoubleArrayArrayCardinality():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:assign(double[][])']
M:org.apache.mahout.math.TestMatrixView:testAssignMatrix():['(I)org.apache.mahout.math.Matrix:like()', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testAssignMatrixBinaryFunction():['(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testAssignMatrixBinaryFunctionCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)']
M:org.apache.mahout.math.TestMatrixView:testAssignMatrixCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.TestMatrixView:testAssignRow():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignRow(int,org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testAssignRowCardinality():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Matrix:assignRow(int,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.TestMatrixView:testAssignUnaryFunction():['(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testCardinality():['(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestMatrixView:testCopy():['(I)org.apache.mahout.math.Matrix:clone()', '(S)org.apache.mahout.math.TestMatrixView:assertTrue(java.lang.String,boolean)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testDivide():['(I)org.apache.mahout.math.Matrix:divide(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testGet():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testGetIndexOver():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:get(int,int)']
M:org.apache.mahout.math.TestMatrixView:testGetIndexUnder():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:get(int,int)']
M:org.apache.mahout.math.TestMatrixView:testGetQuick():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testLabelBindingSerialization():['(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNull(java.lang.String,java.lang.Object)', '(S)com.google.common.collect.Maps:newHashMap()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setRowLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', '(S)com.google.common.collect.Maps:newHashMap()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setColumnLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.TestMatrixView:testLabelBindings():['(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNull(java.lang.String,java.lang.Object)', '(S)com.google.common.collect.Maps:newHashMap()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setRowLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', '(S)com.google.common.collect.Maps:newHashMap()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:setColumnLabelBindings(java.util.Map)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:set(java.lang.String,double[])', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testLike():['(I)org.apache.mahout.math.Matrix:like()', '(S)org.apache.mahout.math.TestMatrixView:assertTrue(java.lang.String,boolean)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestMatrixView:testLikeIntInt():['(I)org.apache.mahout.math.Matrix:like(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertTrue(java.lang.String,boolean)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestMatrixView:testMinus():['(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testMinusCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.TestMatrixView:testPlusDouble():['(I)org.apache.mahout.math.Matrix:plus(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testPlusMatrix():['(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testPlusMatrixCardinality():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.TestMatrixView:testSetOver():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:set(int,int,double)']
M:org.apache.mahout.math.TestMatrixView:testSetQuick():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:setQuick(int,int,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testSetUnder():['(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:set(int,int,double)']
M:org.apache.mahout.math.TestMatrixView:testSettingLabelBindings():['(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:set(java.lang.String,java.lang.String,int,int,double)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNotNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(S)org.apache.mahout.math.TestMatrixView:assertNotNull(java.lang.String,java.lang.Object)', '(I)org.apache.mahout.math.Matrix:getRowLabelBindings()', '(I)java.util.Map:get(java.lang.Object)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:getColumnLabelBindings()', '(I)java.util.Map:get(java.lang.Object)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)', '(I)org.apache.mahout.math.Matrix:get(java.lang.String,java.lang.String)']
M:org.apache.mahout.math.TestMatrixView:testSize():['(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestMatrixView:testTimesDouble():['(I)org.apache.mahout.math.Matrix:times(double)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testTimesMatrix():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestMatrixView:testTimesMatrixCardinality():['(I)org.apache.mahout.math.Matrix:like(int,int)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.TestMatrixView:testTranspose():['(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testViewColumn():['(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testViewColumnIndexOver():['(I)org.apache.mahout.math.Matrix:viewColumn(int)']
M:org.apache.mahout.math.TestMatrixView:testViewColumnIndexUnder():['(I)org.apache.mahout.math.Matrix:viewColumn(int)']
M:org.apache.mahout.math.TestMatrixView:testViewPart():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestMatrixView:testViewPartCardinality():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])']
M:org.apache.mahout.math.TestMatrixView:testViewPartIndexOver():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])']
M:org.apache.mahout.math.TestMatrixView:testViewPartIndexUnder():['(I)org.apache.mahout.math.Matrix:viewPart(int[],int[])']
M:org.apache.mahout.math.TestMatrixView:testViewRow():['(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestMatrixView:testViewRowIndexOver():['(I)org.apache.mahout.math.Matrix:viewRow(int)']
M:org.apache.mahout.math.TestMatrixView:testViewRowIndexUnder():['(I)org.apache.mahout.math.Matrix:viewRow(int)']
M:org.apache.mahout.math.TestMatrixView:testZSum():['(I)org.apache.mahout.math.Matrix:zSum()', '(S)org.apache.mahout.math.TestMatrixView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestOrderedIntDoubleMapping:testAddDefaultElements():['(O)org.apache.mahout.math.OrderedIntDoubleMapping:<init>(boolean)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)']
M:org.apache.mahout.math.TestOrderedIntDoubleMapping:testClone():['(O)org.apache.mahout.math.OrderedIntDoubleMapping:<init>(int)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:clone()', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestOrderedIntDoubleMapping:testGetSet():['(O)org.apache.mahout.math.OrderedIntDoubleMapping:<init>(int)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestOrderedIntDoubleMapping:testMerge():['(O)org.apache.mahout.math.OrderedIntDoubleMapping:<init>(boolean)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(O)org.apache.mahout.math.OrderedIntDoubleMapping:<init>()', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:set(int,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:merge(org.apache.mahout.math.OrderedIntDoubleMapping)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:getNumMappings()', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(long,long)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)', '(M)org.apache.mahout.math.OrderedIntDoubleMapping:get(int)', '(S)org.apache.mahout.math.TestOrderedIntDoubleMapping:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestRandomAccessSparseVector:testToString():['(M)org.apache.mahout.math.TestRandomAccessSparseVector:generateTestVector(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)com.google.common.base.Splitter:on(char)', '(M)java.lang.Object:toString()', '(M)java.lang.Object:toString()', '(M)java.lang.String:length()', '(M)java.lang.String:substring(int,int)', '(M)com.google.common.base.Splitter:split(java.lang.CharSequence)', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)java.lang.String:split(java.lang.String)', '(S)java.lang.Double:parseDouble(java.lang.String)', '(S)java.lang.Integer:parseInt(java.lang.String)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestRandomAccessSparseVector:assertEquals(double,double,double)', '(M)org.apache.mahout.math.TestRandomAccessSparseVector:generateTestVector(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(M)java.lang.Object:toString()', '(S)org.apache.mahout.math.TestRandomAccessSparseVector:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.TestRandomAccessSparseVector:generateTestVector(int)', '(M)java.lang.Object:toString()', '(S)org.apache.mahout.math.TestRandomAccessSparseVector:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.TestSequentialAccessSparseVector:testDotSuperBig():['(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int,int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int,int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.TestSequentialAccessSparseVector:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestSequentialAccessSparseVector:testToString():['(O)org.apache.mahout.math.AbstractVectorTest:testToString()']
M:org.apache.mahout.math.TestSingularValueDecomposition:testAEqualUSVt():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkAEqualUSVt(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkAEqualUSVt(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.DenseMatrix:transpose()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkAEqualUSVt(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testConditionNumber():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:cond()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testDimensions():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(I)org.apache.mahout.math.Matrix:numRows()', '(I)org.apache.mahout.math.Matrix:numCols()', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(I)org.apache.mahout.math.Matrix:numRows()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(I)org.apache.mahout.math.Matrix:numCols()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)', '(M)org.apache.mahout.math.SingularValueDecomposition:getS()', '(I)org.apache.mahout.math.Matrix:numCols()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)', '(M)org.apache.mahout.math.SingularValueDecomposition:getS()', '(I)org.apache.mahout.math.Matrix:numCols()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:numRows()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:numCols()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testHadamard():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getSingularValues()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(M)org.apache.mahout.math.SingularValueDecomposition:getSingularValues()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(M)org.apache.mahout.math.SingularValueDecomposition:getSingularValues()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(M)org.apache.mahout.math.SingularValueDecomposition:getSingularValues()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.SingularValueDecomposition:getCovariance(double)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.Algebra:getNorm(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.SingularValueDecomposition:getCovariance(double)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.Algebra:getNorm(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testMatricesValues1():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.Algebra:getNorm(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(M)org.apache.mahout.math.SingularValueDecomposition:getS()', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.Algebra:getNorm(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.Algebra:getNorm(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testMoreColumns():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:createTestMatrix(java.util.Random,int,int,double[])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getSingularValues()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testMoreRows():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:createTestMatrix(java.util.Random,int,int,double[])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getSingularValues()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(long,long)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testSvdHang():['(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.TestSingularValueDecomposition:readTsv(java.lang.String)', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(M)org.apache.mahout.math.SingularValueDecomposition:getS()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.TestSingularValueDecomposition:assertEquals(double,double,double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])']
M:org.apache.mahout.math.TestSingularValueDecomposition:testUOrthogonal():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.DenseMatrix:transpose()', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.TestSingularValueDecomposition:testVOrthogonal():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(M)org.apache.mahout.math.DenseMatrix:transpose()', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(S)org.apache.mahout.math.TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.TestSparseMatrix:testSparseCopy():['(O)org.apache.mahout.math.TestSparseMatrix:createSparseMatrixWithEmptyRow()', '(M)org.apache.mahout.math.SparseMatrix:clone()', '(M)java.lang.Object:getClass()', '(M)java.lang.Object:getClass()', '(S)org.apache.mahout.math.TestSparseMatrix:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.SparseMatrix:iterator()', '(M)org.apache.mahout.math.SparseMatrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:index()', '(M)org.apache.mahout.math.MatrixSlice:index()', '(S)org.apache.mahout.math.TestSparseMatrix:assertEquals(java.lang.String,long,long)', '(S)org.apache.mahout.math.TestSparseMatrix:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', '(I)java.util.Iterator:hasNext()', '(S)java.lang.Boolean:valueOf(boolean)', '(I)java.util.Iterator:hasNext()', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.TestSparseMatrix:assertSame(java.lang.String,java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.TestSparseRowMatrix:testTimesCorrect():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int,boolean)', '(S)org.apache.mahout.math.function.Functions:random()', '(M)org.apache.mahout.math.SparseRowMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int,boolean)', '(S)org.apache.mahout.math.function.Functions:random()', '(M)org.apache.mahout.math.SparseRowMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.TestSparseRowMatrix:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.TestSparseRowMatrix:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.TestSparseRowMatrix:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSparseRowMatrix:testTimesDenseEfficiency():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int,boolean)', '(M)org.apache.mahout.math.jet.random.Gamma:nextDouble()', '(S)java.lang.Math:min(double,double)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(M)java.util.Random:nextDouble()', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(S)java.lang.System:nanoTime()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)java.lang.System:nanoTime()', '(S)java.lang.Double:valueOf(double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSparseRowMatrix:testTimesOtherSparseEfficiency():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int,boolean)', '(M)org.apache.mahout.math.jet.random.Gamma:nextDouble()', '(S)java.lang.Math:min(double,double)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.function.Functions:random()', '(M)org.apache.mahout.math.DenseVector:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)org.apache.mahout.math.DiagonalMatrix:<init>(org.apache.mahout.math.Vector)', '(S)java.lang.System:nanoTime()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)java.lang.System:nanoTime()', '(S)java.lang.Double:valueOf(double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(I)org.apache.mahout.math.Matrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:index()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)org.apache.mahout.math.TestSparseRowMatrix:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestSparseRowMatrix:testTimesSparseEfficiency():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int,boolean)', '(M)org.apache.mahout.math.jet.random.Gamma:nextDouble()', '(S)java.lang.Math:min(double,double)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(O)org.apache.mahout.math.SparseRowMatrix:<init>(int,int,boolean)', '(M)org.apache.mahout.math.jet.random.Gamma:nextDouble()', '(S)java.lang.Math:min(double,double)', '(I)org.apache.mahout.math.Matrix:set(int,int,double)', '(S)java.lang.System:nanoTime()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)java.lang.System:nanoTime()', '(S)java.lang.Double:valueOf(double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)java.util.Random:nextDouble()', '(S)java.lang.Math:log(double)', '(M)java.util.Random:nextDouble()', '(S)java.lang.Math:log(double)', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignBinaryFunction():['(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignBinaryFunction2():['(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignBinaryFunction3():['(O)org.apache.mahout.math.function.TimesFunction:<init>()', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignDouble():['(I)org.apache.mahout.math.Vector:assign(double)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignDoubleArray():['(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:assign(double[])', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignDoubleArrayCardinality():['(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:assign(double[])']
M:org.apache.mahout.math.TestVectorView:testAssignUnaryFunction():['(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignVector():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testAssignVectorCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.TestVectorView:testCardinality():['(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestVectorView:testCopy():['(I)org.apache.mahout.math.Vector:clone()', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testCrossProduct():['(I)org.apache.mahout.math.Vector:cross(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Matrix:rowSize()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Matrix:rowSize()', '(I)org.apache.mahout.math.Matrix:columnSize()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(I)org.apache.mahout.math.Vector:getQuick(int)', '(I)org.apache.mahout.math.Matrix:getQuick(int,int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testDivideDouble():['(I)org.apache.mahout.math.Vector:divide(double)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testDot():['(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testDotCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.TestVectorView:testGet():['(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testGetOver():['(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:get(int)']
M:org.apache.mahout.math.TestVectorView:testGetUnder():['(I)org.apache.mahout.math.Vector:get(int)']
M:org.apache.mahout.math.TestVectorView:testIterator():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(M)org.apache.mahout.math.VectorView:iterator()', '(S)org.apache.mahout.math.TestVectorView:checkIterator(java.util.Iterator,double[])', '(M)org.apache.mahout.math.VectorView:iterateNonZero()', '(S)org.apache.mahout.math.TestVectorView:checkIterator(java.util.Iterator,double[])', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(M)org.apache.mahout.math.VectorView:iterator()', '(S)org.apache.mahout.math.TestVectorView:checkIterator(java.util.Iterator,double[])', '(M)org.apache.mahout.math.VectorView:iterateNonZero()', '(S)org.apache.mahout.math.TestVectorView:checkIterator(java.util.Iterator,double[])']
M:org.apache.mahout.math.TestVectorView:testLike():['(I)org.apache.mahout.math.Vector:like()', '(S)org.apache.mahout.math.TestVectorView:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.TestVectorView:testMinus():['(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testNormalize():['(I)org.apache.mahout.math.Vector:normalize()', '(S)java.lang.Math:sqrt(double)', '(I)org.apache.mahout.math.Vector:size()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testPlusDouble():['(I)org.apache.mahout.math.Vector:plus(double)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testPlusVector():['(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testPlusVectorCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.TestVectorView:testSet():['(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testSize():['(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.TestVectorView:testTimesDouble():['(I)org.apache.mahout.math.Vector:times(double)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testTimesVector():['(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:size()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testTimesVectorCardinality():['(I)org.apache.mahout.math.Vector:size()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:times(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.TestVectorView:testViewPart():['(I)org.apache.mahout.math.Vector:viewPart(int,int)', '(I)org.apache.mahout.math.Vector:getNumNondefaultElements()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,long,long)', '(I)org.apache.mahout.math.Vector:size()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.TestVectorView:testViewPartCardinality():['(I)org.apache.mahout.math.Vector:viewPart(int,int)']
M:org.apache.mahout.math.TestVectorView:testViewPartOver():['(I)org.apache.mahout.math.Vector:viewPart(int,int)']
M:org.apache.mahout.math.TestVectorView:testViewPartUnder():['(I)org.apache.mahout.math.Vector:viewPart(int,int)']
M:org.apache.mahout.math.TestVectorView:testZSum():['(I)org.apache.mahout.math.Vector:zSum()', '(S)org.apache.mahout.math.TestVectorView:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.UpperTriangularTest:testBasics():['(O)org.apache.mahout.math.UpperTriangular:<init>(double[],boolean)', '(I)org.apache.mahout.math.Matrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.UpperTriangularTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:viewDiagonal()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.UpperTriangularTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:get(int,int)', '(S)org.apache.mahout.math.UpperTriangularTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.UpperTriangularTest:print(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.UpperTriangularTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.UpperTriangularTest:print(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.UpperTriangularTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:plus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.UpperTriangularTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorBinaryAggregateTest:testSelf():['(I)org.apache.mahout.math.Vector:like()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)com.google.common.collect.Lists:newArrayList()', '(I)org.apache.mahout.math.Vector:size()', '(M)java.util.Random:nextDouble()', '(S)java.lang.Double:valueOf(double)', '(I)java.util.List:add(java.lang.Object)', '(I)org.apache.mahout.math.Vector:size()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:like()', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.DenseVector:<init>(org.apache.mahout.math.Vector)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(I)org.apache.mahout.math.Vector:size()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', '(M)org.apache.mahout.math.VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', '(S)org.junit.Assert:assertEquals(double,double,double)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorBinaryAggregateTest:testSeparate():['(S)com.google.common.collect.Lists:newArrayList()', '(S)com.google.common.collect.Lists:newArrayList()', '(M)java.util.Random:nextDouble()', '(S)java.lang.Double:valueOf(double)', '(I)java.util.List:add(java.lang.Object)', '(M)java.util.Random:nextDouble()', '(S)java.lang.Double:valueOf(double)', '(I)java.util.List:add(java.lang.Object)', '(I)org.apache.mahout.math.Vector:like()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:size()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:like()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:size()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(I)org.apache.mahout.math.Vector:size()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(M)org.apache.mahout.math.VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', '(M)org.apache.mahout.math.VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', '(S)org.junit.Assert:assertEquals(double,double,double)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorBinaryAssignTest:testAll():['(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:size()', '(M)org.apache.mahout.math.SequentialAccessSparseVector:setQuick(int,double)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(org.apache.mahout.math.SequentialAccessSparseVector)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.VectorBinaryAssign:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:size()', '(M)org.apache.mahout.math.SequentialAccessSparseVector:getQuick(int)', '(M)org.apache.mahout.math.function.DoubleDoubleFunction:apply(double,double)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorTest:testAddTo():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.lang.Object:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)']
M:org.apache.mahout.math.VectorTest:testAggregation():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpFirstVector(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:setUpSecondVector(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpFirstVector(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:setUpSecondVector(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpFirstVector(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:setUpSecondVector(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testDenseVector():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testEmptyAggregate1():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(M)org.apache.mahout.math.DenseVector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(M)org.apache.mahout.math.DenseVector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(M)org.apache.mahout.math.DenseVector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorTest:testEmptyAggregate2():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(M)org.apache.mahout.math.DenseVector:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(M)org.apache.mahout.math.DenseVector:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector):['(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(I)java.util.Iterator:next()', '(S)org.apache.mahout.math.VectorTest:fail()', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(I)java.util.Iterator:next()', '(S)org.apache.mahout.math.VectorTest:fail()']
M:org.apache.mahout.math.VectorTest:testEmptyNonZeroIterator(org.apache.mahout.math.Vector):['(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(I)java.util.Iterator:next()', '(S)org.apache.mahout.math.VectorTest:fail()']
M:org.apache.mahout.math.VectorTest:testEnumeration():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(S)org.apache.mahout.math.VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(S)org.apache.mahout.math.VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)org.apache.mahout.math.VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)org.apache.mahout.math.VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testEquivalent():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector):['(I)org.apache.mahout.math.Vector:set(int,double)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)com.google.common.collect.Sets:newHashSet(java.lang.Object[])', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)com.google.common.collect.Sets:newHashSet(java.lang.Object[])', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Set:contains(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Vector$Element:get()', '(S)java.lang.Double:valueOf(double)', '(I)java.util.Set:contains(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertTrue(boolean)', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:getNumNonZeroElements()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector$Element:set(double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:getNumNonZeroElements()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:getNumNonZeroElements()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.VectorTest:testGetDistanceSquared():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpV(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:setUpW(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestGetDistanceSquared(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpV(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:setUpW(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestGetDistanceSquared(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpV(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:setUpW(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestGetDistanceSquared(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testGetLengthSquared():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpV(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestGetLengthSquared(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpV(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestGetLengthSquared(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:setUpV(org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestGetLengthSquared(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testHashCode():['(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(M)java.lang.Object:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(M)java.lang.Object:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(M)java.lang.Object:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(M)java.lang.Object:equals(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)']
M:org.apache.mahout.math.VectorTest:testHashCodeEquivalence():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.lang.Object:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.DenseVector:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.DenseVector:hashCode()', '(M)java.lang.Object:hashCode()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.VectorTest:testIterator():['(S)com.google.common.collect.Sets:newHashSet()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Collection:add(java.lang.Object)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)java.util.Collection:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)java.lang.Integer:intValue()', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)org.apache.mahout.math.VectorTest:doTestIterators(org.apache.mahout.math.Vector,java.util.Collection)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)java.util.Collection:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)java.lang.Integer:intValue()', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)org.apache.mahout.math.VectorTest:doTestIterators(org.apache.mahout.math.Vector,java.util.Collection)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)java.util.Collection:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)java.lang.Integer:intValue()', '(I)org.apache.mahout.math.Vector:set(int,double)', '(S)org.apache.mahout.math.VectorTest:doTestIterators(org.apache.mahout.math.Vector,java.util.Collection)']
M:org.apache.mahout.math.VectorTest:testIterator(org.apache.mahout.math.Vector):['(I)org.apache.mahout.math.Vector:like()', '(S)org.apache.mahout.math.VectorTest:testSkips(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:like()', '(S)org.apache.mahout.math.VectorTest:testSkipsLast(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:like()', '(S)org.apache.mahout.math.VectorTest:testEmptyNonZeroIterator(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:like()', '(S)org.apache.mahout.math.VectorTest:testSingleNonZeroIterator(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testIteratorDense():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testIterator(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testIteratorRasv():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testIterator(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testIteratorSasv():['(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testIterator(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testLogNormalize():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:logNormalize()', '(S)org.apache.mahout.math.VectorTest:assertNotNull(java.lang.String,java.lang.Object)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:logNormalize()', '(S)org.apache.mahout.math.VectorTest:assertNotNull(java.lang.String,java.lang.Object)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(S)org.apache.mahout.math.VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', '(S)org.apache.mahout.math.VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', '(I)org.apache.mahout.math.Vector:logNormalize(double)', '(S)org.apache.mahout.math.VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', '(I)org.apache.mahout.math.Vector:logNormalize(double)', '(S)org.apache.mahout.math.VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', '(I)org.apache.mahout.math.Vector:logNormalize(double)', '(S)org.apache.mahout.math.VectorTest:fail(java.lang.String)', '(I)org.apache.mahout.math.Vector:logNormalize(double)', '(S)org.apache.mahout.math.VectorTest:fail(java.lang.String)', '(I)org.apache.mahout.math.Vector:logNormalize(double)', '(S)org.apache.mahout.math.VectorTest:fail(java.lang.String)']
M:org.apache.mahout.math.VectorTest:testMax():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorTest:testMin():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:minValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:maxValueIndex()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:maxValue()', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.VectorTest:testNormalize():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:normalize()', '(S)org.apache.mahout.math.VectorTest:assertNotNull(java.lang.String,java.lang.Object)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:normalize()', '(S)org.apache.mahout.math.VectorTest:assertNotNull(java.lang.String,java.lang.Object)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(S)java.lang.Math:pow(double,double)', '(I)org.apache.mahout.math.Vector:divide(double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(I)org.apache.mahout.math.Vector:setQuick(int,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)org.apache.mahout.math.Vector:normalize(double)', '(S)org.apache.mahout.math.VectorTest:fail()', '(I)org.apache.mahout.math.Vector:normalize(double)', '(S)org.apache.mahout.math.VectorTest:fail()']
M:org.apache.mahout.math.VectorTest:testNumNonZerosDense():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(M)org.apache.mahout.math.DenseVector:assign(double)', '(M)org.apache.mahout.math.DenseVector:setQuick(int,double)', '(M)org.apache.mahout.math.DenseVector:set(int,double)', '(M)org.apache.mahout.math.DenseVector:getNumNonZeroElements()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.VectorTest:testNumNonZerosRandomAccessSparse():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:set(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:set(int,double)', '(M)org.apache.mahout.math.RandomAccessSparseVector:getNumNonZeroElements()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.VectorTest:testNumNonZerosSequentialAccessSparse():['(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:set(int,double)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:setQuick(int,double)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:set(int,double)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:getNumNonZeroElements()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.VectorTest:testSingleNonZeroIterator(org.apache.mahout.math.Vector):['(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:next()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(I)java.util.Iterator:next()', '(S)org.apache.mahout.math.VectorTest:fail()']
M:org.apache.mahout.math.VectorTest:testSkips(org.apache.mahout.math.Vector):['(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(O)java.util.HashSet:<init>()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:add(java.lang.Object)', '(I)org.apache.mahout.math.Vector$Element:get()', '(I)org.apache.mahout.math.Vector$Element:index()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(M)java.util.HashSet:size()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:contains(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertTrue(boolean)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:contains(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertTrue(boolean)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:contains(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertTrue(boolean)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:contains(java.lang.Object)', '(S)org.apache.mahout.math.VectorTest:assertTrue(boolean)', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector$Element:get()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.VectorTest:testSkipsLast(org.apache.mahout.math.Vector):['(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:index()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.VectorTest:testSparseVector():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(S)org.apache.mahout.math.VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.VectorTest:testSparseVectorFullIteration():['(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(M)org.apache.mahout.math.SequentialAccessSparseVector:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)']
M:org.apache.mahout.math.VectorTest:testSparseVectorSparseIteration():['(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:set(int,double)', '(I)org.apache.mahout.math.Vector:get(int)', '(S)org.apache.mahout.math.VectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(S)org.apache.mahout.math.VectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(I)org.apache.mahout.math.Vector:nonZeroes()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(S)org.apache.mahout.math.VectorTest:assertFalse(boolean)']
M:org.apache.mahout.math.VectorTest:testVectorView():['(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.RandomAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.SequentialAccessSparseVector:<init>(int)', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(O)org.apache.mahout.math.VectorView:<init>(org.apache.mahout.math.Vector,int,int)', '(S)org.apache.mahout.math.VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(S)org.apache.mahout.math.VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
M:org.apache.mahout.math.WeightedVectorTest:testLength():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.DenseVector:<init>(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.Centroid:<init>(int,org.apache.mahout.math.Vector,double)', '(M)org.apache.mahout.math.Centroid:getVector()', '(I)org.apache.mahout.math.Vector:getLengthSquared()', '(M)org.apache.mahout.math.Centroid:getLengthSquared()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.Centroid:set(int,double)', '(M)org.apache.mahout.math.Centroid:getLengthSquared()', '(S)java.lang.Double:valueOf(double)', '(M)org.apache.mahout.math.Centroid:getVector()', '(I)org.apache.mahout.math.Vector:getLengthSquared()', '(S)java.lang.Double:valueOf(double)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.Centroid:getVector()', '(I)org.apache.mahout.math.Vector:getLengthSquared()', '(M)org.apache.mahout.math.Centroid:getLengthSquared()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.WeightedVectorTest:testOrdering():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.WeightedVector:<init>(org.apache.mahout.math.Vector,double,int)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.WeightedVector:<init>(org.apache.mahout.math.Vector,double,int)', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.WeightedVector:<init>(org.apache.mahout.math.Vector,double,int)', '(M)org.apache.mahout.math.WeightedVector:clone()', '(O)org.apache.mahout.math.WeightedVectorComparator:<init>()', '(M)org.apache.mahout.math.WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', '(S)org.apache.mahout.math.WeightedVectorTest:assertTrue(boolean)', '(M)org.apache.mahout.math.WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', '(S)org.apache.mahout.math.WeightedVectorTest:assertTrue(boolean)', '(M)org.apache.mahout.math.WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', '(S)org.apache.mahout.math.WeightedVectorTest:assertTrue(boolean)', '(M)org.apache.mahout.math.WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(long,long)', '(M)org.apache.mahout.math.WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(long,long)']
M:org.apache.mahout.math.WeightedVectorTest:testProjection():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)org.apache.mahout.math.function.Functions:random()', '(M)org.apache.mahout.math.DenseVector:assign(org.apache.mahout.math.function.DoubleFunction)', '(O)org.apache.mahout.math.WeightedVector:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(M)org.apache.mahout.math.WeightedVector:getWeight()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.WeightedVector:getIndex()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(long,long)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(S)org.apache.mahout.math.function.Functions:random()', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(O)org.apache.mahout.math.QRDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.QRDecomposition:getQ()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:minus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.WeightedVector:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int)', '(M)org.apache.mahout.math.WeightedVector:getWeight()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:plus(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:normalize()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(O)org.apache.mahout.math.WeightedVector:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int)', '(S)java.lang.Math:sqrt(double)', '(M)org.apache.mahout.math.WeightedVector:getWeight()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(S)org.apache.mahout.math.WeightedVector:project(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(S)java.lang.Math:sqrt(double)', '(M)org.apache.mahout.math.WeightedVector:getWeight()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.WeightedVectorTest:testSize():['(M)org.apache.mahout.math.WeightedVectorTest:getTestVector()', '(I)org.apache.mahout.math.Vector:getNumNonZeroElements()', '(S)org.apache.mahout.math.WeightedVectorTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest:testYtY():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest:validateYtY(org.apache.mahout.math.Matrix,int)', '(O)org.apache.mahout.math.als.AlternatingLeastSquaresSolverTest:validateYtY(org.apache.mahout.math.Matrix,int)']
M:org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver:testHebbianSolver():['(S)org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver:randomSequentialAccessSparseMatrix(int,int,int,int,double)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(O)org.apache.mahout.math.decomposer.hebbian.TrainingState:<init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver:timeSolver(org.apache.mahout.math.Matrix,double,int,int,org.apache.mahout.math.decomposer.hebbian.TrainingState)', '(M)org.apache.mahout.math.decomposer.hebbian.TrainingState:getCurrentEigens()', '(S)org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver:assertEigen(org.apache.mahout.math.Matrix,org.apache.mahout.math.VectorIterable,double,boolean)', '(S)org.apache.mahout.math.decomposer.hebbian.TestHebbianSolver:assertOrthonormal(org.apache.mahout.math.Matrix,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(long)', '(M)java.lang.StringBuilder:toString()', '(M)java.io.PrintStream:println(java.lang.String)']
M:org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:testEigenvalueCheck():['(S)org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:randomHierarchicalSymmetricMatrix(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)java.lang.Math:sqrt(double)', '(I)org.apache.mahout.math.Vector:assign(double)', '(O)org.apache.mahout.math.decomposer.lanczos.LanczosSolver:<init>()', '(O)org.apache.mahout.math.decomposer.lanczos.LanczosState:<init>(org.apache.mahout.math.VectorIterable,int,org.apache.mahout.math.Vector)', '(M)org.apache.mahout.math.decomposer.lanczos.LanczosSolver:solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getRealEigenvalues()', '(M)org.apache.mahout.math.decomposer.lanczos.LanczosState:getSingularValue(int)', '(M)java.lang.Double:doubleValue()', '(I)org.apache.mahout.math.Vector:get(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(I)org.slf4j.Logger:info(java.lang.String,java.lang.Object[])', '(S)java.lang.Math:abs(double)', '(S)org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:assertTrue(java.lang.String,boolean)', '(M)org.apache.mahout.math.decomposer.lanczos.LanczosState:getRightSingularVector(int)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:viewColumn(int)', '(I)org.apache.mahout.math.Vector:dot(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:norm(double)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)java.lang.Math:abs(double)', '(S)java.lang.Double:valueOf(double)', '(I)org.slf4j.Logger:info(java.lang.String,java.lang.Object)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:toString()', '(S)org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:assertTrue(java.lang.String,boolean)']
M:org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:testLanczosSolver():['(S)org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:randomHierarchicalMatrix(int,int,boolean)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)java.lang.Math:sqrt(double)', '(I)org.apache.mahout.math.Vector:assign(double)', '(O)org.apache.mahout.math.decomposer.lanczos.LanczosState:<init>(org.apache.mahout.math.VectorIterable,int,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.decomposer.lanczos.LanczosSolver:<init>()', '(M)org.apache.mahout.math.decomposer.lanczos.LanczosSolver:solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)', '(S)org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:assertOrthonormal(org.apache.mahout.math.decomposer.lanczos.LanczosState)', '(M)org.apache.mahout.math.decomposer.lanczos.LanczosState:getRightSingularVector(int)', '(S)org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:assertEigen(int,org.apache.mahout.math.Vector,org.apache.mahout.math.VectorIterable,double,boolean)']
M:org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:testLanczosSolverSymmetric():['(S)org.apache.mahout.math.decomposer.lanczos.TestLanczosSolver:randomHierarchicalSymmetricMatrix(int)', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(S)java.lang.Math:sqrt(double)', '(I)org.apache.mahout.math.Vector:assign(double)', '(O)org.apache.mahout.math.decomposer.lanczos.LanczosState:<init>(org.apache.mahout.math.VectorIterable,int,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.decomposer.lanczos.LanczosSolver:<init>()', '(M)org.apache.mahout.math.decomposer.lanczos.LanczosSolver:solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)']
M:org.apache.mahout.math.jet.random.ExponentialTest:testCdf():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Exponential:<init>(double,java.util.Random)', '(S)java.lang.Math:exp(double)', '(M)org.apache.mahout.math.jet.random.Exponential:cdf(double)', '(S)org.apache.mahout.math.jet.random.ExponentialTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.jet.random.ExponentialTest:testNextDouble():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Exponential:<init>(double,java.util.Random)', '(M)org.apache.mahout.math.jet.random.Exponential:setState(double)', '(S)org.apache.mahout.math.jet.random.ExponentialTest:checkEmpiricalDistribution(org.apache.mahout.math.jet.random.Exponential,int,double)', '(S)org.apache.mahout.math.jet.random.DistributionChecks:checkDistribution(org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double,double,int)']
M:org.apache.mahout.math.jet.random.ExponentialTest:testPdf():['(O)org.apache.mahout.math.jet.random.Exponential:<init>(double,java.util.Random)', '(S)org.apache.mahout.math.jet.random.ExponentialTest:checkPdf(org.apache.mahout.math.jet.random.Exponential,double)']
M:org.apache.mahout.math.jet.random.ExponentialTest:testSetState():['(O)org.apache.mahout.math.jet.random.Exponential:<init>(double,java.util.Random)', '(M)org.apache.mahout.math.jet.random.Exponential:setState(double)', '(S)org.apache.mahout.math.jet.random.ExponentialTest:checkPdf(org.apache.mahout.math.jet.random.Exponential,double)']
M:org.apache.mahout.math.jet.random.ExponentialTest:testToString():['(O)org.apache.mahout.math.jet.random.Exponential:<init>(double,java.util.Random)', '(M)org.apache.mahout.math.jet.random.Exponential:toString()', '(S)org.apache.mahout.math.jet.random.ExponentialTest:assertEquals(java.lang.Object,java.lang.Object)', '(O)org.apache.mahout.math.jet.random.Exponential:<init>(double,java.util.Random)', '(M)org.apache.mahout.math.jet.random.Exponential:toString()', '(S)org.apache.mahout.math.jet.random.ExponentialTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.jet.random.GammaTest:testCdf():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(S)org.apache.mahout.math.jet.random.GammaTest:seq(double,double,double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.util.Locale,java.lang.String,java.lang.Object[])', '(S)java.lang.Math:exp(double)', '(M)org.apache.mahout.math.jet.random.Gamma:cdf(double)', '(S)org.apache.mahout.math.jet.random.GammaTest:assertEquals(java.lang.String,double,double,double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.util.Locale,java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.jet.random.Gamma:cdf(double)', '(M)org.apache.mahout.math.jet.random.Gamma:cdf(double)', '(S)org.apache.mahout.math.jet.random.GammaTest:assertEquals(java.lang.String,double,double,double)', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(S)org.apache.mahout.math.jet.random.GammaTest:seq(double,double,double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.util.Locale,java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.jet.random.Gamma:cdf(double)', '(M)org.apache.mahout.math.jet.random.Gamma:cdf(double)', '(S)org.apache.mahout.math.jet.random.GammaTest:assertEquals(java.lang.String,double,double,double)', '(S)org.apache.mahout.math.jet.random.GammaTest:checkGammaCdf(double,double,double[])', '(S)org.apache.mahout.math.jet.random.GammaTest:checkGammaCdf(double,double,double[])', '(S)org.apache.mahout.math.jet.random.GammaTest:checkGammaCdf(double,double,double[])', '(S)org.apache.mahout.math.jet.random.GammaTest:checkGammaCdf(double,double,double[])', '(S)org.apache.mahout.math.jet.random.GammaTest:checkGammaCdf(double,double,double[])']
M:org.apache.mahout.math.jet.random.GammaTest:testNextDouble():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(M)org.apache.mahout.math.jet.random.Gamma:nextDouble()', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.jet.random.GammaTest:seq(double,double,double)', '(M)org.apache.mahout.math.jet.random.Gamma:cdf(double)', '(S)org.apache.mahout.math.jet.random.GammaTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.jet.random.GammaTest:testPdf():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Gamma:<init>(double,double,java.util.Random)', '(S)org.apache.mahout.math.jet.random.GammaTest:seq(double,double,double)', '(S)java.lang.Math:pow(double,double)', '(S)java.lang.Math:pow(double,double)', '(S)org.apache.mahout.math.jet.stat.Gamma:logGamma(double)', '(S)java.lang.Math:exp(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.util.Locale,java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.jet.random.Gamma:pdf(double)', '(S)org.apache.mahout.math.jet.random.GammaTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.jet.random.NegativeBinomialTest:testDistributionFunctions():['(S)com.google.common.io.Resources:getResource(java.lang.String)', '(S)com.google.common.io.Resources:newReaderSupplier(java.net.URL,java.nio.charset.Charset)', '(S)com.google.common.io.CharStreams:readLines(com.google.common.io.InputSupplier)', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)com.google.common.base.Splitter:split(java.lang.CharSequence)', '(S)com.google.common.collect.Iterables:get(java.lang.Iterable,int)', '(S)java.lang.Integer:parseInt(java.lang.String)', '(S)com.google.common.collect.Iterables:get(java.lang.Iterable,int)', '(S)java.lang.Double:parseDouble(java.lang.String)', '(S)com.google.common.collect.Iterables:get(java.lang.Iterable,int)', '(S)java.lang.Integer:parseInt(java.lang.String)', '(S)com.google.common.collect.Iterables:get(java.lang.Iterable,int)', '(S)java.lang.Double:parseDouble(java.lang.String)', '(S)com.google.common.collect.Iterables:get(java.lang.Iterable,int)', '(S)java.lang.Double:parseDouble(java.lang.String)', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.NegativeBinomial:<init>(int,double,java.util.Random)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.jet.random.NegativeBinomial:cdf(int)', '(S)org.apache.mahout.math.jet.random.NegativeBinomialTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.jet.random.NegativeBinomial:pdf(int)', '(S)org.apache.mahout.math.jet.random.NegativeBinomialTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.jet.random.NormalTest:testCdf():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Normal:<init>(double,double,java.util.Random)', '(S)org.apache.mahout.math.jet.random.DistributionChecks:checkCdf(double,double,org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double[])', '(M)java.util.Random:nextGaussian()', '(M)java.util.Random:nextGaussian()', '(S)java.lang.Math:exp(double)']
M:org.apache.mahout.math.jet.random.NormalTest:testSetState():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Normal:<init>(double,double,java.util.Random)', '(M)org.apache.mahout.math.jet.random.Normal:setState(double,double)', '(S)org.apache.mahout.math.jet.random.DistributionChecks:checkDistribution(org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double,double,int)']
M:org.apache.mahout.math.jet.random.NormalTest:testToString():['(O)org.apache.mahout.math.jet.random.Normal:<init>(double,double,java.util.Random)', '(M)org.apache.mahout.math.jet.random.Normal:toString()', '(S)org.apache.mahout.math.jet.random.NormalTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:test10001():['(O)org.apache.mahout.math.jet.random.engine.MersenneTwister:<init>()', '(M)org.apache.mahout.math.jet.random.engine.MersenneTwister:setReferenceSeed(int)', '(M)org.apache.mahout.math.jet.random.engine.MersenneTwister:nextInt()', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(S)org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:assertEquals(java.lang.String,long,long)', '(M)org.apache.mahout.math.jet.random.engine.MersenneTwister:setReferenceSeed(int)', '(S)java.lang.Double:valueOf(double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)java.lang.Double:doubleValue()', '(M)org.apache.mahout.math.jet.random.engine.MersenneTwister:nextInt()', '(S)org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:toDouble(long)', '(S)org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:testDateConstructor():['(O)org.apache.mahout.math.jet.random.engine.MersenneTwister:<init>(int)', '(O)java.util.Date:<init>(long)', '(O)org.apache.mahout.math.jet.random.engine.MersenneTwister:<init>(java.util.Date)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.jet.random.engine.RandomEngine:nextInt()', '(M)org.apache.mahout.math.jet.random.engine.RandomEngine:nextInt()', '(S)org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:assertEquals(java.lang.String,long,long)']
M:org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:testRegression():['(O)org.apache.mahout.math.jet.random.engine.MersenneTwister:<init>(int)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.jet.random.engine.RandomEngine:nextDouble()', '(S)org.apache.mahout.math.jet.random.engine.MersenneTwisterTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.jet.stat.GammaTest:testBigX():['(S)org.apache.mahout.math.jet.stat.GammaTest:factorial(int)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:factorial(int)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:factorial(int)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:factorial(int)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:factorial(int)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:factorial(int)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:factorial(int)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)java.lang.Math:abs(double)', '(S)java.lang.Math:log(double)', '(S)org.apache.mahout.math.jet.stat.Gamma:logGamma(double)', '(S)java.lang.Math:abs(double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:append(char)', '(M)java.lang.StringBuilder:toString()', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.jet.stat.GammaTest:testGamma():['(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:gammaInteger(double)', '(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:gammaInteger(double)', '(S)org.apache.mahout.math.jet.stat.Gamma:logGamma(double)', '(S)java.lang.Math:exp(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.jet.stat.GammaTest:testNegativeArgForGamma():['(S)org.apache.mahout.math.jet.stat.Gamma:gamma(double)', '(S)java.lang.Math:abs(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)', '(S)java.lang.Math:abs(double)', '(S)org.apache.mahout.math.jet.stat.Gamma:logGamma(double)', '(S)java.lang.Math:exp(double)', '(S)java.lang.Math:abs(double)', '(S)java.lang.Math:abs(double)', '(S)org.apache.mahout.math.jet.stat.GammaTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.jet.stat.ProbabilityTest:testBetaCdf():['(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.util.Locale,java.lang.String,java.lang.Object[])', '(S)org.apache.mahout.math.jet.stat.Probability:beta(double,double,double)', '(S)org.apache.mahout.math.jet.stat.ProbabilityTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.jet.stat.ProbabilityTest:testLogGamma():['(S)org.apache.mahout.math.jet.stat.Gamma:logGamma(double)', '(S)org.apache.mahout.math.jet.stat.ProbabilityTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.jet.stat.ProbabilityTest:testNormalCdf():['(S)org.apache.mahout.math.jet.stat.Probability:normal(double)', '(S)org.apache.mahout.math.jet.stat.ProbabilityTest:assertEquals(double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:toString()', '(S)org.apache.mahout.math.jet.stat.Probability:normal(double)', '(S)org.apache.mahout.math.jet.stat.ProbabilityTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:toString()', '(S)org.apache.mahout.math.jet.stat.Probability:normal(double,double,double)', '(S)org.apache.mahout.math.jet.stat.ProbabilityTest:assertEquals(java.lang.String,double,double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(double)', '(M)java.lang.StringBuilder:toString()', '(S)org.apache.mahout.math.jet.stat.Probability:normal(double,double,double)', '(S)org.apache.mahout.math.jet.stat.ProbabilityTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.list.ByteArrayListTest:testAdd():['(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testBinarySearch():['(M)org.apache.mahout.math.list.ByteArrayList:binarySearchFromTo(byte,int,int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:binarySearchFromTo(byte,int,int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testClone():['(M)org.apache.mahout.math.list.ByteArrayList:copy()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.ByteArrayListTest:testElements():['(O)org.apache.mahout.math.list.ByteArrayList:<init>(byte[])', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:elements()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:elements(byte[])', '(M)org.apache.mahout.math.list.ByteArrayList:elements()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.ByteArrayListTest:testEquals():['(O)org.apache.mahout.math.list.ByteArrayList:<init>(byte[])', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertFalse(boolean)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertFalse(boolean)']
M:org.apache.mahout.math.list.ByteArrayListTest:testForEach():['(O)org.apache.mahout.math.list.ByteArrayListTest$1:<init>(org.apache.mahout.math.list.ByteArrayListTest)', '(M)org.apache.mahout.math.list.ByteArrayList:forEach(org.apache.mahout.math.function.ByteProcedure)']
M:org.apache.mahout.math.list.ByteArrayListTest:testGetEmpty():['(M)org.apache.mahout.math.list.ByteArrayList:get(int)']
M:org.apache.mahout.math.list.ByteArrayListTest:testGetQuick():['(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ByteArrayList:getQuick(int)']
M:org.apache.mahout.math.list.ByteArrayListTest:testIndexOfFromTo():['(M)org.apache.mahout.math.list.ByteArrayList:indexOfFromTo(byte,int,int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:indexOfFromTo(byte,int,int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testLastIndexOfFromTo():['(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:lastIndexOf(byte)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:lastIndexOfFromTo(byte,int,int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:lastIndexOf(byte)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testPartFromTo():['(M)org.apache.mahout.math.list.ByteArrayList:partFromTo(int,int)', '(M)org.apache.mahout.math.list.AbstractByteList:size()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractByteList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractByteList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testPartFromToOOB():['(M)org.apache.mahout.math.list.ByteArrayList:partFromTo(int,int)']
M:org.apache.mahout.math.list.ByteArrayListTest:testRemoveAll():['(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:removeAll(org.apache.mahout.math.list.AbstractByteList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testReplaceFromToWith():['(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractByteList,int,int)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testRetainAllSmall():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.list.ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:retainAll(org.apache.mahout.math.list.AbstractByteList)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ByteArrayListTest:testRetainAllSmaller():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.list.ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:add(byte)', '(M)org.apache.mahout.math.list.ByteArrayList:retainAll(org.apache.mahout.math.list.AbstractByteList)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.list.ByteArrayListTest:assertTrue(boolean)']
M:org.apache.mahout.math.list.CharArrayListTest:testAdd():['(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testBinarySearch():['(M)org.apache.mahout.math.list.CharArrayList:binarySearchFromTo(char,int,int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:binarySearchFromTo(char,int,int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testClone():['(M)org.apache.mahout.math.list.CharArrayList:copy()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.CharArrayListTest:testElements():['(O)org.apache.mahout.math.list.CharArrayList:<init>(char[])', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:elements()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:elements(char[])', '(M)org.apache.mahout.math.list.CharArrayList:elements()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.CharArrayListTest:testEquals():['(O)org.apache.mahout.math.list.CharArrayList:<init>(char[])', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertFalse(boolean)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertFalse(boolean)']
M:org.apache.mahout.math.list.CharArrayListTest:testForEach():['(O)org.apache.mahout.math.list.CharArrayListTest$1:<init>(org.apache.mahout.math.list.CharArrayListTest)', '(M)org.apache.mahout.math.list.CharArrayList:forEach(org.apache.mahout.math.function.CharProcedure)']
M:org.apache.mahout.math.list.CharArrayListTest:testGetEmpty():['(M)org.apache.mahout.math.list.CharArrayList:get(int)']
M:org.apache.mahout.math.list.CharArrayListTest:testGetQuick():['(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.list.CharArrayList:getQuick(int)']
M:org.apache.mahout.math.list.CharArrayListTest:testIndexOfFromTo():['(M)org.apache.mahout.math.list.CharArrayList:indexOfFromTo(char,int,int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:indexOfFromTo(char,int,int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testLastIndexOfFromTo():['(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:lastIndexOf(char)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:lastIndexOfFromTo(char,int,int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:lastIndexOf(char)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testPartFromTo():['(M)org.apache.mahout.math.list.CharArrayList:partFromTo(int,int)', '(M)org.apache.mahout.math.list.AbstractCharList:size()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractCharList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractCharList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testPartFromToOOB():['(M)org.apache.mahout.math.list.CharArrayList:partFromTo(int,int)']
M:org.apache.mahout.math.list.CharArrayListTest:testRemoveAll():['(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:removeAll(org.apache.mahout.math.list.AbstractCharList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testReplaceFromToWith():['(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractCharList,int,int)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testRetainAllSmall():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.list.CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:retainAll(org.apache.mahout.math.list.AbstractCharList)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.list.CharArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.CharArrayListTest:testRetainAllSmaller():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.list.CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:add(char)', '(M)org.apache.mahout.math.list.CharArrayList:retainAll(org.apache.mahout.math.list.AbstractCharList)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.list.CharArrayListTest:assertTrue(boolean)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testAdd():['(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testBinarySearch():['(M)org.apache.mahout.math.list.DoubleArrayList:binarySearchFromTo(double,int,int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:binarySearchFromTo(double,int,int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testClone():['(M)org.apache.mahout.math.list.DoubleArrayList:copy()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testElements():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>(double[])', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:elements()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:elements(double[])', '(M)org.apache.mahout.math.list.DoubleArrayList:elements()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testEquals():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>(double[])', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertFalse(boolean)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertFalse(boolean)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testForEach():['(O)org.apache.mahout.math.list.DoubleArrayListTest$1:<init>(org.apache.mahout.math.list.DoubleArrayListTest)', '(M)org.apache.mahout.math.list.DoubleArrayList:forEach(org.apache.mahout.math.function.DoubleProcedure)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testGetEmpty():['(M)org.apache.mahout.math.list.DoubleArrayList:get(int)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testGetQuick():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.list.DoubleArrayList:getQuick(int)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testIndexOfFromTo():['(M)org.apache.mahout.math.list.DoubleArrayList:indexOfFromTo(double,int,int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:indexOfFromTo(double,int,int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testLastIndexOfFromTo():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:lastIndexOf(double)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:lastIndexOfFromTo(double,int,int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:lastIndexOf(double)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testPartFromTo():['(M)org.apache.mahout.math.list.DoubleArrayList:partFromTo(int,int)', '(M)org.apache.mahout.math.list.AbstractDoubleList:size()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractDoubleList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.AbstractDoubleList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testPartFromToOOB():['(M)org.apache.mahout.math.list.DoubleArrayList:partFromTo(int,int)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testRemoveAll():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:removeAll(org.apache.mahout.math.list.AbstractDoubleList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testReplaceFromToWith():['(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractDoubleList,int,int)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testRetainAllSmall():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.list.DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:retainAll(org.apache.mahout.math.list.AbstractDoubleList)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.DoubleArrayListTest:testRetainAllSmaller():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.list.DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:add(double)', '(M)org.apache.mahout.math.list.DoubleArrayList:retainAll(org.apache.mahout.math.list.AbstractDoubleList)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.list.DoubleArrayListTest:assertTrue(boolean)']
M:org.apache.mahout.math.list.FloatArrayListTest:testAdd():['(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.list.FloatArrayListTest:testBinarySearch():['(M)org.apache.mahout.math.list.FloatArrayList:binarySearchFromTo(float,int,int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:binarySearchFromTo(float,int,int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.FloatArrayListTest:testClone():['(M)org.apache.mahout.math.list.FloatArrayList:copy()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.FloatArrayListTest:testElements():['(O)org.apache.mahout.math.list.FloatArrayList:<init>(float[])', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:elements()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:elements(float[])', '(M)org.apache.mahout.math.list.FloatArrayList:elements()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.FloatArrayListTest:testEquals():['(O)org.apache.mahout.math.list.FloatArrayList:<init>(float[])', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertFalse(boolean)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertFalse(boolean)']
M:org.apache.mahout.math.list.FloatArrayListTest:testForEach():['(O)org.apache.mahout.math.list.FloatArrayListTest$1:<init>(org.apache.mahout.math.list.FloatArrayListTest)', '(M)org.apache.mahout.math.list.FloatArrayList:forEach(org.apache.mahout.math.function.FloatProcedure)']
M:org.apache.mahout.math.list.FloatArrayListTest:testGetEmpty():['(M)org.apache.mahout.math.list.FloatArrayList:get(int)']
M:org.apache.mahout.math.list.FloatArrayListTest:testGetQuick():['(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.list.FloatArrayList:getQuick(int)']
M:org.apache.mahout.math.list.FloatArrayListTest:testIndexOfFromTo():['(M)org.apache.mahout.math.list.FloatArrayList:indexOfFromTo(float,int,int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:indexOfFromTo(float,int,int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.FloatArrayListTest:testLastIndexOfFromTo():['(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:lastIndexOf(float)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:lastIndexOfFromTo(float,int,int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:lastIndexOf(float)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.FloatArrayListTest:testPartFromTo():['(M)org.apache.mahout.math.list.FloatArrayList:partFromTo(int,int)', '(M)org.apache.mahout.math.list.AbstractFloatList:size()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractFloatList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.AbstractFloatList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.list.FloatArrayListTest:testPartFromToOOB():['(M)org.apache.mahout.math.list.FloatArrayList:partFromTo(int,int)']
M:org.apache.mahout.math.list.FloatArrayListTest:testRemoveAll():['(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:removeAll(org.apache.mahout.math.list.AbstractFloatList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.list.FloatArrayListTest:testReplaceFromToWith():['(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractFloatList,int,int)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.list.FloatArrayListTest:testRetainAllSmall():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.list.FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:retainAll(org.apache.mahout.math.list.AbstractFloatList)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.FloatArrayListTest:testRetainAllSmaller():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.list.FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:add(float)', '(M)org.apache.mahout.math.list.FloatArrayList:retainAll(org.apache.mahout.math.list.AbstractFloatList)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.list.FloatArrayListTest:assertTrue(boolean)']
M:org.apache.mahout.math.list.IntArrayListTest:testAdd():['(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testBinarySearch():['(M)org.apache.mahout.math.list.IntArrayList:binarySearchFromTo(int,int,int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:binarySearchFromTo(int,int,int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testClone():['(M)org.apache.mahout.math.list.IntArrayList:copy()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.IntArrayListTest:testElements():['(O)org.apache.mahout.math.list.IntArrayList:<init>(int[])', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:elements()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:elements(int[])', '(M)org.apache.mahout.math.list.IntArrayList:elements()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.IntArrayListTest:testEquals():['(O)org.apache.mahout.math.list.IntArrayList:<init>(int[])', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertFalse(boolean)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertFalse(boolean)']
M:org.apache.mahout.math.list.IntArrayListTest:testForEach():['(O)org.apache.mahout.math.list.IntArrayListTest$1:<init>(org.apache.mahout.math.list.IntArrayListTest)', '(M)org.apache.mahout.math.list.IntArrayList:forEach(org.apache.mahout.math.function.IntProcedure)']
M:org.apache.mahout.math.list.IntArrayListTest:testGetEmpty():['(M)org.apache.mahout.math.list.IntArrayList:get(int)']
M:org.apache.mahout.math.list.IntArrayListTest:testGetQuick():['(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.list.IntArrayList:getQuick(int)']
M:org.apache.mahout.math.list.IntArrayListTest:testIndexOfFromTo():['(M)org.apache.mahout.math.list.IntArrayList:indexOfFromTo(int,int,int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:indexOfFromTo(int,int,int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testLastIndexOfFromTo():['(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:lastIndexOf(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:lastIndexOfFromTo(int,int,int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:lastIndexOf(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testPartFromTo():['(M)org.apache.mahout.math.list.IntArrayList:partFromTo(int,int)', '(M)org.apache.mahout.math.list.AbstractIntList:size()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractIntList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractIntList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testPartFromToOOB():['(M)org.apache.mahout.math.list.IntArrayList:partFromTo(int,int)']
M:org.apache.mahout.math.list.IntArrayListTest:testRemoveAll():['(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:removeAll(org.apache.mahout.math.list.AbstractIntList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testReplaceFromToWith():['(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractIntList,int,int)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testRetainAllSmall():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.list.IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:retainAll(org.apache.mahout.math.list.AbstractIntList)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.list.IntArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.IntArrayListTest:testRetainAllSmaller():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.list.IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:add(int)', '(M)org.apache.mahout.math.list.IntArrayList:retainAll(org.apache.mahout.math.list.AbstractIntList)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.list.IntArrayListTest:assertTrue(boolean)']
M:org.apache.mahout.math.list.LongArrayListTest:testAdd():['(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testBinarySearch():['(M)org.apache.mahout.math.list.LongArrayList:binarySearchFromTo(long,int,int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:binarySearchFromTo(long,int,int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testClone():['(M)org.apache.mahout.math.list.LongArrayList:copy()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.LongArrayListTest:testElements():['(O)org.apache.mahout.math.list.LongArrayList:<init>(long[])', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:elements()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:elements(long[])', '(M)org.apache.mahout.math.list.LongArrayList:elements()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.LongArrayListTest:testEquals():['(O)org.apache.mahout.math.list.LongArrayList:<init>(long[])', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertFalse(boolean)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertFalse(boolean)']
M:org.apache.mahout.math.list.LongArrayListTest:testForEach():['(O)org.apache.mahout.math.list.LongArrayListTest$1:<init>(org.apache.mahout.math.list.LongArrayListTest)', '(M)org.apache.mahout.math.list.LongArrayList:forEach(org.apache.mahout.math.function.LongProcedure)']
M:org.apache.mahout.math.list.LongArrayListTest:testGetEmpty():['(M)org.apache.mahout.math.list.LongArrayList:get(int)']
M:org.apache.mahout.math.list.LongArrayListTest:testGetQuick():['(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.list.LongArrayList:getQuick(int)']
M:org.apache.mahout.math.list.LongArrayListTest:testIndexOfFromTo():['(M)org.apache.mahout.math.list.LongArrayList:indexOfFromTo(long,int,int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:indexOfFromTo(long,int,int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testLastIndexOfFromTo():['(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:lastIndexOf(long)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:lastIndexOfFromTo(long,int,int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:lastIndexOf(long)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testPartFromTo():['(M)org.apache.mahout.math.list.LongArrayList:partFromTo(int,int)', '(M)org.apache.mahout.math.list.AbstractLongList:size()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractLongList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractLongList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testPartFromToOOB():['(M)org.apache.mahout.math.list.LongArrayList:partFromTo(int,int)']
M:org.apache.mahout.math.list.LongArrayListTest:testRemoveAll():['(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:removeAll(org.apache.mahout.math.list.AbstractLongList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testReplaceFromToWith():['(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractLongList,int,int)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testRetainAllSmall():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.list.LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:retainAll(org.apache.mahout.math.list.AbstractLongList)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.list.LongArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.LongArrayListTest:testRetainAllSmaller():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.list.LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:add(long)', '(M)org.apache.mahout.math.list.LongArrayList:retainAll(org.apache.mahout.math.list.AbstractLongList)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.list.LongArrayListTest:assertTrue(boolean)']
M:org.apache.mahout.math.list.ShortArrayListTest:testAdd():['(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testBinarySearch():['(M)org.apache.mahout.math.list.ShortArrayList:binarySearchFromTo(short,int,int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:binarySearchFromTo(short,int,int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testClone():['(M)org.apache.mahout.math.list.ShortArrayList:copy()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.ShortArrayListTest:testElements():['(O)org.apache.mahout.math.list.ShortArrayList:<init>(short[])', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:elements()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:elements(short[])', '(M)org.apache.mahout.math.list.ShortArrayList:elements()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.list.ShortArrayListTest:testEquals():['(O)org.apache.mahout.math.list.ShortArrayList:<init>(short[])', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertFalse(boolean)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:equals(java.lang.Object)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertFalse(boolean)']
M:org.apache.mahout.math.list.ShortArrayListTest:testForEach():['(O)org.apache.mahout.math.list.ShortArrayListTest$1:<init>(org.apache.mahout.math.list.ShortArrayListTest)', '(M)org.apache.mahout.math.list.ShortArrayList:forEach(org.apache.mahout.math.function.ShortProcedure)']
M:org.apache.mahout.math.list.ShortArrayListTest:testGetEmpty():['(M)org.apache.mahout.math.list.ShortArrayList:get(int)']
M:org.apache.mahout.math.list.ShortArrayListTest:testGetQuick():['(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ShortArrayList:getQuick(int)']
M:org.apache.mahout.math.list.ShortArrayListTest:testIndexOfFromTo():['(M)org.apache.mahout.math.list.ShortArrayList:indexOfFromTo(short,int,int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:indexOfFromTo(short,int,int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testLastIndexOfFromTo():['(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:lastIndexOf(short)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:lastIndexOfFromTo(short,int,int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:lastIndexOf(short)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testPartFromTo():['(M)org.apache.mahout.math.list.ShortArrayList:partFromTo(int,int)', '(M)org.apache.mahout.math.list.AbstractShortList:size()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractShortList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.AbstractShortList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testPartFromToOOB():['(M)org.apache.mahout.math.list.ShortArrayList:partFromTo(int,int)']
M:org.apache.mahout.math.list.ShortArrayListTest:testRemoveAll():['(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:removeAll(org.apache.mahout.math.list.AbstractShortList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testReplaceFromToWith():['(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractShortList,int,int)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testRetainAllSmall():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.list.ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:retainAll(org.apache.mahout.math.list.AbstractShortList)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertEquals(long,long)']
M:org.apache.mahout.math.list.ShortArrayListTest:testRetainAllSmaller():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.list.ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:add(short)', '(M)org.apache.mahout.math.list.ShortArrayList:retainAll(org.apache.mahout.math.list.AbstractShortList)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertTrue(boolean)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.list.ShortArrayListTest:assertTrue(boolean)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:adjustOrPutValue(byte,byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:adjustOrPutValue(byte,byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:forEachPair(org.apache.mahout.math.function.ByteByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:forEachPair(org.apache.mahout.math.function.ByteByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:pairsMatching(org.apache.mahout.math.function.ByteByteProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:put(byte,byte)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:adjustOrPutValue(byte,char,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:adjustOrPutValue(byte,char,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:forEachPair(org.apache.mahout.math.function.ByteCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:forEachPair(org.apache.mahout.math.function.ByteCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:pairsMatching(org.apache.mahout.math.function.ByteCharProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:put(byte,char)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:adjustOrPutValue(byte,double,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:adjustOrPutValue(byte,double,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:forEachPair(org.apache.mahout.math.function.ByteDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:forEachPair(org.apache.mahout.math.function.ByteDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:pairsMatching(org.apache.mahout.math.function.ByteDoubleProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:put(byte,double)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:adjustOrPutValue(byte,float,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:adjustOrPutValue(byte,float,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:forEachPair(org.apache.mahout.math.function.ByteFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:forEachPair(org.apache.mahout.math.function.ByteFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:pairsMatching(org.apache.mahout.math.function.ByteFloatProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenByteFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:put(byte,float)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:adjustOrPutValue(byte,int,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:adjustOrPutValue(byte,int,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:forEachPair(org.apache.mahout.math.function.ByteIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:forEachPair(org.apache.mahout.math.function.ByteIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:pairsMatching(org.apache.mahout.math.function.ByteIntProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:put(byte,int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:adjustOrPutValue(byte,long,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:adjustOrPutValue(byte,long,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:forEachPair(org.apache.mahout.math.function.ByteLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:forEachPair(org.apache.mahout.math.function.ByteLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:pairsMatching(org.apache.mahout.math.function.ByteLongProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:put(byte,long)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertFalse(java.lang.String,boolean)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:forEachPair(org.apache.mahout.math.function.ByteObjectProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:forEachPair(org.apache.mahout.math.function.ByteObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:pairsMatching(org.apache.mahout.math.function.ByteObjectProcedure,org.apache.mahout.math.list.ByteArrayList,java.util.List)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,java.util.List)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,java.util.List)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteObjectHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:put(byte,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:removeKey(byte)', '(O)java.util.ArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteObjectHashMap:values(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:adjustOrPutValue(byte,short,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:adjustOrPutValue(byte,short,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:containsKey(byte)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:removeKey(byte)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:forEachPair(org.apache.mahout.math.function.ByteShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenByteShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:forEachPair(org.apache.mahout.math.function.ByteShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:get(byte)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:removeKey(byte)', '(O)org.apache.mahout.math.map.OpenByteShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:pairsMatching(org.apache.mahout.math.function.ByteShortProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenByteShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenByteShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:put(byte,short)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:removeKey(byte)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenByteShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenByteShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:adjustOrPutValue(char,byte,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:adjustOrPutValue(char,byte,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:forEachPair(org.apache.mahout.math.function.CharByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:forEachPair(org.apache.mahout.math.function.CharByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:pairsMatching(org.apache.mahout.math.function.CharByteProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:put(char,byte)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:adjustOrPutValue(char,char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:adjustOrPutValue(char,char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:forEachPair(org.apache.mahout.math.function.CharCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:forEachPair(org.apache.mahout.math.function.CharCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:pairsMatching(org.apache.mahout.math.function.CharCharProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:put(char,char)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:adjustOrPutValue(char,double,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:adjustOrPutValue(char,double,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:forEachPair(org.apache.mahout.math.function.CharDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:forEachPair(org.apache.mahout.math.function.CharDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:pairsMatching(org.apache.mahout.math.function.CharDoubleProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:put(char,double)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:adjustOrPutValue(char,float,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:adjustOrPutValue(char,float,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:forEachPair(org.apache.mahout.math.function.CharFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:forEachPair(org.apache.mahout.math.function.CharFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:pairsMatching(org.apache.mahout.math.function.CharFloatProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenCharFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:put(char,float)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:adjustOrPutValue(char,int,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:adjustOrPutValue(char,int,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:forEachPair(org.apache.mahout.math.function.CharIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:forEachPair(org.apache.mahout.math.function.CharIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:pairsMatching(org.apache.mahout.math.function.CharIntProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:put(char,int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:adjustOrPutValue(char,long,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:adjustOrPutValue(char,long,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:forEachPair(org.apache.mahout.math.function.CharLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:forEachPair(org.apache.mahout.math.function.CharLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:pairsMatching(org.apache.mahout.math.function.CharLongProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:put(char,long)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertFalse(java.lang.String,boolean)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:forEachPair(org.apache.mahout.math.function.CharObjectProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:forEachPair(org.apache.mahout.math.function.CharObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:pairsMatching(org.apache.mahout.math.function.CharObjectProcedure,org.apache.mahout.math.list.CharArrayList,java.util.List)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,java.util.List)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,java.util.List)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharObjectHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:put(char,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:removeKey(char)', '(O)java.util.ArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharObjectHashMap:values(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:adjustOrPutValue(char,short,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:adjustOrPutValue(char,short,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:containsKey(char)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:removeKey(char)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:forEachPair(org.apache.mahout.math.function.CharShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenCharShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:forEachPair(org.apache.mahout.math.function.CharShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:get(char)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:removeKey(char)', '(O)org.apache.mahout.math.map.OpenCharShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:pairsMatching(org.apache.mahout.math.function.CharShortProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenCharShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenCharShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:put(char,short)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:removeKey(char)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenCharShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenCharShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:adjustOrPutValue(double,byte,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:adjustOrPutValue(double,byte,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:forEachPair(org.apache.mahout.math.function.DoubleByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:forEachPair(org.apache.mahout.math.function.DoubleByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:pairsMatching(org.apache.mahout.math.function.DoubleByteProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:put(double,byte)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:adjustOrPutValue(double,char,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:adjustOrPutValue(double,char,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:forEachPair(org.apache.mahout.math.function.DoubleCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:forEachPair(org.apache.mahout.math.function.DoubleCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:pairsMatching(org.apache.mahout.math.function.DoubleCharProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:put(double,char)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:adjustOrPutValue(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:adjustOrPutValue(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:forEachPair(org.apache.mahout.math.function.DoubleDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:forEachPair(org.apache.mahout.math.function.DoubleDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:pairsMatching(org.apache.mahout.math.function.DoubleDoubleProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:put(double,double)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:adjustOrPutValue(double,float,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:adjustOrPutValue(double,float,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:forEachPair(org.apache.mahout.math.function.DoubleFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:forEachPair(org.apache.mahout.math.function.DoubleFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:pairsMatching(org.apache.mahout.math.function.DoubleFloatProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:put(double,float)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:adjustOrPutValue(double,int,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:adjustOrPutValue(double,int,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:forEachPair(org.apache.mahout.math.function.DoubleIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:forEachPair(org.apache.mahout.math.function.DoubleIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:pairsMatching(org.apache.mahout.math.function.DoubleIntProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:put(double,int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:adjustOrPutValue(double,long,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:adjustOrPutValue(double,long,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:forEachPair(org.apache.mahout.math.function.DoubleLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:forEachPair(org.apache.mahout.math.function.DoubleLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:pairsMatching(org.apache.mahout.math.function.DoubleLongProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:put(double,long)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertFalse(java.lang.String,boolean)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:forEachPair(org.apache.mahout.math.function.DoubleObjectProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:forEachPair(org.apache.mahout.math.function.DoubleObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:pairsMatching(org.apache.mahout.math.function.DoubleObjectProcedure,org.apache.mahout.math.list.DoubleArrayList,java.util.List)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,java.util.List)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,java.util.List)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:put(double,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:removeKey(double)', '(O)java.util.ArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleObjectHashMap:values(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:adjustOrPutValue(double,short,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:adjustOrPutValue(double,short,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:containsKey(double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:removeKey(double)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:forEachPair(org.apache.mahout.math.function.DoubleShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:forEachPair(org.apache.mahout.math.function.DoubleShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:get(double)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:removeKey(double)', '(O)org.apache.mahout.math.map.OpenDoubleShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:pairsMatching(org.apache.mahout.math.function.DoubleShortProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenDoubleShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenDoubleShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:put(double,short)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:removeKey(double)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenDoubleShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenDoubleShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:adjustOrPutValue(float,byte,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:adjustOrPutValue(float,byte,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:forEachPair(org.apache.mahout.math.function.FloatByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:forEachPair(org.apache.mahout.math.function.FloatByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:pairsMatching(org.apache.mahout.math.function.FloatByteProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:put(float,byte)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:adjustOrPutValue(float,char,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:adjustOrPutValue(float,char,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:forEachPair(org.apache.mahout.math.function.FloatCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:forEachPair(org.apache.mahout.math.function.FloatCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:pairsMatching(org.apache.mahout.math.function.FloatCharProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:put(float,char)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:adjustOrPutValue(float,double,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:adjustOrPutValue(float,double,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:forEachPair(org.apache.mahout.math.function.FloatDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:forEachPair(org.apache.mahout.math.function.FloatDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:pairsMatching(org.apache.mahout.math.function.FloatDoubleProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:put(float,double)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:adjustOrPutValue(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:adjustOrPutValue(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:forEachPair(org.apache.mahout.math.function.FloatFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:forEachPair(org.apache.mahout.math.function.FloatFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:pairsMatching(org.apache.mahout.math.function.FloatFloatProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenFloatFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:put(float,float)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:adjustOrPutValue(float,int,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:adjustOrPutValue(float,int,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:forEachPair(org.apache.mahout.math.function.FloatIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:forEachPair(org.apache.mahout.math.function.FloatIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:pairsMatching(org.apache.mahout.math.function.FloatIntProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:put(float,int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:adjustOrPutValue(float,long,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:adjustOrPutValue(float,long,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:forEachPair(org.apache.mahout.math.function.FloatLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:forEachPair(org.apache.mahout.math.function.FloatLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:pairsMatching(org.apache.mahout.math.function.FloatLongProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:put(float,long)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertFalse(java.lang.String,boolean)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:forEachPair(org.apache.mahout.math.function.FloatObjectProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:forEachPair(org.apache.mahout.math.function.FloatObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:pairsMatching(org.apache.mahout.math.function.FloatObjectProcedure,org.apache.mahout.math.list.FloatArrayList,java.util.List)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,java.util.List)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,java.util.List)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatObjectHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:put(float,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:removeKey(float)', '(O)java.util.ArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatObjectHashMap:values(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:adjustOrPutValue(float,short,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:adjustOrPutValue(float,short,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:containsKey(float)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:removeKey(float)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:forEachPair(org.apache.mahout.math.function.FloatShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenFloatShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:forEachPair(org.apache.mahout.math.function.FloatShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:get(float)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:removeKey(float)', '(O)org.apache.mahout.math.map.OpenFloatShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:pairsMatching(org.apache.mahout.math.function.FloatShortProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenFloatShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenFloatShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:put(float,short)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:removeKey(float)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenFloatShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenFloatShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:adjustOrPutValue(int,byte,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:adjustOrPutValue(int,byte,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:forEachPair(org.apache.mahout.math.function.IntByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:forEachPair(org.apache.mahout.math.function.IntByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:pairsMatching(org.apache.mahout.math.function.IntByteProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:put(int,byte)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:adjustOrPutValue(int,char,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:adjustOrPutValue(int,char,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:forEachPair(org.apache.mahout.math.function.IntCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:forEachPair(org.apache.mahout.math.function.IntCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:pairsMatching(org.apache.mahout.math.function.IntCharProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:put(int,char)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:adjustOrPutValue(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:adjustOrPutValue(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:forEachPair(org.apache.mahout.math.function.IntDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:forEachPair(org.apache.mahout.math.function.IntDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:pairsMatching(org.apache.mahout.math.function.IntDoubleProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:put(int,double)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:adjustOrPutValue(int,float,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:adjustOrPutValue(int,float,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:forEachPair(org.apache.mahout.math.function.IntFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:forEachPair(org.apache.mahout.math.function.IntFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:pairsMatching(org.apache.mahout.math.function.IntFloatProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenIntFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:put(int,float)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:adjustOrPutValue(int,int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:adjustOrPutValue(int,int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:forEachPair(org.apache.mahout.math.function.IntIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:forEachPair(org.apache.mahout.math.function.IntIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:pairsMatching(org.apache.mahout.math.function.IntIntProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:adjustOrPutValue(int,long,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:adjustOrPutValue(int,long,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:forEachPair(org.apache.mahout.math.function.IntLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:forEachPair(org.apache.mahout.math.function.IntLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:pairsMatching(org.apache.mahout.math.function.IntLongProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:put(int,long)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertFalse(java.lang.String,boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:forEachPair(org.apache.mahout.math.function.IntObjectProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:forEachPair(org.apache.mahout.math.function.IntObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:pairsMatching(org.apache.mahout.math.function.IntObjectProcedure,org.apache.mahout.math.list.IntArrayList,java.util.List)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,java.util.List)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,java.util.List)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntObjectHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(O)java.util.ArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:values(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:adjustOrPutValue(int,short,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:adjustOrPutValue(int,short,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:containsKey(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:removeKey(int)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:forEachPair(org.apache.mahout.math.function.IntShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenIntShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:forEachPair(org.apache.mahout.math.function.IntShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:removeKey(int)', '(O)org.apache.mahout.math.map.OpenIntShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:pairsMatching(org.apache.mahout.math.function.IntShortProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenIntShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenIntShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:put(int,short)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:removeKey(int)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenIntShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenIntShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:adjustOrPutValue(long,byte,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:adjustOrPutValue(long,byte,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:forEachPair(org.apache.mahout.math.function.LongByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:forEachPair(org.apache.mahout.math.function.LongByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:pairsMatching(org.apache.mahout.math.function.LongByteProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:put(long,byte)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:adjustOrPutValue(long,char,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:adjustOrPutValue(long,char,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:forEachPair(org.apache.mahout.math.function.LongCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:forEachPair(org.apache.mahout.math.function.LongCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:pairsMatching(org.apache.mahout.math.function.LongCharProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:put(long,char)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:adjustOrPutValue(long,double,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:adjustOrPutValue(long,double,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:forEachPair(org.apache.mahout.math.function.LongDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:forEachPair(org.apache.mahout.math.function.LongDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:pairsMatching(org.apache.mahout.math.function.LongDoubleProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:put(long,double)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:adjustOrPutValue(long,float,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:adjustOrPutValue(long,float,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:forEachPair(org.apache.mahout.math.function.LongFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:forEachPair(org.apache.mahout.math.function.LongFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:pairsMatching(org.apache.mahout.math.function.LongFloatProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenLongFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:put(long,float)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:adjustOrPutValue(long,int,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:adjustOrPutValue(long,int,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:forEachPair(org.apache.mahout.math.function.LongIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:forEachPair(org.apache.mahout.math.function.LongIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:pairsMatching(org.apache.mahout.math.function.LongIntProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:put(long,int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:adjustOrPutValue(long,long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:adjustOrPutValue(long,long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:forEachPair(org.apache.mahout.math.function.LongLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:forEachPair(org.apache.mahout.math.function.LongLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:pairsMatching(org.apache.mahout.math.function.LongLongProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:put(long,long)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertFalse(java.lang.String,boolean)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:forEachPair(org.apache.mahout.math.function.LongObjectProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:forEachPair(org.apache.mahout.math.function.LongObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:pairsMatching(org.apache.mahout.math.function.LongObjectProcedure,org.apache.mahout.math.list.LongArrayList,java.util.List)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,java.util.List)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,java.util.List)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongObjectHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:put(long,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:removeKey(long)', '(O)java.util.ArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongObjectHashMap:values(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:adjustOrPutValue(long,short,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:adjustOrPutValue(long,short,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:containsKey(long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:removeKey(long)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:forEachPair(org.apache.mahout.math.function.LongShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenLongShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:forEachPair(org.apache.mahout.math.function.LongShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:get(long)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:removeKey(long)', '(O)org.apache.mahout.math.map.OpenLongShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:pairsMatching(org.apache.mahout.math.function.LongShortProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenLongShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenLongShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:put(long,short)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:removeKey(long)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenLongShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenLongShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:adjustOrPutValue(java.lang.Object,byte,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:adjustOrPutValue(java.lang.Object,byte,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testForEachKey():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:forEachPair(org.apache.mahout.math.function.ObjectByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenObjectByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:forEachPair(org.apache.mahout.math.function.ObjectByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:keys(java.util.List)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:keys()', '(S)java.util.Collections:sort(java.util.List)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:removeKey(java.lang.Object)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:keysSortedByValue(java.util.List)', '(I)java.util.List:size()', '(I)java.util.List:toArray(java.lang.Object[])', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testPairsMatching():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:pairsMatching(org.apache.mahout.math.function.ObjectByteProcedure,java.util.List,org.apache.mahout.math.list.ByteArrayList)', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ByteArrayList)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testPairsSortedByKeyNotComparable():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ByteArrayList)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenObjectByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:put(java.lang.Object,byte)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:adjustOrPutValue(java.lang.Object,char,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:adjustOrPutValue(java.lang.Object,char,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testForEachKey():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:forEachPair(org.apache.mahout.math.function.ObjectCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenObjectCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:forEachPair(org.apache.mahout.math.function.ObjectCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:keys(java.util.List)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:keys()', '(S)java.util.Collections:sort(java.util.List)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:removeKey(java.lang.Object)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:keysSortedByValue(java.util.List)', '(I)java.util.List:size()', '(I)java.util.List:toArray(java.lang.Object[])', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testPairsMatching():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:pairsMatching(org.apache.mahout.math.function.ObjectCharProcedure,java.util.List,org.apache.mahout.math.list.CharArrayList)', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.CharArrayList)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testPairsSortedByKeyNotComparable():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.CharArrayList)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenObjectCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:put(java.lang.Object,char)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:adjustOrPutValue(java.lang.Object,double,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:adjustOrPutValue(java.lang.Object,double,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testForEachKey():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:forEachPair(org.apache.mahout.math.function.ObjectDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:forEachPair(org.apache.mahout.math.function.ObjectDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:keys(java.util.List)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:keys()', '(S)java.util.Collections:sort(java.util.List)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:removeKey(java.lang.Object)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:keysSortedByValue(java.util.List)', '(I)java.util.List:size()', '(I)java.util.List:toArray(java.lang.Object[])', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testPairsMatching():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:pairsMatching(org.apache.mahout.math.function.ObjectDoubleProcedure,java.util.List,org.apache.mahout.math.list.DoubleArrayList)', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.DoubleArrayList)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testPairsSortedByKeyNotComparable():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.DoubleArrayList)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenObjectDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:put(java.lang.Object,double)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:adjustOrPutValue(java.lang.Object,float,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:adjustOrPutValue(java.lang.Object,float,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testForEachKey():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:forEachPair(org.apache.mahout.math.function.ObjectFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:forEachPair(org.apache.mahout.math.function.ObjectFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:keys(java.util.List)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:keys()', '(S)java.util.Collections:sort(java.util.List)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:removeKey(java.lang.Object)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:keysSortedByValue(java.util.List)', '(I)java.util.List:size()', '(I)java.util.List:toArray(java.lang.Object[])', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testPairsMatching():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:pairsMatching(org.apache.mahout.math.function.ObjectFloatProcedure,java.util.List,org.apache.mahout.math.list.FloatArrayList)', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.FloatArrayList)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testPairsSortedByKeyNotComparable():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.FloatArrayList)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenObjectFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:put(java.lang.Object,float)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:adjustOrPutValue(java.lang.Object,int,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:adjustOrPutValue(java.lang.Object,int,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testForEachKey():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:forEachPair(org.apache.mahout.math.function.ObjectIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenObjectIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:forEachPair(org.apache.mahout.math.function.ObjectIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:keys(java.util.List)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:keys()', '(S)java.util.Collections:sort(java.util.List)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:keysSortedByValue(java.util.List)', '(I)java.util.List:size()', '(I)java.util.List:toArray(java.lang.Object[])', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testPairsMatching():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:pairsMatching(org.apache.mahout.math.function.ObjectIntProcedure,java.util.List,org.apache.mahout.math.list.IntArrayList)', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.IntArrayList)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testPairsSortedByKeyNotComparable():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.IntArrayList)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:adjustOrPutValue(java.lang.Object,long,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:adjustOrPutValue(java.lang.Object,long,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testForEachKey():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:forEachPair(org.apache.mahout.math.function.ObjectLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenObjectLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:forEachPair(org.apache.mahout.math.function.ObjectLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:keys(java.util.List)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:keys()', '(S)java.util.Collections:sort(java.util.List)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:removeKey(java.lang.Object)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:keysSortedByValue(java.util.List)', '(I)java.util.List:size()', '(I)java.util.List:toArray(java.lang.Object[])', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testPairsMatching():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:pairsMatching(org.apache.mahout.math.function.ObjectLongProcedure,java.util.List,org.apache.mahout.math.list.LongArrayList)', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.LongArrayList)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testPairsSortedByKeyNotComparable():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.LongArrayList)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenObjectLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:put(java.lang.Object,long)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:adjustOrPutValue(java.lang.Object,short,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:adjustOrPutValue(java.lang.Object,short,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:containsKey(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:removeKey(java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testForEachKey():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:forEachPair(org.apache.mahout.math.function.ObjectShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenObjectShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:forEachPair(org.apache.mahout.math.function.ObjectShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:get(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:keys(java.util.List)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:keys()', '(S)java.util.Collections:sort(java.util.List)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:removeKey(java.lang.Object)', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:keysSortedByValue(java.util.List)', '(I)java.util.List:size()', '(I)java.util.List:toArray(java.lang.Object[])', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testPairsMatching():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.map.OpenObjectShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:pairsMatching(org.apache.mahout.math.function.ObjectShortProcedure,java.util.List,org.apache.mahout.math.list.ShortArrayList)', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ShortArrayList)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testPairsSortedByKeyNotComparable():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ShortArrayList)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenObjectShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenObjectShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:put(java.lang.Object,short)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:removeKey(java.lang.Object)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenObjectShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenObjectShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:adjustOrPutValue(short,byte,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:adjustOrPutValue(short,byte,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:containsValue(byte)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:forEachPair(org.apache.mahout.math.function.ShortByteProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:forEachPair(org.apache.mahout.math.function.ShortByteProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:pairsMatching(org.apache.mahout.math.function.ShortByteProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.list.ByteArrayList:clear()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortByteHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortByteHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:put(short,byte)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortByteHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:adjustOrPutValue(short,char,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:adjustOrPutValue(short,char,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:containsValue(char)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:forEachPair(org.apache.mahout.math.function.ShortCharProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:forEachPair(org.apache.mahout.math.function.ShortCharProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:pairsMatching(org.apache.mahout.math.function.ShortCharProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.list.CharArrayList:clear()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortCharHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortCharHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:put(short,char)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.CharArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortCharHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:adjustOrPutValue(short,double,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:adjustOrPutValue(short,double,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:containsValue(double)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:forEachPair(org.apache.mahout.math.function.ShortDoubleProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:forEachPair(org.apache.mahout.math.function.ShortDoubleProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:pairsMatching(org.apache.mahout.math.function.ShortDoubleProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.list.DoubleArrayList:clear()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortDoubleHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortDoubleHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:put(short,double)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:adjustOrPutValue(short,float,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:adjustOrPutValue(short,float,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:containsValue(float)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:forEachPair(org.apache.mahout.math.function.ShortFloatProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:forEachPair(org.apache.mahout.math.function.ShortFloatProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:pairsMatching(org.apache.mahout.math.function.ShortFloatProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.list.FloatArrayList:clear()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenShortFloatHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortFloatHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:put(short,float)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortFloatHashMapTest:assertEquals(float,float,float)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:adjustOrPutValue(short,int,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:adjustOrPutValue(short,int,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:containsValue(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:forEachPair(org.apache.mahout.math.function.ShortIntProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:forEachPair(org.apache.mahout.math.function.ShortIntProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:pairsMatching(org.apache.mahout.math.function.ShortIntProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.list.IntArrayList:clear()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortIntHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:put(short,int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.IntArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortIntHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:adjustOrPutValue(short,long,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:adjustOrPutValue(short,long,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:containsValue(long)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:forEachPair(org.apache.mahout.math.function.ShortLongProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:forEachPair(org.apache.mahout.math.function.ShortLongProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:pairsMatching(org.apache.mahout.math.function.ShortLongProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.list.LongArrayList:clear()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortLongHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortLongHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:put(short,long)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.LongArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortLongHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertFalse(java.lang.String,boolean)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:containsValue(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:forEachPair(org.apache.mahout.math.function.ShortObjectProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:forEachPair(org.apache.mahout.math.function.ShortObjectProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:pairsMatching(org.apache.mahout.math.function.ShortObjectProcedure,org.apache.mahout.math.list.ShortArrayList,java.util.List)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)java.util.Collections:sort(java.util.List)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,java.util.List)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testPairsSortedByValue():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)java.util.ArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,java.util.List)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortObjectHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortObjectHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:put(short,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:removeKey(short)', '(O)java.util.ArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortObjectHashMap:values(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(long,long)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testAdjustOrPutValue():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:adjustOrPutValue(short,short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:adjustOrPutValue(short,short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testClear():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testClone():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:clone()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testConstructors():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>(int,double,double)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testContainValue():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:containsValue(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testContainsKey():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertTrue(boolean)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:containsKey(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testCopy():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:copy()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:clear()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testEnsureCapacity():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:ensureCapacity(int)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testEquals():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:copy()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:removeKey(short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertFalse(boolean)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:equals(java.lang.Object)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertFalse(boolean)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testForEachPair():['(O)java.util.ArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:forEachPair(org.apache.mahout.math.function.ShortShortProcedure)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(I)java.util.List:clear()', '(O)org.apache.mahout.math.map.OpenShortShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest,java.util.List)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:forEachPair(org.apache.mahout.math.function.ShortShortProcedure)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testGet():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:get(short)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testKeys():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testKeysSortedByValue():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testPairsMatching():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:removeKey(short)', '(O)org.apache.mahout.math.map.OpenShortShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:pairsMatching(org.apache.mahout.math.function.ShortShortProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testPairsSortedByKey():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.list.ShortArrayList:clear()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.map.OpenShortShortHashMapTest:testValues():['(O)org.apache.mahout.math.map.OpenShortShortHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:put(short,short)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:removeKey(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>(int)', '(M)org.apache.mahout.math.map.OpenShortShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.map.OpenShortShortHashMapTest:assertEquals(long,long)']
M:org.apache.mahout.math.random.ChineseRestaurantTest:testDepth():['(S)com.google.common.collect.Lists:newArrayList()', '(O)org.apache.mahout.math.random.ChineseRestaurant:<init>(double)', '(S)com.google.common.collect.HashMultiset:create()', '(M)org.apache.mahout.math.random.ChineseRestaurant:sample()', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(S)com.google.common.collect.Lists:newArrayList()', '(I)com.google.common.collect.Multiset:elementSet()', '(I)java.util.Set:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)com.google.common.collect.Multiset:count(java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.List:add(java.lang.Object)', '(S)java.util.Collections:reverseOrder()', '(S)java.util.Collections:sort(java.util.List,java.util.Comparator)', '(I)java.util.List:size()', '(I)java.util.List:size()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.List:add(java.lang.Object)', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)java.util.List:get(int)', '(M)java.lang.Integer:intValue()', '(M)java.lang.Integer:intValue()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.List:set(int,java.lang.Object)', '(I)java.util.List:get(int)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(I)java.util.List:get(int)', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.ChineseRestaurantTest:testExtremeDiscount():['(O)org.apache.mahout.math.random.ChineseRestaurant:<init>(double,double)', '(S)com.google.common.collect.HashMultiset:create()', '(M)org.apache.mahout.math.random.ChineseRestaurant:sample()', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(long,long)', '(M)org.apache.mahout.math.random.ChineseRestaurant:count(int)', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(long,long)']
M:org.apache.mahout.math.random.ChineseRestaurantTest:testGrowth():['(O)org.apache.mahout.math.random.ChineseRestaurant:<init>(double,double)', '(O)org.apache.mahout.math.random.ChineseRestaurant:<init>(double,double)', '(O)org.apache.mahout.math.random.ChineseRestaurant:<init>(double,double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.Double:valueOf(double)', '(S)com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(S)java.lang.Math:log10(double)', '(S)java.lang.Math:floor(double)', '(S)java.lang.Math:pow(double,double)', '(S)java.lang.Double:valueOf(double)', '(I)java.util.Set:contains(java.lang.Object)', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:predictSize(org.apache.mahout.math.Matrix,int,double)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)java.lang.Math:log(double)', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:predictSize(org.apache.mahout.math.Matrix,int,double)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)java.lang.Math:log(double)', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(S)java.lang.Math:log(double)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)java.lang.Math:log(double)', '(S)java.lang.Math:log(double)', '(I)org.apache.mahout.math.Vector:assign(double[])', '(I)org.apache.mahout.math.Matrix:viewRow(int)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)java.lang.Math:log(double)', '(S)java.lang.Math:log(double)', '(I)org.apache.mahout.math.Vector:assign(double[])', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:hapaxCount(org.apache.mahout.math.random.ChineseRestaurant)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:hapaxCount(org.apache.mahout.math.random.ChineseRestaurant)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:hapaxCount(org.apache.mahout.math.random.ChineseRestaurant)', '(M)org.apache.mahout.math.random.ChineseRestaurant:size()', '(S)org.apache.mahout.math.random.ChineseRestaurantTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.random.ChineseRestaurant:sample()', '(M)org.apache.mahout.math.random.ChineseRestaurant:sample()', '(M)org.apache.mahout.math.random.ChineseRestaurant:sample()']
M:org.apache.mahout.math.random.EmpiricalTest:testBadArguments():['(O)org.apache.mahout.math.random.Empirical:<init>(boolean,boolean,int,double[])', '(S)org.junit.Assert:fail(java.lang.String)', '(O)org.apache.mahout.math.random.Empirical:<init>(boolean,boolean,int,double[])', '(S)org.junit.Assert:fail(java.lang.String)', '(O)org.apache.mahout.math.random.Empirical:<init>(boolean,boolean,int,double[])', '(S)org.junit.Assert:fail(java.lang.String)', '(O)org.apache.mahout.math.random.Empirical:<init>(boolean,boolean,int,double[])', '(S)org.junit.Assert:fail(java.lang.String)', '(O)org.apache.mahout.math.random.Empirical:<init>(boolean,boolean,int,double[])', '(S)org.junit.Assert:fail(java.lang.String)']
M:org.apache.mahout.math.random.EmpiricalTest:testSimpleDist():['(S)org.apache.mahout.common.RandomUtils:useTestSeed()', '(O)org.apache.mahout.math.random.Empirical:<init>(boolean,boolean,int,double[])', '(S)com.google.common.collect.Lists:newArrayList()', '(M)org.apache.mahout.math.random.Empirical:sample()', '(I)java.util.List:add(java.lang.Object)', '(S)java.util.Collections:sort(java.util.List)', '(I)java.util.List:get(int)', '(M)java.lang.Double:doubleValue()', '(S)org.apache.mahout.math.random.EmpiricalTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.EmpiricalTest:testZeros():['(O)org.apache.mahout.math.random.Empirical:<init>(boolean,boolean,int,double[])', '(M)org.apache.mahout.math.random.Empirical:sample(double)', '(S)org.apache.mahout.math.random.EmpiricalTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.random.Empirical:sample(double)', '(S)org.apache.mahout.math.random.EmpiricalTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.IndianBuffetTest:testBasicText():['(S)org.apache.mahout.common.RandomUtils:useTestSeed()', '(S)org.apache.mahout.math.random.IndianBuffet:createTextDocumentSampler(double)', '(S)com.google.common.collect.HashMultiset:create()', '(M)org.apache.mahout.math.random.IndianBuffet:sample()', '(I)java.util.List:size()', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])']
M:org.apache.mahout.math.random.MultiNormalTest:testDiagonal():['(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(O)org.apache.mahout.math.random.MultiNormal:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(M)org.apache.mahout.math.random.MultiNormal:sample()', '(I)org.apache.mahout.math.Vector:get(int)', '(M)org.apache.mahout.math.DenseVector:get(int)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:add(double)', '(I)org.apache.mahout.math.Vector:get(int)', '(M)org.apache.mahout.math.DenseVector:get(int)', '(I)org.apache.mahout.math.Vector:get(int)', '(M)org.apache.mahout.math.DenseVector:get(int)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:add(double)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getMean()', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getSD()', '(S)org.apache.mahout.math.random.MultiNormalTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getMean()', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getSD()', '(S)org.apache.mahout.math.random.MultiNormalTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.MultiNormalTest:testRadius():['(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.random.MultiNormal:<init>(double,org.apache.mahout.math.Vector)', '(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(M)org.apache.mahout.math.random.MultiNormal:sample()', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)java.lang.Math:sqrt(double)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:add(double)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getMean()', '(S)org.apache.mahout.math.random.MultiNormalTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.MultinomialTest:testDeleteAndUpdate():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.random.Multinomial:<init>()', '(M)org.apache.mahout.math.random.Multinomial:getWeight()', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(M)java.util.Random:nextDouble()', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:add(java.lang.Object,double)', '(M)org.apache.mahout.math.random.Multinomial:getWeight()', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.random.Multinomial:getWeight()', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.random.MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:delete(java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:set(java.lang.Object,double)', '(S)org.apache.mahout.math.random.MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', '(M)org.apache.mahout.math.random.Multinomial:getWeight()', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:getWeight(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:getProbability(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:set(java.lang.Object,double)', '(M)org.apache.mahout.math.random.Multinomial:getWeight()', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:getWeight(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:getProbability(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.random.MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:getWeight(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.MultinomialTest:testEvenSplit():['(S)com.google.common.collect.HashMultiset:create()', '(S)java.lang.String:valueOf(int)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(O)org.apache.mahout.math.random.Multinomial:<init>(com.google.common.collect.Multiset)', '(S)com.google.common.collect.HashMultiset:create()', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(I)com.google.common.collect.Multiset:elementSet()', '(I)java.util.Set:size()', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(long,long)', '(I)com.google.common.collect.Multiset:elementSet()', '(I)java.util.Set:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)com.google.common.collect.Multiset:count(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:contains(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertTrue(boolean)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.random.MultinomialTest:testInsert():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.random.Multinomial:<init>()', '(M)java.util.Random:nextDouble()', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:add(java.lang.Object,double)', '(S)org.apache.mahout.math.random.MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:getWeight(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.MultinomialTest:testNoNullValuesAllowed():['(O)org.apache.mahout.math.random.Multinomial:<init>()', '(M)org.apache.mahout.math.random.Multinomial:add(java.lang.Object,double)']
M:org.apache.mahout.math.random.MultinomialTest:testNoValues():['(S)com.google.common.collect.HashMultiset:create()', '(O)org.apache.mahout.math.random.Multinomial:<init>(com.google.common.collect.Multiset)']
M:org.apache.mahout.math.random.MultinomialTest:testPrime():['(S)com.google.common.collect.Lists:newArrayList()', '(I)java.util.List:add(java.lang.Object)', '(S)com.google.common.collect.HashMultiset:create()', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(O)org.apache.mahout.math.random.Multinomial:<init>(com.google.common.collect.Multiset)', '(O)org.apache.mahout.math.random.Multinomial:<init>(com.google.common.collect.Multiset)', '(O)org.apache.mahout.math.random.Multinomial:<init>(com.google.common.collect.Multiset)', '(S)com.google.common.collect.HashMultiset:create()', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(I)com.google.common.collect.Multiset:elementSet()', '(I)java.util.Set:size()', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(long,long)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(S)com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)', '(I)com.google.common.collect.Multiset:elementSet()', '(I)java.util.Set:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)java.util.Map:get(java.lang.Object)', '(M)java.lang.Integer:intValue()', '(I)com.google.common.collect.Multiset:count(java.lang.Object)', '(S)java.lang.Math:abs(int)', '(S)org.apache.mahout.math.random.MultinomialTest:assertTrue(boolean)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(I)com.google.common.collect.Multiset:contains(java.lang.Object)', '(S)org.apache.mahout.math.random.MultinomialTest:assertTrue(boolean)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.random.MultinomialTest:testSetZeroWhileIterating():['(O)org.apache.mahout.math.random.Multinomial:<init>()', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.random.Multinomial:add(java.lang.Object,double)', '(M)org.apache.mahout.math.random.Multinomial:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.random.Multinomial:set(java.lang.Object,double)']
M:org.apache.mahout.math.random.MultinomialTest:testSingleton():['(S)com.google.common.collect.HashMultiset:create()', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(O)org.apache.mahout.math.random.Multinomial:<init>(com.google.common.collect.Multiset)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', '(M)org.apache.mahout.math.random.Multinomial:sample(double)', '(S)org.apache.mahout.math.random.MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.random.NormalTest:testOffset():['(O)org.apache.mahout.math.stats.OnlineSummarizer:<init>()', '(O)org.apache.mahout.math.random.Normal:<init>(double,double)', '(I)org.apache.mahout.math.random.Sampler:sample()', '(M)java.lang.Double:doubleValue()', '(M)org.apache.mahout.math.stats.OnlineSummarizer:add(double)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getMean()', '(S)java.lang.Double:valueOf(double)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getSD()', '(S)java.lang.Double:valueOf(double)', '(S)java.lang.String:format(java.lang.String,java.lang.Object[])', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getMean()', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getSD()', '(S)org.apache.mahout.math.random.NormalTest:assertEquals(java.lang.String,double,double,double)', '(M)org.apache.mahout.math.stats.OnlineSummarizer:getSD()', '(S)org.apache.mahout.math.random.NormalTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.random.NormalTest:testSample():['(O)org.apache.mahout.math.random.Normal:<init>()', '(I)org.apache.mahout.math.random.Sampler:sample()', '(M)java.lang.Double:doubleValue()', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(M)org.apache.mahout.common.RandomWrapper:getRandomGenerator()', '(O)org.apache.commons.math3.distribution.NormalDistribution:<init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)', '(M)org.apache.commons.math3.distribution.NormalDistribution:inverseCumulativeProbability(double)', '(S)org.apache.mahout.math.random.NormalTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.random.PoissonSamplerTest:testBasics():['(O)org.apache.mahout.math.random.PoissonSampler:<init>(double)', '(S)org.apache.mahout.math.random.PoissonSamplerTest:checkDistribution(org.apache.mahout.math.random.Sampler,double)']
M:org.apache.mahout.math.randomized.RandomBlasting:<init>():['(O)com.carrotsearch.randomizedtesting.RandomizedTest:<init>()']
M:org.apache.mahout.math.randomized.RandomBlasting:testAgainstReferenceOpenHashSet():['(O)org.apache.mahout.math.set.OpenHashSet:<init>()', '(S)com.google.common.collect.Sets:newHashSet()', '(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomFrom(java.util.List)', '(M)org.apache.mahout.math.randomized.RandomBlasting$Operation:ordinal()', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Set:contains(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Set:contains(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Set:remove(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Set:remove(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Set:contains(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Set:contains(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.Set:clear()', '(I)java.util.Set:clear()', '(I)java.util.Set:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(I)java.util.Set:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.Set:size()', '(I)java.util.Set:size()', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(long,long)', '(O)java.lang.RuntimeException:<init>()']
M:org.apache.mahout.math.randomized.RandomBlasting:testAgainstReferenceOpenIntHashSet():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(S)com.google.common.collect.Sets:newHashSet()', '(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomFrom(java.util.List)', '(M)org.apache.mahout.math.randomized.RandomBlasting$Operation:ordinal()', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:add(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.set.AbstractIntSet:add(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:remove(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.set.AbstractIntSet:remove(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashSet:contains(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.set.AbstractIntSet:contains(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.util.HashSet:clear()', '(M)org.apache.mahout.math.set.AbstractIntSet:clear()', '(M)java.util.HashSet:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.set.AbstractIntSet:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.util.HashSet:size()', '(M)org.apache.mahout.math.set.AbstractIntSet:size()', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(long,long)', '(O)java.lang.RuntimeException:<init>()']
M:org.apache.mahout.math.randomized.RandomBlasting:testAgainstReferenceOpenIntIntHashMap():['(O)org.apache.mahout.math.map.OpenIntIntHashMap:<init>()', '(O)java.util.HashMap:<init>()', '(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomInt()', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomFrom(java.util.List)', '(M)org.apache.mahout.math.randomized.RandomBlasting$Operation:ordinal()', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashMap:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.lang.Integer:intValue()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:get(int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(long,long)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:put(int,int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashMap:containsKey(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:containsKey(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashMap:remove(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.lang.Integer:intValue()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:get(int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(long,long)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:removeKey(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(M)java.util.HashMap:containsKey(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:containsKey(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.util.HashMap:clear()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:clear()', '(M)java.util.HashMap:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(M)java.util.HashMap:size()', '(M)org.apache.mahout.math.map.OpenIntIntHashMap:size()', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(long,long)', '(O)java.lang.RuntimeException:<init>()']
M:org.apache.mahout.math.randomized.RandomBlasting:testAgainstReferenceOpenIntObjectHashMap():['(O)org.apache.mahout.math.map.OpenIntObjectHashMap:<init>()', '(O)java.util.HashMap:<init>()', '(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomInt()', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomFrom(java.util.List)', '(M)org.apache.mahout.math.randomized.RandomBlasting$Operation:ordinal()', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:put(int,java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:remove(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:removeKey(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:containsKey(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:containsKey(int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.Map:clear()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:clear()', '(I)java.util.Map:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.Map:size()', '(M)org.apache.mahout.math.map.OpenIntObjectHashMap:size()', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(long,long)', '(O)java.lang.RuntimeException:<init>()']
M:org.apache.mahout.math.randomized.RandomBlasting:testAgainstReferenceOpenObjectIntHashMap():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(O)java.util.HashMap:<init>()', '(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomIntBetween(int,int)', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomInt()', '(S)org.apache.mahout.math.randomized.RandomBlasting:randomFrom(java.util.List)', '(M)org.apache.mahout.math.randomized.RandomBlasting$Operation:ordinal()', '(S)java.lang.Integer:valueOf(int)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:put(java.lang.Object,java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:remove(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:removeKey(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)java.util.Map:containsKey(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:containsKey(java.lang.Object)', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.Map:clear()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:clear()', '(I)java.util.Map:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:isEmpty()', '(S)java.lang.Boolean:valueOf(boolean)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', '(I)java.util.Map:size()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:size()', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(long,long)', '(O)java.lang.RuntimeException:<init>()']
M:org.apache.mahout.math.randomized.RandomBlasting:testClearTable():['(O)org.apache.mahout.math.map.OpenObjectIntHashMap:<init>()', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:clear()', '(S)java.lang.Integer:valueOf(int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:put(java.lang.Object,int)', '(M)org.apache.mahout.math.map.OpenObjectIntHashMap:clear()', '(M)java.lang.Object:getClass()', '(M)java.lang.Class:getDeclaredField(java.lang.String)', '(M)java.lang.reflect.Field:setAccessible(boolean)', '(M)java.lang.reflect.Field:get(java.lang.Object)', '(S)java.util.Arrays:asList(java.lang.Object[])', '(S)com.google.common.collect.Sets:newHashSet(java.lang.Iterable)', '(S)java.util.Arrays:asList(java.lang.Object[])', '(S)com.google.common.collect.Sets:newHashSet(java.lang.Iterable)', '(S)org.apache.mahout.math.randomized.RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.randomized.RandomBlasting:testMahout1225():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.AbstractIntSet:clear()', '(M)org.apache.mahout.math.set.AbstractIntSet:add(int)', '(M)org.apache.mahout.math.set.AbstractIntSet:add(int)', '(M)org.apache.mahout.math.set.AbstractIntSet:clear()', '(M)org.apache.mahout.math.set.AbstractIntSet:add(int)', '(M)org.apache.mahout.math.set.AbstractIntSet:add(int)', '(M)org.apache.mahout.math.set.AbstractIntSet:contains(int)']
M:org.apache.mahout.math.set.HashUtilsTest:testHashDouble():['(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(M)java.util.Random:nextDouble()', '(S)java.lang.Double:valueOf(double)', '(I)java.util.List:add(java.lang.Object)', '(S)org.apache.mahout.math.set.HashUtilsTest:checkCounts(java.util.Collection)']
M:org.apache.mahout.math.set.HashUtilsTest:testHashFloat():['(S)com.google.common.collect.HashMultiset:create()', '(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(M)java.util.Random:nextDouble()', '(S)java.lang.Float:valueOf(float)', '(I)java.util.List:add(java.lang.Object)', '(S)org.apache.mahout.math.set.HashUtilsTest:checkCounts(java.util.Collection)', '(S)java.lang.Integer:valueOf(int)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)com.google.common.collect.Multiset:count(java.lang.Object)', '(S)org.apache.mahout.math.set.HashUtilsTest:assertTrue(boolean)']
M:org.apache.mahout.math.set.HashUtilsTest:testHashLong():['(S)com.google.common.collect.Lists:newArrayList()', '(S)org.apache.mahout.common.RandomUtils:getRandom()', '(M)java.util.Random:nextLong()', '(S)java.lang.Long:valueOf(long)', '(I)java.util.List:add(java.lang.Object)', '(S)org.apache.mahout.math.set.HashUtilsTest:checkCounts(java.util.Collection)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testClear():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:size()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenByteHashSet:clear()', '(M)org.apache.mahout.math.set.OpenByteHashSet:size()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testClone():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:clone()', '(M)org.apache.mahout.math.set.OpenByteHashSet:clear()', '(M)org.apache.mahout.math.set.OpenByteHashSet:size()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testConstructors():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.set.OpenByteHashSet:<init>(int)', '(M)org.apache.mahout.math.set.OpenByteHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.set.OpenByteHashSet:<init>(int,double,double)', '(M)org.apache.mahout.math.set.OpenByteHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testContains():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:contains(byte)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:contains(byte)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testCopy():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:copy()', '(M)org.apache.mahout.math.set.OpenByteHashSet:clear()', '(M)org.apache.mahout.math.set.OpenByteHashSet:size()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testEnsureCapacity():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.set.OpenByteHashSet:ensureCapacity(int)', '(M)org.apache.mahout.math.set.OpenByteHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testEquals():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:remove(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:copy()', '(M)org.apache.mahout.math.set.OpenByteHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenByteHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenByteHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:remove(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenByteHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenByteHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testForEachKey():['(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:remove(byte)', '(O)org.apache.mahout.math.set.OpenByteHashSetTest$1:<init>(org.apache.mahout.math.set.OpenByteHashSetTest,org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.set.OpenByteHashSet:forEachKey(org.apache.mahout.math.function.ByteProcedure)', '(M)org.apache.mahout.math.list.ByteArrayList:size()', '(M)org.apache.mahout.math.list.ByteArrayList:toArray(byte[])', '(S)java.util.Arrays:sort(byte[])', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertArrayEquals(byte[],byte[])']
M:org.apache.mahout.math.set.OpenByteHashSetTest:testKeys():['(O)org.apache.mahout.math.set.OpenByteHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(M)org.apache.mahout.math.set.OpenByteHashSet:add(byte)', '(O)org.apache.mahout.math.list.ByteArrayList:<init>()', '(M)org.apache.mahout.math.set.OpenByteHashSet:keys(org.apache.mahout.math.list.ByteArrayList)', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ByteArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenByteHashSet:keys()', '(M)org.apache.mahout.math.list.ByteArrayList:sort()', '(S)org.apache.mahout.math.set.OpenByteHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testClear():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:size()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenCharHashSet:clear()', '(M)org.apache.mahout.math.set.OpenCharHashSet:size()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testClone():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:clone()', '(M)org.apache.mahout.math.set.OpenCharHashSet:clear()', '(M)org.apache.mahout.math.set.OpenCharHashSet:size()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testConstructors():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.set.OpenCharHashSet:<init>(int)', '(M)org.apache.mahout.math.set.OpenCharHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.set.OpenCharHashSet:<init>(int,double,double)', '(M)org.apache.mahout.math.set.OpenCharHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testContains():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:contains(char)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:contains(char)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testCopy():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:copy()', '(M)org.apache.mahout.math.set.OpenCharHashSet:clear()', '(M)org.apache.mahout.math.set.OpenCharHashSet:size()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testEnsureCapacity():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.set.OpenCharHashSet:ensureCapacity(int)', '(M)org.apache.mahout.math.set.OpenCharHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testEquals():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:remove(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:copy()', '(M)org.apache.mahout.math.set.OpenCharHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenCharHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenCharHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:remove(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenCharHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenCharHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testForEachKey():['(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:remove(char)', '(O)org.apache.mahout.math.set.OpenCharHashSetTest$1:<init>(org.apache.mahout.math.set.OpenCharHashSetTest,org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.set.OpenCharHashSet:forEachKey(org.apache.mahout.math.function.CharProcedure)', '(M)org.apache.mahout.math.list.CharArrayList:size()', '(M)org.apache.mahout.math.list.CharArrayList:toArray(char[])', '(S)java.util.Arrays:sort(char[])', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertArrayEquals(char[],char[])']
M:org.apache.mahout.math.set.OpenCharHashSetTest:testKeys():['(O)org.apache.mahout.math.set.OpenCharHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(M)org.apache.mahout.math.set.OpenCharHashSet:add(char)', '(O)org.apache.mahout.math.list.CharArrayList:<init>()', '(M)org.apache.mahout.math.set.OpenCharHashSet:keys(org.apache.mahout.math.list.CharArrayList)', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.CharArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenCharHashSet:keys()', '(M)org.apache.mahout.math.list.CharArrayList:sort()', '(S)org.apache.mahout.math.set.OpenCharHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testClear():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:size()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:clear()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:size()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testClone():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:clone()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:clear()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:size()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testConstructors():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>(int)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>(int,double,double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testContains():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:contains(double)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:contains(double)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testCopy():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:copy()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:clear()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:size()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testEnsureCapacity():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:ensureCapacity(int)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testEquals():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:remove(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:copy()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:remove(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testForEachKey():['(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:remove(double)', '(O)org.apache.mahout.math.set.OpenDoubleHashSetTest$1:<init>(org.apache.mahout.math.set.OpenDoubleHashSetTest,org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', '(M)org.apache.mahout.math.list.DoubleArrayList:size()', '(M)org.apache.mahout.math.list.DoubleArrayList:toArray(double[])', '(S)java.util.Arrays:sort(double[])', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertArrayEquals(double[],double[],double)']
M:org.apache.mahout.math.set.OpenDoubleHashSetTest:testKeys():['(O)org.apache.mahout.math.set.OpenDoubleHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:add(double)', '(O)org.apache.mahout.math.list.DoubleArrayList:<init>()', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:keys(org.apache.mahout.math.list.DoubleArrayList)', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.list.DoubleArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(double,double,double)', '(M)org.apache.mahout.math.set.OpenDoubleHashSet:keys()', '(M)org.apache.mahout.math.list.DoubleArrayList:sort()', '(S)org.apache.mahout.math.set.OpenDoubleHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testClear():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:size()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:clear()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:size()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testClone():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:clone()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:clear()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:size()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testConstructors():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>(int)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>(int,double,double)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testContains():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:contains(float)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:contains(float)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testCopy():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:copy()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:clear()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:size()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testEnsureCapacity():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:ensureCapacity(int)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testEquals():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:remove(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:copy()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:remove(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testForEachKey():['(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:remove(float)', '(O)org.apache.mahout.math.set.OpenFloatHashSetTest$1:<init>(org.apache.mahout.math.set.OpenFloatHashSetTest,org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:forEachKey(org.apache.mahout.math.function.FloatProcedure)', '(M)org.apache.mahout.math.list.FloatArrayList:size()', '(M)org.apache.mahout.math.list.FloatArrayList:toArray(float[])', '(S)java.util.Arrays:sort(float[])', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertArrayEquals(float[],float[],float)']
M:org.apache.mahout.math.set.OpenFloatHashSetTest:testKeys():['(O)org.apache.mahout.math.set.OpenFloatHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:add(float)', '(O)org.apache.mahout.math.list.FloatArrayList:<init>()', '(M)org.apache.mahout.math.set.OpenFloatHashSet:keys(org.apache.mahout.math.list.FloatArrayList)', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.list.FloatArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(float,float,float)', '(M)org.apache.mahout.math.set.OpenFloatHashSet:keys()', '(M)org.apache.mahout.math.list.FloatArrayList:sort()', '(S)org.apache.mahout.math.set.OpenFloatHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testClear():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:size()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenIntHashSet:clear()', '(M)org.apache.mahout.math.set.OpenIntHashSet:size()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testClone():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:clone()', '(M)org.apache.mahout.math.set.OpenIntHashSet:clear()', '(M)org.apache.mahout.math.set.OpenIntHashSet:size()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testConstructors():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.set.OpenIntHashSet:<init>(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.set.OpenIntHashSet:<init>(int,double,double)', '(M)org.apache.mahout.math.set.OpenIntHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testContains():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:contains(int)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:contains(int)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testCopy():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:copy()', '(M)org.apache.mahout.math.set.OpenIntHashSet:clear()', '(M)org.apache.mahout.math.set.OpenIntHashSet:size()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testEnsureCapacity():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:ensureCapacity(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testEquals():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:remove(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:copy()', '(M)org.apache.mahout.math.set.OpenIntHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenIntHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenIntHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:remove(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenIntHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenIntHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testForEachKey():['(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:remove(int)', '(O)org.apache.mahout.math.set.OpenIntHashSetTest$1:<init>(org.apache.mahout.math.set.OpenIntHashSetTest,org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.set.OpenIntHashSet:forEachKey(org.apache.mahout.math.function.IntProcedure)', '(M)org.apache.mahout.math.list.IntArrayList:size()', '(M)org.apache.mahout.math.list.IntArrayList:toArray(int[])', '(S)java.util.Arrays:sort(int[])', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertArrayEquals(int[],int[])']
M:org.apache.mahout.math.set.OpenIntHashSetTest:testKeys():['(O)org.apache.mahout.math.set.OpenIntHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(M)org.apache.mahout.math.set.OpenIntHashSet:add(int)', '(O)org.apache.mahout.math.list.IntArrayList:<init>()', '(M)org.apache.mahout.math.set.OpenIntHashSet:keys(org.apache.mahout.math.list.IntArrayList)', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.IntArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenIntHashSet:keys()', '(M)org.apache.mahout.math.list.IntArrayList:sort()', '(S)org.apache.mahout.math.set.OpenIntHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testClear():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:size()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:clear()', '(M)org.apache.mahout.math.set.OpenLongHashSet:size()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testClone():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:clone()', '(M)org.apache.mahout.math.set.OpenLongHashSet:clear()', '(M)org.apache.mahout.math.set.OpenLongHashSet:size()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testConstructors():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.set.OpenLongHashSet:<init>(int)', '(M)org.apache.mahout.math.set.OpenLongHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.set.OpenLongHashSet:<init>(int,double,double)', '(M)org.apache.mahout.math.set.OpenLongHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testContains():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:contains(long)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:contains(long)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testCopy():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:copy()', '(M)org.apache.mahout.math.set.OpenLongHashSet:clear()', '(M)org.apache.mahout.math.set.OpenLongHashSet:size()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testEnsureCapacity():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.set.OpenLongHashSet:ensureCapacity(int)', '(M)org.apache.mahout.math.set.OpenLongHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testEquals():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:remove(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:copy()', '(M)org.apache.mahout.math.set.OpenLongHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenLongHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenLongHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:remove(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenLongHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenLongHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testForEachKey():['(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:remove(long)', '(O)org.apache.mahout.math.set.OpenLongHashSetTest$1:<init>(org.apache.mahout.math.set.OpenLongHashSetTest,org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.set.OpenLongHashSet:forEachKey(org.apache.mahout.math.function.LongProcedure)', '(M)org.apache.mahout.math.list.LongArrayList:size()', '(M)org.apache.mahout.math.list.LongArrayList:toArray(long[])', '(S)java.util.Arrays:sort(long[])', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertArrayEquals(long[],long[])']
M:org.apache.mahout.math.set.OpenLongHashSetTest:testKeys():['(O)org.apache.mahout.math.set.OpenLongHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:add(long)', '(O)org.apache.mahout.math.list.LongArrayList:<init>()', '(M)org.apache.mahout.math.set.OpenLongHashSet:keys(org.apache.mahout.math.list.LongArrayList)', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.LongArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenLongHashSet:keys()', '(M)org.apache.mahout.math.list.LongArrayList:sort()', '(S)org.apache.mahout.math.set.OpenLongHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testClear():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:size()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenShortHashSet:clear()', '(M)org.apache.mahout.math.set.OpenShortHashSet:size()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testClone():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:clone()', '(M)org.apache.mahout.math.set.OpenShortHashSet:clear()', '(M)org.apache.mahout.math.set.OpenShortHashSet:size()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testConstructors():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(O)org.apache.mahout.math.set.OpenShortHashSet:<init>(int)', '(M)org.apache.mahout.math.set.OpenShortHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(double,double,double)', '(O)org.apache.mahout.math.set.OpenShortHashSet:<init>(int,double,double)', '(M)org.apache.mahout.math.set.OpenShortHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testContains():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:contains(short)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:contains(short)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testCopy():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:copy()', '(M)org.apache.mahout.math.set.OpenShortHashSet:clear()', '(M)org.apache.mahout.math.set.OpenShortHashSet:size()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testEnsureCapacity():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(S)org.apache.mahout.math.map.PrimeFinder:nextPrime(int)', '(M)org.apache.mahout.math.set.OpenShortHashSet:ensureCapacity(int)', '(M)org.apache.mahout.math.set.OpenShortHashSet:getInternalFactors(int[],double[],double[])', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testEquals():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:remove(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:copy()', '(M)org.apache.mahout.math.set.OpenShortHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenShortHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertTrue(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenShortHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertTrue(boolean)', '(M)java.lang.String:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:remove(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:equals(java.lang.Object)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertFalse(boolean)', '(M)org.apache.mahout.math.set.OpenShortHashSet:hashCode()', '(M)org.apache.mahout.math.set.OpenShortHashSet:hashCode()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertFalse(boolean)']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testForEachKey():['(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:remove(short)', '(O)org.apache.mahout.math.set.OpenShortHashSetTest$1:<init>(org.apache.mahout.math.set.OpenShortHashSetTest,org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.set.OpenShortHashSet:forEachKey(org.apache.mahout.math.function.ShortProcedure)', '(M)org.apache.mahout.math.list.ShortArrayList:size()', '(M)org.apache.mahout.math.list.ShortArrayList:toArray(short[])', '(S)java.util.Arrays:sort(short[])', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertArrayEquals(short[],short[])']
M:org.apache.mahout.math.set.OpenShortHashSetTest:testKeys():['(O)org.apache.mahout.math.set.OpenShortHashSet:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(M)org.apache.mahout.math.set.OpenShortHashSet:add(short)', '(O)org.apache.mahout.math.list.ShortArrayList:<init>()', '(M)org.apache.mahout.math.set.OpenShortHashSet:keys(org.apache.mahout.math.list.ShortArrayList)', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.list.ShortArrayList:get(int)', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(long,long)', '(M)org.apache.mahout.math.set.OpenShortHashSet:keys()', '(M)org.apache.mahout.math.list.ShortArrayList:sort()', '(S)org.apache.mahout.math.set.OpenShortHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
M:org.apache.mahout.math.solver.EigenDecompositionTest:testDeficientRank():['(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(O)org.apache.mahout.math.solver.EigenDecompositionTest$1:<init>(org.apache.mahout.math.solver.EigenDecompositionTest)', '(M)org.apache.mahout.math.DenseMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getD()', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.solver.EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getImagEigenvalues()', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.junit.Assert:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getRealEigenvalues()', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.junit.Assert:assertEquals(double,double,double)']
M:org.apache.mahout.math.solver.EigenDecompositionTest:testDegenerateMatrix():['(O)org.apache.mahout.math.DenseMatrix:<init>(double[][])', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getD()', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.solver.EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.solver.EigenDecompositionTest:testEigen():['(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:vector()', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:set(double)', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getD()', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.solver.EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.solver.EigenDecompositionTest:testSequential():['(O)org.apache.mahout.math.DenseMatrix:<init>(int,int)', '(I)org.apache.mahout.math.Matrix:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.MatrixSlice:vector()', '(I)org.apache.mahout.math.Vector:all()', '(I)java.lang.Iterable:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(I)org.apache.mahout.math.Vector$Element:set(double)', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getD()', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.solver.EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.solver.EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.solver.EigenDecomposition:getD()', '(M)org.apache.mahout.math.solver.EigenDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.solver.EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.solver.TestConjugateGradientSolver:testConditionedConjugateGradientSolver():['(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:getIllConditionedMatrix()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:getB()', '(O)org.apache.mahout.math.solver.JacobiConditioner:<init>(org.apache.mahout.math.Matrix)', '(O)org.apache.mahout.math.solver.ConjugateGradientSolver:<init>()', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getResidualNorm()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getIterations()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(long,long)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getResidualNorm()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getIterations()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(long,long)']
M:org.apache.mahout.math.solver.TestConjugateGradientSolver:testConjugateGradientSolver():['(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:getA()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:getB()', '(O)org.apache.mahout.math.solver.ConjugateGradientSolver:<init>()', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getResidualNorm()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getIterations()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(long,long)']
M:org.apache.mahout.math.solver.TestConjugateGradientSolver:testEarlyStop():['(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:getA()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:getB()', '(O)org.apache.mahout.math.solver.ConjugateGradientSolver:<init>()', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertTrue(boolean)', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getIterations()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(long,long)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:getDistanceSquared(org.apache.mahout.math.Vector)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertTrue(boolean)', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(double,double,double)', '(M)org.apache.mahout.math.solver.ConjugateGradientSolver:getIterations()', '(S)org.apache.mahout.math.solver.TestConjugateGradientSolver:assertEquals(long,long)']
M:org.apache.mahout.math.ssvd.SequentialBigSvdTest:testLeftVectors():['(S)org.apache.mahout.math.ssvd.SequentialBigSvdTest:lowRankMatrix()', '(O)org.apache.mahout.math.ssvd.SequentialBigSvd:<init>(org.apache.mahout.math.Matrix,int)', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getU()', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(M)org.apache.mahout.math.ssvd.SequentialBigSvd:getU()', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Matrix:minus(org.apache.mahout.math.Matrix)', '(I)org.apache.mahout.math.Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.ssvd.SequentialBigSvdTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.ssvd.SequentialBigSvdTest:testRightVectors():['(S)org.apache.mahout.math.ssvd.SequentialBigSvdTest:lowRankMatrix()', '(O)org.apache.mahout.math.ssvd.SequentialBigSvd:<init>(org.apache.mahout.math.Matrix,int)', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getV()', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(M)org.apache.mahout.math.ssvd.SequentialBigSvd:getV()', '(I)org.apache.mahout.math.Matrix:viewPart(int,int,int,int)', '(I)org.apache.mahout.math.Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', '(S)org.apache.mahout.math.ssvd.SequentialBigSvdTest:assertEquals(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.ssvd.SequentialBigSvdTest:testSingularValues():['(S)org.apache.mahout.math.ssvd.SequentialBigSvdTest:lowRankMatrix()', '(O)org.apache.mahout.math.ssvd.SequentialBigSvd:<init>(org.apache.mahout.math.Matrix,int)', '(O)org.apache.mahout.math.SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.SingularValueDecomposition:getSingularValues()', '(O)org.apache.mahout.math.DenseVector:<init>(double[])', '(M)org.apache.mahout.math.DenseVector:viewPart(int,int)', '(M)org.apache.mahout.math.ssvd.SequentialBigSvd:getSingularValues()', '(S)org.apache.mahout.math.ssvd.SequentialBigSvdTest:assertEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', '(M)org.apache.mahout.math.ssvd.SequentialBigSvd:getU()', '(M)org.apache.mahout.math.ssvd.SequentialBigSvd:getSingularValues()', '(O)org.apache.mahout.math.DiagonalMatrix:<init>(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(M)org.apache.mahout.math.ssvd.SequentialBigSvd:getV()', '(I)org.apache.mahout.math.Matrix:transpose()', '(I)org.apache.mahout.math.Matrix:times(org.apache.mahout.math.Matrix)', '(S)org.apache.mahout.math.ssvd.SequentialBigSvdTest:assertEquals(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
M:org.apache.mahout.math.stats.LogLikelihoodTest:testEntropy():['(S)org.apache.mahout.math.stats.LogLikelihood:entropy(long[])', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.stats.LogLikelihood:entropy(long[])', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.stats.LogLikelihood:entropy(long[])', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:fail()']
M:org.apache.mahout.math.stats.LogLikelihoodTest:testFrequencyComparison():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.DenseVector:<init>(int)', '(O)org.apache.mahout.math.stats.LogLikelihoodTest$1:<init>(org.apache.mahout.math.stats.LogLikelihoodTest,java.util.Random)', '(M)org.apache.mahout.math.DenseVector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:like()', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.Vector)', '(I)org.apache.mahout.math.Vector:viewPart(int,int)', '(I)org.apache.mahout.math.Vector:assign(double)', '(I)org.apache.mahout.math.Vector:viewPart(int,int)', '(S)org.apache.mahout.math.function.Functions:mult(double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.function.Functions:div(double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(I)org.apache.mahout.math.Vector:norm(double)', '(S)org.apache.mahout.math.function.Functions:div(double)', '(I)org.apache.mahout.math.Vector:assign(org.apache.mahout.math.function.DoubleFunction)', '(S)com.google.common.collect.HashMultiset:create()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:sample(org.apache.mahout.math.Vector,java.util.Random)', '(S)java.lang.Integer:valueOf(int)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(S)com.google.common.collect.HashMultiset:create()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:sample(org.apache.mahout.math.Vector,java.util.Random)', '(S)java.lang.Integer:valueOf(int)', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(S)org.apache.mahout.math.stats.LogLikelihood:compareFrequencies(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)', '(I)java.util.List:isEmpty()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertFalse(boolean)', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getItem()', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()', '(S)org.apache.mahout.math.stats.LogLikelihood:compareFrequencies(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double)', '(I)java.util.List:size()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getItem()', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getItem()', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(long,long)', '(S)org.apache.mahout.math.stats.LogLikelihood:compareFrequencies(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double)', '(S)com.google.common.collect.HashMultiset:create()', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getItem()', '(I)com.google.common.collect.Multiset:add(java.lang.Object)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(S)java.lang.Integer:valueOf(int)', '(I)com.google.common.collect.Multiset:count(java.lang.Object)', '(S)java.lang.Integer:valueOf(int)', '(I)com.google.common.collect.Multiset:count(java.lang.Object)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(java.lang.String,boolean)', '(I)com.google.common.collect.Multiset:elementSet()', '(I)java.util.Set:size()', '(I)java.util.List:size()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getItem()', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(long,long)', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getItem()', '(M)java.lang.Integer:intValue()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(long,long)', '(I)java.util.List:size()', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)', '(I)java.util.List:get(int)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()', '(I)java.util.List:iterator()', '(I)java.util.Iterator:hasNext()', '(I)java.util.Iterator:next()', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)', '(M)org.apache.mahout.math.stats.LogLikelihood$ScoredItem:getScore()']
M:org.apache.mahout.math.stats.LogLikelihoodTest:testLogLikelihood():['(S)org.apache.mahout.math.stats.LogLikelihood:logLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.stats.LogLikelihood:logLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.stats.LogLikelihood:logLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.stats.LogLikelihood:logLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.stats.LogLikelihood:logLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)org.apache.mahout.math.stats.LogLikelihood:logLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.stats.LogLikelihoodTest:testRootLogLikelihood():['(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)', '(S)java.lang.Math:sqrt(double)', '(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertEquals(double,double,double)']
M:org.apache.mahout.math.stats.LogLikelihoodTest:testRootNegativeLLR():['(S)org.apache.mahout.math.stats.LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', '(S)org.apache.mahout.math.stats.LogLikelihoodTest:assertTrue(boolean)']
M:org.apache.mahout.math.stats.OnlineExponentialAverageTest:testAverage():['(O)org.apache.mahout.math.stats.OnlineExponentialAverage:<init>(double)', '(M)org.apache.mahout.math.stats.OnlineExponentialAverage:add(double,double)', '(O)java.lang.StringBuilder:<init>()', '(M)java.lang.StringBuilder:append(java.lang.String)', '(M)java.lang.StringBuilder:append(int)', '(M)java.lang.StringBuilder:toString()', '(M)org.apache.mahout.math.stats.OnlineExponentialAverage:mean()', '(S)org.apache.mahout.math.stats.OnlineExponentialAverageTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.stats.OnlineExponentialAverageTest:testRate():['(S)org.apache.mahout.common.RandomUtils:getRandom()', '(O)org.apache.mahout.math.jet.random.Poisson:<init>(double,java.util.Random)', '(M)java.util.Random:nextDouble()', '(M)org.apache.mahout.math.jet.random.Poisson:nextInt(double)', '(O)org.apache.mahout.math.stats.OnlineExponentialAverage:<init>(double)', '(M)org.apache.mahout.math.stats.OnlineExponentialAverage:add(double,double)', '(M)org.apache.mahout.math.stats.OnlineExponentialAverage:meanRate()', '(S)org.apache.mahout.math.stats.OnlineExponentialAverageTest:assertEquals(java.lang.String,double,double,double)']
M:org.apache.mahout.math.stats.OnlineSummarizerTest:testStats():['(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(S)org.apache.mahout.math.stats.OnlineSummarizerTest:normal(int)', '(S)org.apache.mahout.math.stats.OnlineSummarizerTest:check(double[])', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(S)org.apache.mahout.math.stats.OnlineSummarizerTest:exp(int)', '(S)org.apache.mahout.math.stats.OnlineSummarizerTest:check(double[])', '(M)java.io.PrintStream:printf(java.lang.String,java.lang.Object[])', '(S)org.apache.mahout.math.stats.OnlineSummarizerTest:gamma(int,double)', '(S)org.apache.mahout.math.stats.OnlineSummarizerTest:check(double[])']
