AbstractVectorTest:testAssignBinaryFunction():['Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testAssignBinaryFunction2():['Functions:plus(double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testAssignBinaryFunction3():['Functions:mult(double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testAssignDouble():['Vector:assign(double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testAssignDoubleArray():['Vector:size()', 'Vector:assign(double[])', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testAssignDoubleArrayCardinality():['Vector:size()', 'Vector:assign(double[])']
AbstractVectorTest:testAssignUnaryFunction():['Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testAssignVector():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:assign(org.apache.mahout.math.Vector)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testAssignVectorCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:assign(org.apache.mahout.math.Vector)']
AbstractVectorTest:testCardinality():['Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)']
AbstractVectorTest:testCopy():['Vector:clone()', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testCrossProduct():['Vector:cross(org.apache.mahout.math.Vector)', 'Vector:size()', 'Matrix:rowSize()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'Matrix:columnSize()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'Vector:getQuick(int)', 'Matrix:getQuick(int,int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testDivideDouble():['Vector:divide(double)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testDot():['Vector:dot(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testDot2():['Vector:clone()', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)']
AbstractVectorTest:testDotCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:dot(org.apache.mahout.math.Vector)']
AbstractVectorTest:testGet():['Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testGetDistanceSquared():['Vector:size()', 'RandomAccessSparseVector:<init>(int)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:getLengthSquared()', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Math:abs(double)', 'AbstractVectorTest:assertTrue(java.lang.String,boolean)']
AbstractVectorTest:testGetOver():['Vector:size()', 'Vector:get(int)']
AbstractVectorTest:testGetUnder():['Vector:get(int)']
AbstractVectorTest:testIterator():['Vector:nonZeroes()', 'Iterable:iterator()', 'AbstractVectorTest:checkIterator(java.util.Iterator,double[])', 'Vector:all()', 'Iterable:iterator()', 'AbstractVectorTest:checkIterator(java.util.Iterator,double[])', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:iterateNonZero()', 'AbstractVectorTest:checkIterator(java.util.Iterator,double[])', 'RandomAccessSparseVector:iterator()', 'AbstractVectorTest:checkIterator(java.util.Iterator,double[])', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:iterateNonZero()', 'AbstractVectorTest:checkIterator(java.util.Iterator,double[])', 'RandomAccessSparseVector:iterator()', 'AbstractVectorTest:checkIterator(java.util.Iterator,double[])']
AbstractVectorTest:testIteratorSet():['Vector:clone()', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:get()', 'Vector$Element:set(double)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Vector:get(int)', 'Vector$Element:get()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:clone()', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:get()', 'Vector$Element:set(double)', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Vector:get(int)', 'Vector$Element:get()', 'AbstractVectorTest:assertEquals(double,double,double)']
AbstractVectorTest:testIterators():['AbstractVectorTest:vectorToTest(int)', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:get()', 'Vector$Element:get()', 'Vector:nonZeroes()', 'Iterables:size(java.lang.Iterable)', 'AbstractVectorTest:assertEquals(long,long)', 'Vector:size()', 'AbstractVectorTest:assertEquals(long,long)', 'AbstractVectorTest:assertEquals(long,long)', 'Vector:zSum()', 'AbstractVectorTest:assertEquals(double,double,double)']
AbstractVectorTest:testLike():['Vector:like()', 'Object:getClass()', 'Object:getClass()', 'Class:isAssignableFrom(java.lang.Class)', 'AbstractVectorTest:assertTrue(java.lang.String,boolean)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)']
AbstractVectorTest:testMinus():['Vector:minus(org.apache.mahout.math.Vector)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'Vector:plus(double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'Vector:plus(double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testNormalize():['Vector:normalize()', 'Math:sqrt(double)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testPlusDouble():['Vector:plus(double)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testPlusVector():['Vector:plus(org.apache.mahout.math.Vector)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testPlusVectorCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:plus(org.apache.mahout.math.Vector)']
AbstractVectorTest:testSet():['Vector:set(int,double)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testSimpleOps():['AbstractVectorTest:vectorToTest(int)', 'RandomUtils:getRandom()', 'Normal:<init>(double,double,java.util.Random)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:get(int)', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Random:nextDouble()', 'Vector:set(int,double)', 'Vector:get(int)', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(double,double,double)', 'AbstractVectorTest:assertSame(java.lang.Object,java.lang.Object)', 'AbstractVectorTest:vectorToTest(int)', 'Normal:<init>(double,double,java.util.Random)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'DenseVector:<init>(org.apache.mahout.math.Vector)', 'DenseVector:<init>(org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(org.apache.mahout.math.Vector)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Random:nextDouble()', 'Vector:divide(double)', 'Vector:divide(double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:times(double)', 'Vector:times(double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:plus(double)', 'Vector:plus(double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Vector:dot(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Vector:dot(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Vector:dot(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Vector:dot(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Vector:dot(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getLengthSquared()', 'Vector:getLengthSquared()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:minValue()', 'Vector:minValue()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:minValueIndex()', 'Vector:minValueIndex()', 'AbstractVectorTest:assertEquals(long,long)', 'Vector:maxValue()', 'Vector:maxValue()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'Vector:maxValueIndex()', 'AbstractVectorTest:assertEquals(long,long)', 'Vector:normalize()', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:norm(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:normalize()', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:normalize(double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:norm(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:normalize(double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:norm(double)', 'Vector:norm(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:norm(double)', 'Vector:norm(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:norm(double)', 'Vector:norm(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:norm(double)', 'Vector:norm(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:zSum()', 'Vector:zSum()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:size()', 'Vector:assign(double)', 'Vector:zSum()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:plus(double)', 'Vector:norm(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:assign(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:zSum()', 'Vector:size()', 'Functions:minus(double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:zSum()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:zSum()', 'Vector:size()', 'Vector:assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector:zSum()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:assign(org.apache.mahout.math.Vector)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:assign(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'Functions:pow(double)', 'Vector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Math:sqrt(double)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Vector:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:viewPart(int,int)', 'Vector:zSum()', 'Vector:viewPart(int,int)', 'Vector:zSum()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:clone()', 'Object:getClass()', 'Object:getClass()', 'Class:isAssignableFrom(java.lang.Class)', 'AbstractVectorTest:assertTrue(boolean)', 'Object:getClass()', 'Object:getClass()', 'Class:isAssignableFrom(java.lang.Class)', 'AbstractVectorTest:assertTrue(boolean)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'AbstractVectorTest:assertNotSame(java.lang.Object,java.lang.Object)', 'Vector:assign(double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:getLengthSquared()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:logNormalize()', 'Vector:logNormalize()', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:logNormalize(double)', 'Vector:logNormalize(double)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Vector:get(int)', 'Vector$Element:get()', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector$Element:index()', 'Vector:get(int)', 'Vector$Element:index()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(double,double,double)', 'Vector$Element:index()', 'Vector:get(int)', 'Vector$Element:index()', 'Vector:getQuick(int)', 'AbstractVectorTest:assertEquals(double,double,double)']
AbstractVectorTest:testSize():['Vector:getNumNondefaultElements()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)']
AbstractVectorTest:testSmallDistances():['ConstantVector:<init>(double,int)', 'MultiNormal:<init>(double,org.apache.mahout.math.Vector)', 'AbstractVectorTest:vectorToTest(int)', 'MultiNormal:sample()', 'Vector:plus(org.apache.mahout.math.Vector)', 'Double:valueOf(double)', 'String:format(java.lang.String,java.lang.Object[])', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertTrue(java.lang.String,boolean)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertTrue(java.lang.String,boolean)', 'Double:valueOf(double)', 'String:format(java.lang.String,java.lang.Object[])', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertTrue(java.lang.String,boolean)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'AbstractVectorTest:assertTrue(java.lang.String,boolean)']
AbstractVectorTest:testSparseDoubleVectorInt():['RandomAccessSparseVector:<init>(int)', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testTimesDouble():['Vector:times(double)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testTimesVector():['Vector:times(org.apache.mahout.math.Vector)', 'Vector:size()', 'Vector:size()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testTimesVectorCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:times(org.apache.mahout.math.Vector)']
AbstractVectorTest:testToString():['AbstractVectorTest:generateTestVector(int)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Object:toString()', 'AbstractVectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'AbstractVectorTest:generateTestVector(int)', 'Vector:set(int,double)', 'Object:toString()', 'AbstractVectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'AbstractVectorTest:generateTestVector(int)', 'Object:toString()', 'AbstractVectorTest:assertEquals(java.lang.Object,java.lang.Object)']
AbstractVectorTest:testViewPart():['Vector:viewPart(int,int)', 'Vector:getNumNondefaultElements()', 'AbstractVectorTest:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'Vector:get(int)', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AbstractVectorTest:testViewPartCardinality():['Vector:viewPart(int,int)']
AbstractVectorTest:testViewPartOver():['Vector:viewPart(int,int)']
AbstractVectorTest:testViewPartUnder():['Vector:viewPart(int,int)']
AbstractVectorTest:testZSum():['Vector:zSum()', 'AbstractVectorTest:assertEquals(java.lang.String,double,double,double)']
AlternatingLeastSquaresSolverTest:testYtY():['DenseMatrix:<init>(double[][])', 'AlternatingLeastSquaresSolverTest:validateYtY(org.apache.mahout.math.Matrix,int)', 'AlternatingLeastSquaresSolverTest:validateYtY(org.apache.mahout.math.Matrix,int)']
ByteArrayListTest:testAdd():['ByteArrayList:add(byte)', 'ByteArrayList:size()', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:add(byte)', 'ByteArrayList:size()', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testBinarySearch():['ByteArrayList:binarySearchFromTo(byte,int,int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:binarySearchFromTo(byte,int,int)', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testClone():['ByteArrayList:copy()', 'ByteArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', 'ByteArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
ByteArrayListTest:testElements():['ByteArrayList:<init>(byte[])', 'ByteArrayList:size()', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:elements()', 'ByteArrayListTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:elements(byte[])', 'ByteArrayList:elements()', 'ByteArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
ByteArrayListTest:testEquals():['ByteArrayList:<init>(byte[])', 'ByteArrayList:<init>()', 'ByteArrayList:size()', 'ByteArrayList:get(int)', 'ByteArrayList:add(byte)', 'ByteArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', 'ByteArrayList:equals(java.lang.Object)', 'ByteArrayListTest:assertFalse(boolean)', 'ByteArrayList:add(byte)', 'ByteArrayList:equals(java.lang.Object)', 'ByteArrayListTest:assertFalse(boolean)']
ByteArrayListTest:testForEach():['ByteArrayListTest$1:<init>(org.apache.mahout.math.list.ByteArrayListTest)', 'ByteArrayList:forEach(org.apache.mahout.math.function.ByteProcedure)']
ByteArrayListTest:testGetEmpty():['ByteArrayList:get(int)']
ByteArrayListTest:testGetQuick():['ByteArrayList:<init>(int)', 'ByteArrayList:getQuick(int)']
ByteArrayListTest:testIndexOfFromTo():['ByteArrayList:indexOfFromTo(byte,int,int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:indexOfFromTo(byte,int,int)', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testLastIndexOfFromTo():['ByteArrayList:<init>(int)', 'ByteArrayList:add(byte)', 'ByteArrayList:add(byte)', 'ByteArrayList:add(byte)', 'ByteArrayList:add(byte)', 'ByteArrayList:add(byte)', 'ByteArrayList:lastIndexOf(byte)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:lastIndexOfFromTo(byte,int,int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:lastIndexOf(byte)', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testPartFromTo():['ByteArrayList:partFromTo(int,int)', 'AbstractByteList:size()', 'ByteArrayListTest:assertEquals(long,long)', 'AbstractByteList:get(int)', 'ByteArrayListTest:assertEquals(long,long)', 'AbstractByteList:get(int)', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testPartFromToOOB():['ByteArrayList:partFromTo(int,int)']
ByteArrayListTest:testRemoveAll():['ByteArrayList:<init>(int)', 'ByteArrayList:add(byte)', 'ByteArrayList:<init>(int)', 'ByteArrayList:add(byte)', 'ByteArrayList:removeAll(org.apache.mahout.math.list.AbstractByteList)', 'ByteArrayList:size()', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:size()', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testReplaceFromToWith():['ByteArrayList:add(byte)', 'ByteArrayList:<init>()', 'ByteArrayList:add(byte)', 'ByteArrayList:add(byte)', 'ByteArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractByteList,int,int)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testRetainAllSmall():['ByteArrayList:<init>()', 'ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:<init>()', 'ByteArrayList:add(byte)', 'ByteArrayList:add(byte)', 'ByteArrayList:retainAll(org.apache.mahout.math.list.AbstractByteList)', 'ByteArrayListTest:assertTrue(boolean)', 'ByteArrayList:size()', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertTrue(boolean)', 'ByteArrayList:size()', 'ByteArrayListTest:assertEquals(long,long)']
ByteArrayListTest:testRetainAllSmaller():['ByteArrayList:<init>()', 'ByteArrayList:addAllOf(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:<init>()', 'ByteArrayList:add(byte)', 'ByteArrayList:add(byte)', 'ByteArrayList:retainAll(org.apache.mahout.math.list.AbstractByteList)', 'ByteArrayListTest:assertTrue(boolean)', 'ByteArrayList:size()', 'ByteArrayList:get(int)', 'ByteArrayListTest:assertTrue(boolean)']
CentroidTest:testSize():['CentroidTest:getTestVector()', 'Vector:getNumNonZeroElements()', 'CentroidTest:assertEquals(java.lang.String,long,long)']
CentroidTest:testUpdate():['MultiNormal:<init>(int)', 'MultiNormal:sample()', 'MultiNormal:sample()', 'MultiNormal:sample()', 'DenseVector:<init>(org.apache.mahout.math.Vector)', 'Centroid:<init>(int,org.apache.mahout.math.Vector)', 'DenseVector:<init>(org.apache.mahout.math.Vector)', 'Centroid:<init>(int,org.apache.mahout.math.Vector)', 'Centroid:update(org.apache.mahout.math.Vector)', 'Centroid:<init>(org.apache.mahout.math.WeightedVector)', 'Centroid:update(org.apache.mahout.math.Vector)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Functions:div(double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Centroid:getVector()', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'CentroidTest:assertEquals(double,double,double)', 'Centroid:getWeight()', 'CentroidTest:assertEquals(double,double,double)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:divide(double)', 'Centroid:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'CentroidTest:assertEquals(double,double,double)', 'Centroid:getWeight()', 'CentroidTest:assertEquals(double,double,double)', 'Centroid:getIndex()', 'Centroid:getWeight()', 'Centroid:<init>(int,org.apache.mahout.math.Vector,double)', 'Centroid:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'CentroidTest:assertEquals(double,double,double)', 'DenseVector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'CentroidTest:assertEquals(double,double,double)', 'Centroid:getWeight()', 'CentroidTest:assertEquals(double,double,double)', 'Centroid:getIndex()', 'CentroidTest:assertEquals(long,long)']
CharArrayListTest:testAdd():['CharArrayList:add(char)', 'CharArrayList:size()', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:add(char)', 'CharArrayList:size()', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testBinarySearch():['CharArrayList:binarySearchFromTo(char,int,int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:binarySearchFromTo(char,int,int)', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testClone():['CharArrayList:copy()', 'CharArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', 'CharArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
CharArrayListTest:testElements():['CharArrayList:<init>(char[])', 'CharArrayList:size()', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:elements()', 'CharArrayListTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:elements(char[])', 'CharArrayList:elements()', 'CharArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
CharArrayListTest:testEquals():['CharArrayList:<init>(char[])', 'CharArrayList:<init>()', 'CharArrayList:size()', 'CharArrayList:get(int)', 'CharArrayList:add(char)', 'CharArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', 'CharArrayList:equals(java.lang.Object)', 'CharArrayListTest:assertFalse(boolean)', 'CharArrayList:add(char)', 'CharArrayList:equals(java.lang.Object)', 'CharArrayListTest:assertFalse(boolean)']
CharArrayListTest:testForEach():['CharArrayListTest$1:<init>(org.apache.mahout.math.list.CharArrayListTest)', 'CharArrayList:forEach(org.apache.mahout.math.function.CharProcedure)']
CharArrayListTest:testGetEmpty():['CharArrayList:get(int)']
CharArrayListTest:testGetQuick():['CharArrayList:<init>(int)', 'CharArrayList:getQuick(int)']
CharArrayListTest:testIndexOfFromTo():['CharArrayList:indexOfFromTo(char,int,int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:indexOfFromTo(char,int,int)', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testLastIndexOfFromTo():['CharArrayList:<init>(int)', 'CharArrayList:add(char)', 'CharArrayList:add(char)', 'CharArrayList:add(char)', 'CharArrayList:add(char)', 'CharArrayList:add(char)', 'CharArrayList:lastIndexOf(char)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:lastIndexOfFromTo(char,int,int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:lastIndexOf(char)', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testPartFromTo():['CharArrayList:partFromTo(int,int)', 'AbstractCharList:size()', 'CharArrayListTest:assertEquals(long,long)', 'AbstractCharList:get(int)', 'CharArrayListTest:assertEquals(long,long)', 'AbstractCharList:get(int)', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testPartFromToOOB():['CharArrayList:partFromTo(int,int)']
CharArrayListTest:testRemoveAll():['CharArrayList:<init>(int)', 'CharArrayList:add(char)', 'CharArrayList:<init>(int)', 'CharArrayList:add(char)', 'CharArrayList:removeAll(org.apache.mahout.math.list.AbstractCharList)', 'CharArrayList:size()', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:size()', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testReplaceFromToWith():['CharArrayList:add(char)', 'CharArrayList:<init>()', 'CharArrayList:add(char)', 'CharArrayList:add(char)', 'CharArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractCharList,int,int)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testRetainAllSmall():['CharArrayList:<init>()', 'CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:<init>()', 'CharArrayList:add(char)', 'CharArrayList:add(char)', 'CharArrayList:retainAll(org.apache.mahout.math.list.AbstractCharList)', 'CharArrayListTest:assertTrue(boolean)', 'CharArrayList:size()', 'CharArrayList:get(int)', 'CharArrayListTest:assertTrue(boolean)', 'CharArrayList:size()', 'CharArrayListTest:assertEquals(long,long)']
CharArrayListTest:testRetainAllSmaller():['CharArrayList:<init>()', 'CharArrayList:addAllOf(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:<init>()', 'CharArrayList:add(char)', 'CharArrayList:add(char)', 'CharArrayList:retainAll(org.apache.mahout.math.list.AbstractCharList)', 'CharArrayListTest:assertTrue(boolean)', 'CharArrayList:size()', 'CharArrayList:get(int)', 'CharArrayListTest:assertTrue(boolean)']
ChineseRestaurantTest:testDepth():['Lists:newArrayList()', 'ChineseRestaurant:<init>(double)', 'HashMultiset:create()', 'ChineseRestaurant:sample()', 'Multiset:add(java.lang.Object)', 'Lists:newArrayList()', 'Multiset:elementSet()', 'Set:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Multiset:count(java.lang.Object)', 'Integer:valueOf(int)', 'List:add(java.lang.Object)', 'Collections:reverseOrder()', 'Collections:sort(java.util.List,java.util.Comparator)', 'List:size()', 'List:size()', 'Integer:valueOf(int)', 'List:add(java.lang.Object)', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'List:get(int)', 'Integer:intValue()', 'Integer:intValue()', 'Integer:valueOf(int)', 'List:set(int,java.lang.Object)', 'List:get(int)', 'Integer:intValue()', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'List:get(int)', 'Integer:intValue()', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'List:get(int)', 'Integer:intValue()', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'List:get(int)', 'Integer:intValue()', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'List:get(int)', 'Integer:intValue()', 'ChineseRestaurantTest:assertEquals(double,double,double)']
ChineseRestaurantTest:testExtremeDiscount():['ChineseRestaurant:<init>(double,double)', 'HashMultiset:create()', 'ChineseRestaurant:sample()', 'Multiset:add(java.lang.Object)', 'ChineseRestaurant:size()', 'ChineseRestaurantTest:assertEquals(long,long)', 'ChineseRestaurant:count(int)', 'ChineseRestaurantTest:assertEquals(long,long)']
ChineseRestaurantTest:testGrowth():['ChineseRestaurant:<init>(double,double)', 'ChineseRestaurant:<init>(double,double)', 'ChineseRestaurant:<init>(double,double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])', 'DenseMatrix:<init>(int,int)', 'DenseMatrix:<init>(int,int)', 'Math:log10(double)', 'Math:floor(double)', 'Math:pow(double,double)', 'Double:valueOf(double)', 'Set:contains(java.lang.Object)', 'Matrix:viewPart(int,int,int,int)', 'ChineseRestaurantTest:predictSize(org.apache.mahout.math.Matrix,int,double)', 'ChineseRestaurant:size()', 'Math:log(double)', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'Matrix:viewPart(int,int,int,int)', 'ChineseRestaurantTest:predictSize(org.apache.mahout.math.Matrix,int,double)', 'ChineseRestaurant:size()', 'Math:log(double)', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'Math:log(double)', 'ChineseRestaurant:size()', 'Matrix:viewRow(int)', 'ChineseRestaurant:size()', 'Math:log(double)', 'Math:log(double)', 'Vector:assign(double[])', 'Matrix:viewRow(int)', 'ChineseRestaurant:size()', 'Math:log(double)', 'Math:log(double)', 'Vector:assign(double[])', 'ChineseRestaurantTest:hapaxCount(org.apache.mahout.math.random.ChineseRestaurant)', 'ChineseRestaurant:size()', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'ChineseRestaurantTest:hapaxCount(org.apache.mahout.math.random.ChineseRestaurant)', 'ChineseRestaurant:size()', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'ChineseRestaurantTest:hapaxCount(org.apache.mahout.math.random.ChineseRestaurant)', 'ChineseRestaurant:size()', 'ChineseRestaurantTest:assertEquals(double,double,double)', 'ChineseRestaurant:sample()', 'ChineseRestaurant:sample()', 'ChineseRestaurant:sample()']
CholeskyDecompositionTest:test1():['RandomUtils:getRandom()', 'DenseMatrix:<init>(int,int)', 'CholeskyDecompositionTest$2:<init>(org.apache.mahout.math.CholeskyDecompositionTest,java.util.Random)', 'Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', 'CholeskyDecomposition:getL()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(boolean)', 'StringBuilder:toString()', 'Assert:assertEquals(java.lang.String,double,double,double)', 'CholeskyDecomposition:solveLeft(org.apache.mahout.math.Matrix)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(boolean)', 'StringBuilder:toString()', 'Matrix:get(int,int)', 'Assert:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(boolean)', 'StringBuilder:toString()', 'Matrix:viewRow(int)', 'Vector:norm(double)', 'Assert:assertEquals(java.lang.String,double,double,double)', 'Matrix:transpose()', 'CholeskyDecomposition:solveRight(org.apache.mahout.math.Matrix)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(boolean)', 'StringBuilder:toString()', 'Matrix:get(int,int)', 'Assert:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(boolean)', 'StringBuilder:toString()', 'Matrix:viewRow(int)', 'Vector:norm(double)', 'Assert:assertEquals(java.lang.String,double,double,double)']
CholeskyDecompositionTest:test2():['DenseMatrix:<init>(double[][])', 'CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', 'CholeskyDecomposition:getL()', 'CholeskyDecomposition:getL()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'CholeskyDecompositionTest:assertEquals(double,double,double)', 'CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix)', 'CholeskyDecomposition:getL()', 'CholeskyDecomposition:getL()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'CholeskyDecompositionTest:assertEquals(double,double,double)']
CholeskyDecompositionTest:testRankDeficient():['CholeskyDecompositionTest:rank4Matrix()', 'CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix)', 'CholeskyDecomposition:getPivot()', 'PivotedMatrix:<init>(org.apache.mahout.math.Matrix,int[])', 'CholeskyDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', 'CholeskyDecomposition:getL()', 'CholeskyDecomposition:getL()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'CholeskyDecompositionTest:assertEquals(double,double,double)', 'CholeskyDecomposition:getL()', 'CholeskyDecomposition:getL()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'CholeskyDecompositionTest:assertEquals(double,double,double)', 'CholeskyDecomposition:isPositiveDefinite()', 'Assert:assertFalse(boolean)', 'CholeskyDecomposition:getL()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Assert:assertEquals(double,double,double)']
DenseSymmetricTest:testBasics():['DenseSymmetricMatrix:<init>(double[],boolean)', 'Object:toString()', 'PrintStream:println(java.lang.String)', 'Matrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'DenseSymmetricTest:assertEquals(double,double,double)', 'Matrix:viewPart(int,int,int,int)', 'Matrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'DenseSymmetricTest:assertEquals(double,double,double)', 'Matrix:get(int,int)', 'DenseSymmetricTest:assertEquals(double,double,double)', 'PrintStream:println(java.lang.Object)', 'DenseMatrix:<init>(int,int)', 'DenseMatrix:assign(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DenseSymmetricTest:assertEquals(double,double,double)', 'PrintStream:println(java.lang.Object)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DenseSymmetricTest:assertEquals(double,double,double)', 'Matrix:plus(org.apache.mahout.math.Matrix)', 'PrintStream:println(java.lang.Object)', 'Matrix:plus(org.apache.mahout.math.Matrix)', 'Matrix:plus(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DenseSymmetricTest:assertEquals(double,double,double)']
DenseSymmetricTest:testEigen():['DenseSymmetricMatrix:<init>(double[],boolean)', 'Matrix:numRows()', 'Matrix:numCols()', 'DenseMatrix:<init>(int,int)', 'Matrix:assign(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DenseSymmetricTest:assertEquals(double,double,double)', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', 'EigenDecomposition:getV()', 'PrintStream:println(java.lang.Object)', 'EigenDecomposition:getV()', 'EigenDecomposition:getV()', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DenseSymmetricTest:assertEquals(double,double,double)', 'EigenDecomposition:getRealEigenvalues()', 'EigenDecomposition:getRealEigenvalues()', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DenseSymmetricTest:assertEquals(double,double,double)']
DiagonalMatrixTest:testBasics():['DiagonalMatrix:<init>(double[])', 'DiagonalMatrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewPart(int,int,int,int)', 'Matrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:get(int,int)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DenseMatrix:<init>(int,int)', 'Matrix:assign(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'DiagonalMatrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'Matrix:plus(org.apache.mahout.math.Matrix)', 'DiagonalMatrix:plus(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DenseMatrix:<init>(double[][])', 'DiagonalMatrix:timesLeft(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'Matrix:transpose()', 'DiagonalMatrix:times(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'DiagonalMatrixTest:assertEquals(double,double,double)']
DiagonalMatrixTest:testSparsity():['DenseVector:<init>(int)', 'Vector:set(int,double)', 'DiagonalMatrix:<init>(org.apache.mahout.math.Vector)', 'DiagonalMatrix:viewRow(int)', 'Vector:isDense()', 'Assert:assertFalse(boolean)', 'DiagonalMatrix:viewColumn(int)', 'Vector:isDense()', 'Assert:assertFalse(boolean)', 'DiagonalMatrix:viewRow(int)', 'Vector:zSum()', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewRow(int)', 'Vector:get(int)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewColumn(int)', 'Vector:zSum()', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewColumn(int)', 'Vector:get(int)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewRow(int)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'DiagonalMatrixTest:assertTrue(boolean)', 'Iterator:next()', 'Vector$Element:index()', 'DiagonalMatrixTest:assertEquals(long,long)', 'Vector$Element:get()', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'Iterator:hasNext()', 'DiagonalMatrixTest:assertFalse(boolean)', 'DiagonalMatrix:viewRow(int)', 'Vector:get(int)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewColumn(int)', 'Vector:get(int)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewRow(int)', 'Vector:set(int,double)', 'DiagonalMatrix:get(int,int)', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'DiagonalMatrix:viewRow(int)', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Vector$Element:get()', 'DiagonalMatrixTest:assertEquals(double,double,double)', 'Vector$Element:get()', 'DiagonalMatrixTest:assertEquals(double,double,double)']
DoubleArrayListTest:testAdd():['DoubleArrayList:add(double)', 'DoubleArrayList:size()', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:add(double)', 'DoubleArrayList:size()', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)']
DoubleArrayListTest:testBinarySearch():['DoubleArrayList:binarySearchFromTo(double,int,int)', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:binarySearchFromTo(double,int,int)', 'DoubleArrayListTest:assertEquals(long,long)']
DoubleArrayListTest:testClone():['DoubleArrayList:copy()', 'DoubleArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', 'DoubleArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
DoubleArrayListTest:testElements():['DoubleArrayList:<init>(double[])', 'DoubleArrayList:size()', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:elements()', 'DoubleArrayListTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:elements(double[])', 'DoubleArrayList:elements()', 'DoubleArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
DoubleArrayListTest:testEquals():['DoubleArrayList:<init>(double[])', 'DoubleArrayList:<init>()', 'DoubleArrayList:size()', 'DoubleArrayList:get(int)', 'DoubleArrayList:add(double)', 'DoubleArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', 'DoubleArrayList:equals(java.lang.Object)', 'DoubleArrayListTest:assertFalse(boolean)', 'DoubleArrayList:add(double)', 'DoubleArrayList:equals(java.lang.Object)', 'DoubleArrayListTest:assertFalse(boolean)']
DoubleArrayListTest:testForEach():['DoubleArrayListTest$1:<init>(org.apache.mahout.math.list.DoubleArrayListTest)', 'DoubleArrayList:forEach(org.apache.mahout.math.function.DoubleProcedure)']
DoubleArrayListTest:testGetEmpty():['DoubleArrayList:get(int)']
DoubleArrayListTest:testGetQuick():['DoubleArrayList:<init>(int)', 'DoubleArrayList:getQuick(int)']
DoubleArrayListTest:testIndexOfFromTo():['DoubleArrayList:indexOfFromTo(double,int,int)', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:indexOfFromTo(double,int,int)', 'DoubleArrayListTest:assertEquals(long,long)']
DoubleArrayListTest:testLastIndexOfFromTo():['DoubleArrayList:<init>(int)', 'DoubleArrayList:add(double)', 'DoubleArrayList:add(double)', 'DoubleArrayList:add(double)', 'DoubleArrayList:add(double)', 'DoubleArrayList:add(double)', 'DoubleArrayList:lastIndexOf(double)', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:lastIndexOfFromTo(double,int,int)', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:lastIndexOf(double)', 'DoubleArrayListTest:assertEquals(long,long)']
DoubleArrayListTest:testPartFromTo():['DoubleArrayList:partFromTo(int,int)', 'AbstractDoubleList:size()', 'DoubleArrayListTest:assertEquals(long,long)', 'AbstractDoubleList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)', 'AbstractDoubleList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)']
DoubleArrayListTest:testPartFromToOOB():['DoubleArrayList:partFromTo(int,int)']
DoubleArrayListTest:testRemoveAll():['DoubleArrayList:<init>(int)', 'DoubleArrayList:add(double)', 'DoubleArrayList:<init>(int)', 'DoubleArrayList:add(double)', 'DoubleArrayList:removeAll(org.apache.mahout.math.list.AbstractDoubleList)', 'DoubleArrayList:size()', 'DoubleArrayListTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)']
DoubleArrayListTest:testReplaceFromToWith():['DoubleArrayList:add(double)', 'DoubleArrayList:<init>()', 'DoubleArrayList:add(double)', 'DoubleArrayList:add(double)', 'DoubleArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractDoubleList,int,int)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertEquals(double,double,double)']
DoubleArrayListTest:testRetainAllSmall():['DoubleArrayList:<init>()', 'DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:<init>()', 'DoubleArrayList:add(double)', 'DoubleArrayList:add(double)', 'DoubleArrayList:retainAll(org.apache.mahout.math.list.AbstractDoubleList)', 'DoubleArrayListTest:assertTrue(boolean)', 'DoubleArrayList:size()', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertTrue(boolean)', 'DoubleArrayList:size()', 'DoubleArrayListTest:assertEquals(long,long)']
DoubleArrayListTest:testRetainAllSmaller():['DoubleArrayList:<init>()', 'DoubleArrayList:addAllOf(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:<init>()', 'DoubleArrayList:add(double)', 'DoubleArrayList:add(double)', 'DoubleArrayList:retainAll(org.apache.mahout.math.list.AbstractDoubleList)', 'DoubleArrayListTest:assertTrue(boolean)', 'DoubleArrayList:size()', 'DoubleArrayList:get(int)', 'DoubleArrayListTest:assertTrue(boolean)']
EigenDecompositionTest:testDeficientRank():['DenseMatrix:<init>(int,int)', 'EigenDecompositionTest$1:<init>(org.apache.mahout.math.solver.EigenDecompositionTest)', 'DenseMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', 'EigenDecomposition:getD()', 'EigenDecomposition:getV()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)', 'EigenDecomposition:getImagEigenvalues()', 'Vector:norm(double)', 'Assert:assertEquals(double,double,double)', 'EigenDecomposition:getRealEigenvalues()', 'Vector:norm(double)', 'Assert:assertEquals(double,double,double)']
EigenDecompositionTest:testDegenerateMatrix():['DenseMatrix:<init>(double[][])', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix,boolean)', 'EigenDecomposition:getD()', 'EigenDecomposition:getV()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
EigenDecompositionTest:testEigen():['DenseMatrix:<init>(int,int)', 'Matrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:vector()', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:set(double)', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', 'EigenDecomposition:getD()', 'EigenDecomposition:getV()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
EigenDecompositionTest:testSequential():['DenseMatrix:<init>(int,int)', 'Matrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:vector()', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:set(double)', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', 'EigenDecomposition:getD()', 'EigenDecomposition:getV()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', 'EigenDecomposition:getD()', 'EigenDecomposition:getV()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'EigenDecompositionTest:check(java.lang.String,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
EmpiricalTest:testBadArguments():['Empirical:<init>(boolean,boolean,int,double[])', 'Assert:fail(java.lang.String)', 'Empirical:<init>(boolean,boolean,int,double[])', 'Assert:fail(java.lang.String)', 'Empirical:<init>(boolean,boolean,int,double[])', 'Assert:fail(java.lang.String)', 'Empirical:<init>(boolean,boolean,int,double[])', 'Assert:fail(java.lang.String)', 'Empirical:<init>(boolean,boolean,int,double[])', 'Assert:fail(java.lang.String)']
EmpiricalTest:testSimpleDist():['RandomUtils:useTestSeed()', 'Empirical:<init>(boolean,boolean,int,double[])', 'Lists:newArrayList()', 'Empirical:sample()', 'List:add(java.lang.Object)', 'Collections:sort(java.util.List)', 'List:get(int)', 'Double:doubleValue()', 'EmpiricalTest:assertEquals(double,double,double)']
EmpiricalTest:testZeros():['Empirical:<init>(boolean,boolean,int,double[])', 'Empirical:sample(double)', 'EmpiricalTest:assertEquals(double,double,double)', 'Empirical:sample(double)', 'EmpiricalTest:assertEquals(double,double,double)']
ExponentialTest:testCdf():['RandomUtils:getRandom()', 'Exponential:<init>(double,java.util.Random)', 'Math:exp(double)', 'Exponential:cdf(double)', 'ExponentialTest:assertEquals(double,double,double)']
ExponentialTest:testNextDouble():['RandomUtils:getRandom()', 'Exponential:<init>(double,java.util.Random)', 'Exponential:setState(double)', 'ExponentialTest:checkEmpiricalDistribution(org.apache.mahout.math.jet.random.Exponential,int,double)', 'DistributionChecks:checkDistribution(org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double,double,int)']
ExponentialTest:testPdf():['Exponential:<init>(double,java.util.Random)', 'ExponentialTest:checkPdf(org.apache.mahout.math.jet.random.Exponential,double)']
ExponentialTest:testSetState():['Exponential:<init>(double,java.util.Random)', 'Exponential:setState(double)', 'ExponentialTest:checkPdf(org.apache.mahout.math.jet.random.Exponential,double)']
ExponentialTest:testToString():['Exponential:<init>(double,java.util.Random)', 'Exponential:toString()', 'ExponentialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Exponential:<init>(double,java.util.Random)', 'Exponential:toString()', 'ExponentialTest:assertEquals(java.lang.Object,java.lang.Object)']
FileBasedMatrixTest:testBigMatrix():['System:getProperty(java.lang.String)', 'Assume:assumeNotNull(java.lang.Object[])', 'SparseRowMatrix:<init>(int,int)', 'RandomUtils:getRandom()', 'Random:nextInt(int)', 'Random:nextInt(int)', 'FileBasedMatrixTest:matrixValue(int)', 'Matrix:set(int,int,double)', 'FileBasedMatrixTest:getTestTempDir()', 'File:createTempFile(java.lang.String,java.lang.String,java.io.File)', 'File:deleteOnExit()', 'File:getAbsolutePath()', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'FileBasedMatrix:writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'File:length()', 'Double:valueOf(double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'FileBasedMatrix:<init>(int,int)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'FileBasedMatrix:setData(java.io.File,boolean)', 'RandomUtils:getRandom()', 'FileBasedMatrixTest:matrixValue(int)', 'Random:nextInt(int)', 'Random:nextInt(int)', 'FileBasedMatrix:get(int,int)', 'FileBasedMatrixTest:assertEquals(double,double,double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])']
FileBasedMatrixTest:testSetData():['FileBasedMatrixTest:getTestTempDir()', 'File:createTempFile(java.lang.String,java.lang.String,java.io.File)', 'File:deleteOnExit()', 'DenseMatrix:<init>(int,int)', 'MultiNormal:<init>(int)', 'Matrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:vector()', 'MultiNormal:sample()', 'Vector:assign(org.apache.mahout.math.Vector)', 'FileBasedMatrix:writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', 'FileBasedMatrix:<init>(int,int)', 'FileBasedMatrix:setData(java.io.File,boolean)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'FileBasedMatrixTest:assertEquals(double,double,double)', 'FileBasedMatrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:vector()', 'Matrix:viewRow(int)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'FileBasedMatrixTest:assertEquals(double,double,double)']
FileBasedSparseBinaryMatrixTest:testSetData():['FileBasedSparseBinaryMatrixTest:getTestTempDir()', 'File:createTempFile(java.lang.String,java.lang.String,java.io.File)', 'File:deleteOnExit()', 'RandomUtils:getRandom()', 'SparseRowMatrix:<init>(int,int)', 'Matrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Random:nextDouble()', 'Math:log(double)', 'Math:ceil(double)', 'MatrixSlice:vector()', 'Random:nextInt(int)', 'Vector:set(int,double)', 'FileBasedSparseBinaryMatrix:writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', 'FileBasedSparseBinaryMatrix:<init>(int,int)', 'FileBasedSparseBinaryMatrix:setData(java.io.File)', 'FileBasedSparseBinaryMatrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:vector()', 'MatrixSlice:index()', 'Matrix:viewRow(int)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'FileBasedSparseBinaryMatrixTest:assertEquals(double,double,double)']
FloatArrayListTest:testAdd():['FloatArrayList:add(float)', 'FloatArrayList:size()', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:add(float)', 'FloatArrayList:size()', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)']
FloatArrayListTest:testBinarySearch():['FloatArrayList:binarySearchFromTo(float,int,int)', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:binarySearchFromTo(float,int,int)', 'FloatArrayListTest:assertEquals(long,long)']
FloatArrayListTest:testClone():['FloatArrayList:copy()', 'FloatArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', 'FloatArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
FloatArrayListTest:testElements():['FloatArrayList:<init>(float[])', 'FloatArrayList:size()', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:elements()', 'FloatArrayListTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:elements(float[])', 'FloatArrayList:elements()', 'FloatArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
FloatArrayListTest:testEquals():['FloatArrayList:<init>(float[])', 'FloatArrayList:<init>()', 'FloatArrayList:size()', 'FloatArrayList:get(int)', 'FloatArrayList:add(float)', 'FloatArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', 'FloatArrayList:equals(java.lang.Object)', 'FloatArrayListTest:assertFalse(boolean)', 'FloatArrayList:add(float)', 'FloatArrayList:equals(java.lang.Object)', 'FloatArrayListTest:assertFalse(boolean)']
FloatArrayListTest:testForEach():['FloatArrayListTest$1:<init>(org.apache.mahout.math.list.FloatArrayListTest)', 'FloatArrayList:forEach(org.apache.mahout.math.function.FloatProcedure)']
FloatArrayListTest:testGetEmpty():['FloatArrayList:get(int)']
FloatArrayListTest:testGetQuick():['FloatArrayList:<init>(int)', 'FloatArrayList:getQuick(int)']
FloatArrayListTest:testIndexOfFromTo():['FloatArrayList:indexOfFromTo(float,int,int)', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:indexOfFromTo(float,int,int)', 'FloatArrayListTest:assertEquals(long,long)']
FloatArrayListTest:testLastIndexOfFromTo():['FloatArrayList:<init>(int)', 'FloatArrayList:add(float)', 'FloatArrayList:add(float)', 'FloatArrayList:add(float)', 'FloatArrayList:add(float)', 'FloatArrayList:add(float)', 'FloatArrayList:lastIndexOf(float)', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:lastIndexOfFromTo(float,int,int)', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:lastIndexOf(float)', 'FloatArrayListTest:assertEquals(long,long)']
FloatArrayListTest:testPartFromTo():['FloatArrayList:partFromTo(int,int)', 'AbstractFloatList:size()', 'FloatArrayListTest:assertEquals(long,long)', 'AbstractFloatList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)', 'AbstractFloatList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)']
FloatArrayListTest:testPartFromToOOB():['FloatArrayList:partFromTo(int,int)']
FloatArrayListTest:testRemoveAll():['FloatArrayList:<init>(int)', 'FloatArrayList:add(float)', 'FloatArrayList:<init>(int)', 'FloatArrayList:add(float)', 'FloatArrayList:removeAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayList:size()', 'FloatArrayListTest:assertEquals(long,long)', 'FloatArrayList:size()', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)']
FloatArrayListTest:testReplaceFromToWith():['FloatArrayList:add(float)', 'FloatArrayList:<init>()', 'FloatArrayList:add(float)', 'FloatArrayList:add(float)', 'FloatArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractFloatList,int,int)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertEquals(float,float,float)']
FloatArrayListTest:testRetainAllSmall():['FloatArrayList:<init>()', 'FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:<init>()', 'FloatArrayList:add(float)', 'FloatArrayList:add(float)', 'FloatArrayList:retainAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayListTest:assertTrue(boolean)', 'FloatArrayList:size()', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertTrue(boolean)', 'FloatArrayList:size()', 'FloatArrayListTest:assertEquals(long,long)']
FloatArrayListTest:testRetainAllSmaller():['FloatArrayList:<init>()', 'FloatArrayList:addAllOf(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:<init>()', 'FloatArrayList:add(float)', 'FloatArrayList:add(float)', 'FloatArrayList:retainAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayListTest:assertTrue(boolean)', 'FloatArrayList:size()', 'FloatArrayList:get(int)', 'FloatArrayListTest:assertTrue(boolean)']
FunctionTest:testIsAssociative():['DoubleDoubleFunction:isAssociative()', 'Random:nextDouble()', 'Random:nextDouble()', 'Random:nextDouble()', 'DoubleDoubleFunction:apply(double,double)', 'DoubleDoubleFunction:apply(double,double)', 'DoubleDoubleFunction:apply(double,double)', 'DoubleDoubleFunction:apply(double,double)', 'Assert:assertEquals(java.lang.String,double,double,double)']
FunctionTest:testIsCommutative():['DoubleDoubleFunction:isCommutative()', 'Random:nextDouble()', 'Random:nextDouble()', 'DoubleDoubleFunction:apply(double,double)', 'DoubleDoubleFunction:apply(double,double)', 'Assert:assertEquals(java.lang.String,double,double,double)']
FunctionTest:testIsDensifying():['DoubleDoubleFunction:isDensifying()', 'DoubleDoubleFunction:apply(double,double)', 'Assert:assertEquals(java.lang.String,double,double,double)']
FunctionTest:testIsLikeLeftMult():['DoubleDoubleFunction:isLikeLeftMult()', 'Random:nextDouble()', 'DoubleDoubleFunction:apply(double,double)', 'Assert:assertEquals(java.lang.String,double,double,double)']
FunctionTest:testIsLikeRightMult():['DoubleDoubleFunction:isLikeRightMult()', 'Random:nextDouble()', 'DoubleDoubleFunction:apply(double,double)', 'Assert:assertEquals(java.lang.String,double,double,double)']
FunctionTest:testIsLikeRightPlus():['DoubleDoubleFunction:isLikeRightPlus()', 'Random:nextDouble()', 'DoubleDoubleFunction:apply(double,double)', 'Assert:assertEquals(java.lang.String,double,double,double)']
GammaTest:testBigX():['GammaTest:factorial(int)', 'GammaTest:assertEquals(double,double,double)', 'GammaTest:factorial(int)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'GammaTest:factorial(int)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'GammaTest:factorial(int)', 'Gamma:gamma(double)', 'GammaTest:factorial(int)', 'GammaTest:assertEquals(double,double,double)', 'GammaTest:factorial(int)', 'Gamma:gamma(double)', 'GammaTest:factorial(int)', 'GammaTest:assertEquals(double,double,double)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'Gamma:gamma(double)', 'Math:abs(double)', 'Math:log(double)', 'Gamma:logGamma(double)', 'Math:abs(double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(double)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(double)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'GammaTest:assertEquals(java.lang.String,double,double,double)']
GammaTest:testCdf():['RandomUtils:getRandom()', 'Gamma:<init>(double,double,java.util.Random)', 'Gamma:<init>(double,double,java.util.Random)', 'GammaTest:seq(double,double,double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'String:format(java.util.Locale,java.lang.String,java.lang.Object[])', 'Math:exp(double)', 'Gamma:cdf(double)', 'GammaTest:assertEquals(java.lang.String,double,double,double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'String:format(java.util.Locale,java.lang.String,java.lang.Object[])', 'Gamma:cdf(double)', 'Gamma:cdf(double)', 'GammaTest:assertEquals(java.lang.String,double,double,double)', 'Gamma:<init>(double,double,java.util.Random)', 'Gamma:<init>(double,double,java.util.Random)', 'GammaTest:seq(double,double,double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'String:format(java.util.Locale,java.lang.String,java.lang.Object[])', 'Gamma:cdf(double)', 'Gamma:cdf(double)', 'GammaTest:assertEquals(java.lang.String,double,double,double)', 'GammaTest:checkGammaCdf(double,double,double[])', 'GammaTest:checkGammaCdf(double,double,double[])', 'GammaTest:checkGammaCdf(double,double,double[])', 'GammaTest:checkGammaCdf(double,double,double[])', 'GammaTest:checkGammaCdf(double,double,double[])']
GammaTest:testGamma():['Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'GammaTest:gammaInteger(double)', 'Gamma:gamma(double)', 'GammaTest:assertEquals(double,double,double)', 'GammaTest:gammaInteger(double)', 'Gamma:logGamma(double)', 'Math:exp(double)', 'GammaTest:assertEquals(double,double,double)']
GammaTest:testNegativeArgForGamma():['Gamma:gamma(double)', 'Math:abs(double)', 'GammaTest:assertEquals(double,double,double)', 'Math:abs(double)', 'Gamma:logGamma(double)', 'Math:exp(double)', 'Math:abs(double)', 'Math:abs(double)', 'GammaTest:assertEquals(double,double,double)']
GammaTest:testNextDouble():['RandomUtils:getRandom()', 'Gamma:<init>(double,double,java.util.Random)', 'Gamma:nextDouble()', 'Arrays:sort(double[])', 'GammaTest:seq(double,double,double)', 'Gamma:cdf(double)', 'GammaTest:assertEquals(double,double,double)']
GammaTest:testPdf():['RandomUtils:getRandom()', 'Gamma:<init>(double,double,java.util.Random)', 'GammaTest:seq(double,double,double)', 'Math:pow(double,double)', 'Math:pow(double,double)', 'Gamma:logGamma(double)', 'Math:exp(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'String:format(java.util.Locale,java.lang.String,java.lang.Object[])', 'Gamma:pdf(double)', 'GammaTest:assertEquals(java.lang.String,double,double,double)']
HashUtilsTest:testHashDouble():['Lists:newArrayList()', 'RandomUtils:getRandom()', 'Random:nextDouble()', 'Double:valueOf(double)', 'List:add(java.lang.Object)', 'HashUtilsTest:checkCounts(java.util.Collection)']
HashUtilsTest:testHashFloat():['HashMultiset:create()', 'Lists:newArrayList()', 'RandomUtils:getRandom()', 'Random:nextDouble()', 'Float:valueOf(float)', 'List:add(java.lang.Object)', 'HashUtilsTest:checkCounts(java.util.Collection)', 'Integer:valueOf(int)', 'Multiset:add(java.lang.Object)', 'Integer:valueOf(int)', 'Multiset:count(java.lang.Object)', 'HashUtilsTest:assertTrue(boolean)']
HashUtilsTest:testHashLong():['Lists:newArrayList()', 'RandomUtils:getRandom()', 'Random:nextLong()', 'Long:valueOf(long)', 'List:add(java.lang.Object)', 'HashUtilsTest:checkCounts(java.util.Collection)']
IndianBuffetTest:testBasicText():['RandomUtils:useTestSeed()', 'IndianBuffet:createTextDocumentSampler(double)', 'HashMultiset:create()', 'IndianBuffet:sample()', 'List:size()', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Multiset:add(java.lang.Object)', 'PrintStream:printf(java.lang.String,java.lang.Object[])']
IntArrayListTest:testAdd():['IntArrayList:add(int)', 'IntArrayList:size()', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:add(int)', 'IntArrayList:size()', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testBinarySearch():['IntArrayList:binarySearchFromTo(int,int,int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:binarySearchFromTo(int,int,int)', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testClone():['IntArrayList:copy()', 'IntArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', 'IntArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
IntArrayListTest:testElements():['IntArrayList:<init>(int[])', 'IntArrayList:size()', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:elements()', 'IntArrayListTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:elements(int[])', 'IntArrayList:elements()', 'IntArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
IntArrayListTest:testEquals():['IntArrayList:<init>(int[])', 'IntArrayList:<init>()', 'IntArrayList:size()', 'IntArrayList:get(int)', 'IntArrayList:add(int)', 'IntArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', 'IntArrayList:equals(java.lang.Object)', 'IntArrayListTest:assertFalse(boolean)', 'IntArrayList:add(int)', 'IntArrayList:equals(java.lang.Object)', 'IntArrayListTest:assertFalse(boolean)']
IntArrayListTest:testForEach():['IntArrayListTest$1:<init>(org.apache.mahout.math.list.IntArrayListTest)', 'IntArrayList:forEach(org.apache.mahout.math.function.IntProcedure)']
IntArrayListTest:testGetEmpty():['IntArrayList:get(int)']
IntArrayListTest:testGetQuick():['IntArrayList:<init>(int)', 'IntArrayList:getQuick(int)']
IntArrayListTest:testIndexOfFromTo():['IntArrayList:indexOfFromTo(int,int,int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:indexOfFromTo(int,int,int)', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testLastIndexOfFromTo():['IntArrayList:<init>(int)', 'IntArrayList:add(int)', 'IntArrayList:add(int)', 'IntArrayList:add(int)', 'IntArrayList:add(int)', 'IntArrayList:add(int)', 'IntArrayList:lastIndexOf(int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:lastIndexOfFromTo(int,int,int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:lastIndexOf(int)', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testPartFromTo():['IntArrayList:partFromTo(int,int)', 'AbstractIntList:size()', 'IntArrayListTest:assertEquals(long,long)', 'AbstractIntList:get(int)', 'IntArrayListTest:assertEquals(long,long)', 'AbstractIntList:get(int)', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testPartFromToOOB():['IntArrayList:partFromTo(int,int)']
IntArrayListTest:testRemoveAll():['IntArrayList:<init>(int)', 'IntArrayList:add(int)', 'IntArrayList:<init>(int)', 'IntArrayList:add(int)', 'IntArrayList:removeAll(org.apache.mahout.math.list.AbstractIntList)', 'IntArrayList:size()', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:size()', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testReplaceFromToWith():['IntArrayList:add(int)', 'IntArrayList:<init>()', 'IntArrayList:add(int)', 'IntArrayList:add(int)', 'IntArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractIntList,int,int)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testRetainAllSmall():['IntArrayList:<init>()', 'IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:<init>()', 'IntArrayList:add(int)', 'IntArrayList:add(int)', 'IntArrayList:retainAll(org.apache.mahout.math.list.AbstractIntList)', 'IntArrayListTest:assertTrue(boolean)', 'IntArrayList:size()', 'IntArrayList:get(int)', 'IntArrayListTest:assertTrue(boolean)', 'IntArrayList:size()', 'IntArrayListTest:assertEquals(long,long)']
IntArrayListTest:testRetainAllSmaller():['IntArrayList:<init>()', 'IntArrayList:addAllOf(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:<init>()', 'IntArrayList:add(int)', 'IntArrayList:add(int)', 'IntArrayList:retainAll(org.apache.mahout.math.list.AbstractIntList)', 'IntArrayListTest:assertTrue(boolean)', 'IntArrayList:size()', 'IntArrayList:get(int)', 'IntArrayListTest:assertTrue(boolean)']
LogLikelihoodTest:testEntropy():['LogLikelihood:entropy(long[])', 'LogLikelihoodTest:assertEquals(double,double,double)', 'LogLikelihood:entropy(long[])', 'LogLikelihoodTest:assertEquals(double,double,double)', 'LogLikelihood:entropy(long[])', 'LogLikelihoodTest:fail()']
LogLikelihoodTest:testFrequencyComparison():['RandomUtils:getRandom()', 'DenseVector:<init>(int)', 'LogLikelihoodTest$1:<init>(org.apache.mahout.math.stats.LogLikelihoodTest,java.util.Random)', 'DenseVector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:like()', 'Vector:assign(org.apache.mahout.math.Vector)', 'Vector:viewPart(int,int)', 'Vector:assign(double)', 'Vector:viewPart(int,int)', 'Functions:mult(double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:norm(double)', 'Functions:div(double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:norm(double)', 'Functions:div(double)', 'Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'HashMultiset:create()', 'LogLikelihoodTest:sample(org.apache.mahout.math.Vector,java.util.Random)', 'Integer:valueOf(int)', 'Multiset:add(java.lang.Object)', 'HashMultiset:create()', 'LogLikelihoodTest:sample(org.apache.mahout.math.Vector,java.util.Random)', 'Integer:valueOf(int)', 'Multiset:add(java.lang.Object)', 'LogLikelihood:compareFrequencies(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double)', 'List:size()', 'LogLikelihoodTest:assertTrue(boolean)', 'List:isEmpty()', 'LogLikelihoodTest:assertFalse(boolean)', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'LogLikelihood$ScoredItem:getScore()', 'LogLikelihoodTest:assertTrue(boolean)', 'List:get(int)', 'LogLikelihood$ScoredItem:getItem()', 'Integer:intValue()', 'LogLikelihoodTest:assertEquals(long,long)', 'List:get(int)', 'LogLikelihood$ScoredItem:getScore()', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'LogLikelihood$ScoredItem:getScore()', 'LogLikelihoodTest:assertTrue(boolean)', 'LogLikelihood$ScoredItem:getScore()', 'LogLikelihood:compareFrequencies(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double)', 'List:size()', 'LogLikelihoodTest:assertEquals(long,long)', 'List:get(int)', 'LogLikelihood$ScoredItem:getItem()', 'Integer:intValue()', 'LogLikelihoodTest:assertEquals(long,long)', 'List:get(int)', 'LogLikelihood$ScoredItem:getItem()', 'Integer:intValue()', 'LogLikelihoodTest:assertEquals(long,long)', 'LogLikelihood:compareFrequencies(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double)', 'HashMultiset:create()', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'LogLikelihood$ScoredItem:getItem()', 'Multiset:add(java.lang.Object)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Integer:valueOf(int)', 'Multiset:count(java.lang.Object)', 'Integer:valueOf(int)', 'Multiset:count(java.lang.Object)', 'LogLikelihoodTest:assertTrue(java.lang.String,boolean)', 'Multiset:elementSet()', 'Set:size()', 'List:size()', 'LogLikelihoodTest:assertEquals(long,long)', 'List:get(int)', 'LogLikelihood$ScoredItem:getItem()', 'Integer:intValue()', 'LogLikelihoodTest:assertEquals(long,long)', 'List:get(int)', 'LogLikelihood$ScoredItem:getItem()', 'Integer:intValue()', 'LogLikelihoodTest:assertEquals(long,long)', 'List:size()', 'List:get(int)', 'LogLikelihood$ScoredItem:getScore()', 'LogLikelihoodTest:assertTrue(boolean)', 'List:get(int)', 'LogLikelihood$ScoredItem:getScore()', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'LogLikelihood$ScoredItem:getScore()', 'LogLikelihoodTest:assertTrue(boolean)', 'LogLikelihood$ScoredItem:getScore()']
LogLikelihoodTest:testLogLikelihood():['LogLikelihood:logLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'LogLikelihood:logLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'LogLikelihood:logLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'LogLikelihood:logLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'LogLikelihood:logLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'LogLikelihood:logLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)']
LogLikelihoodTest:testRootLogLikelihood():['LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertTrue(boolean)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertTrue(boolean)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)', 'Math:sqrt(double)', 'LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertEquals(double,double,double)']
LogLikelihoodTest:testRootNegativeLLR():['LogLikelihood:rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihoodTest:assertTrue(boolean)']
LongArrayListTest:testAdd():['LongArrayList:add(long)', 'LongArrayList:size()', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:add(long)', 'LongArrayList:size()', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testBinarySearch():['LongArrayList:binarySearchFromTo(long,int,int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:binarySearchFromTo(long,int,int)', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testClone():['LongArrayList:copy()', 'LongArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', 'LongArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
LongArrayListTest:testElements():['LongArrayList:<init>(long[])', 'LongArrayList:size()', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:elements()', 'LongArrayListTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:elements(long[])', 'LongArrayList:elements()', 'LongArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
LongArrayListTest:testEquals():['LongArrayList:<init>(long[])', 'LongArrayList:<init>()', 'LongArrayList:size()', 'LongArrayList:get(int)', 'LongArrayList:add(long)', 'LongArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', 'LongArrayList:equals(java.lang.Object)', 'LongArrayListTest:assertFalse(boolean)', 'LongArrayList:add(long)', 'LongArrayList:equals(java.lang.Object)', 'LongArrayListTest:assertFalse(boolean)']
LongArrayListTest:testForEach():['LongArrayListTest$1:<init>(org.apache.mahout.math.list.LongArrayListTest)', 'LongArrayList:forEach(org.apache.mahout.math.function.LongProcedure)']
LongArrayListTest:testGetEmpty():['LongArrayList:get(int)']
LongArrayListTest:testGetQuick():['LongArrayList:<init>(int)', 'LongArrayList:getQuick(int)']
LongArrayListTest:testIndexOfFromTo():['LongArrayList:indexOfFromTo(long,int,int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:indexOfFromTo(long,int,int)', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testLastIndexOfFromTo():['LongArrayList:<init>(int)', 'LongArrayList:add(long)', 'LongArrayList:add(long)', 'LongArrayList:add(long)', 'LongArrayList:add(long)', 'LongArrayList:add(long)', 'LongArrayList:lastIndexOf(long)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:lastIndexOfFromTo(long,int,int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:lastIndexOf(long)', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testPartFromTo():['LongArrayList:partFromTo(int,int)', 'AbstractLongList:size()', 'LongArrayListTest:assertEquals(long,long)', 'AbstractLongList:get(int)', 'LongArrayListTest:assertEquals(long,long)', 'AbstractLongList:get(int)', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testPartFromToOOB():['LongArrayList:partFromTo(int,int)']
LongArrayListTest:testRemoveAll():['LongArrayList:<init>(int)', 'LongArrayList:add(long)', 'LongArrayList:<init>(int)', 'LongArrayList:add(long)', 'LongArrayList:removeAll(org.apache.mahout.math.list.AbstractLongList)', 'LongArrayList:size()', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:size()', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testReplaceFromToWith():['LongArrayList:add(long)', 'LongArrayList:<init>()', 'LongArrayList:add(long)', 'LongArrayList:add(long)', 'LongArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractLongList,int,int)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testRetainAllSmall():['LongArrayList:<init>()', 'LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:<init>()', 'LongArrayList:add(long)', 'LongArrayList:add(long)', 'LongArrayList:retainAll(org.apache.mahout.math.list.AbstractLongList)', 'LongArrayListTest:assertTrue(boolean)', 'LongArrayList:size()', 'LongArrayList:get(int)', 'LongArrayListTest:assertTrue(boolean)', 'LongArrayList:size()', 'LongArrayListTest:assertEquals(long,long)']
LongArrayListTest:testRetainAllSmaller():['LongArrayList:<init>()', 'LongArrayList:addAllOf(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:<init>()', 'LongArrayList:add(long)', 'LongArrayList:add(long)', 'LongArrayList:retainAll(org.apache.mahout.math.list.AbstractLongList)', 'LongArrayListTest:assertTrue(boolean)', 'LongArrayList:size()', 'LongArrayList:get(int)', 'LongArrayListTest:assertTrue(boolean)']
MahoutTestCase:<init>():['RandomizedTest:<init>()']
MatricesTest:testFunctionalView():['MatricesTest$1:<init>(org.apache.mahout.math.MatricesTest)', 'Matrices:functionalMatrixView(int,int,org.apache.mahout.math.function.IntIntFunction)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'MatricesTest:assertEquals(double,double,double)']
MatricesTest:testGaussianView():['Matrices:gaussianView(int,int,long)', 'Matrices:gaussianView(int,int,long)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'MatricesTest:assertEquals(double,double,double)']
MatricesTest:testSymmetricUniformView():['Matrices:symmetricUniformView(int,int,int)', 'Matrices:symmetricUniformView(int,int,int)', 'Matrix:numRows()', 'Matrix:numCols()', 'Matrix:getQuick(int,int)', 'MatricesTest:assertTrue(boolean)', 'Matrix:getQuick(int,int)', 'MatricesTest:assertTrue(boolean)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'MatricesTest:assertEquals(double,double,double)']
MatricesTest:testTransposeView():['Matrices:gaussianView(int,int,long)', 'DenseMatrix:<init>(int,int)', 'DenseMatrix:assign(org.apache.mahout.math.Matrix)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'Matrices:transposedView(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'MatricesTest:assertEquals(double,double,double)']
MatricesTest:testUniformView():['Matrices:uniformView(int,int,int)', 'Matrices:uniformView(int,int,int)', 'Matrix:numRows()', 'Matrix:numCols()', 'Matrix:getQuick(int,int)', 'MatricesTest:assertTrue(boolean)', 'Matrix:getQuick(int,int)', 'MatricesTest:assertTrue(boolean)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'MatricesTest:assertEquals(double,double,double)']
MatricesTest:testViewDenseSparseReporting():['SparseMatrix:<init>(int,int)', 'Matrix:set(int,int,double)', 'Matrices:transposedView(org.apache.mahout.math.Matrix)', 'Matrix:viewColumn(int)', 'Vector:isDense()', 'Matrix:viewRow(int)', 'Vector:isDense()', 'MatricesTest:assertTrue(boolean)', 'Matrix:viewRow(int)', 'Vector:isDense()', 'Matrix:viewColumn(int)', 'Vector:isDense()', 'MatricesTest:assertTrue(boolean)', 'DenseMatrix:<init>(int,int)', 'Matrix:set(int,int,double)', 'Matrices:transposedView(org.apache.mahout.math.Matrix)', 'Matrix:viewColumn(int)', 'Vector:isDense()', 'MatricesTest:assertTrue(boolean)', 'Matrix:viewRow(int)', 'Vector:isDense()', 'MatricesTest:assertTrue(boolean)']
MatrixTest:testAggregate():['Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'MatrixTest$3:<init>(org.apache.mahout.math.MatrixTest)', 'Matrix:aggregateRows(org.apache.mahout.math.function.VectorFunction)', 'Vector:zSum()', 'MatrixTest:assertEquals(double,double,double)']
MatrixTest:testAggregateCols():['MatrixTest$2:<init>(org.apache.mahout.math.MatrixTest)', 'Matrix:aggregateColumns(org.apache.mahout.math.function.VectorFunction)', 'Matrix:numCols()', 'Matrix:viewColumn(int)', 'Vector:zSum()', 'Vector:get(int)', 'MatrixTest:assertEquals(double,double,double)']
MatrixTest:testAggregateRows():['MatrixTest$1:<init>(org.apache.mahout.math.MatrixTest)', 'Matrix:aggregateRows(org.apache.mahout.math.function.VectorFunction)', 'Matrix:numRows()', 'Matrix:viewRow(int)', 'Vector:zSum()', 'Vector:get(int)', 'MatrixTest:assertEquals(double,double,double)']
MatrixTest:testAssignColumn():['DenseVector:<init>(double[])', 'Matrix:assignColumn(int,org.apache.mahout.math.Vector)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testAssignColumnCardinality():['DenseVector:<init>(double[])', 'Matrix:assignColumn(int,org.apache.mahout.math.Vector)']
MatrixTest:testAssignDouble():['Matrix:assign(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testAssignDoubleArrayArray():['Matrix:assign(double[][])', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testAssignDoubleArrayArrayCardinality():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:assign(double[][])']
MatrixTest:testAssignMatrix():['Matrix:like()', 'Matrix:assign(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testAssignMatrixBinaryFunction():['Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testAssignMatrixBinaryFunctionCardinality():['Matrix:transpose()', 'Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)']
MatrixTest:testAssignMatrixCardinality():['Matrix:transpose()', 'Matrix:assign(org.apache.mahout.math.Matrix)']
MatrixTest:testAssignRow():['DenseVector:<init>(double[])', 'Matrix:assignRow(int,org.apache.mahout.math.Vector)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testAssignRowCardinality():['DenseVector:<init>(double[])', 'Matrix:assignRow(int,org.apache.mahout.math.Vector)']
MatrixTest:testAssignUnaryFunction():['Functions:mult(double)', 'Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testCardinality():['Matrix:rowSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:columnSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)']
MatrixTest:testClone():['MatrixTest:matrixFactory(double[][])', 'Matrix:clone()', 'Matrix:set(int,int,double)', 'Matrix:get(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testColumnView():['Matrix:rowSize()', 'Matrix:viewColumn(int)', 'Vector:size()', 'MatrixTest:assertEquals(long,long)', 'Matrix:rowSize()', 'Matrix:viewColumn(int)', 'Vector:size()', 'MatrixTest:assertEquals(long,long)', 'RandomUtils:getRandom()', 'Matrix:columnSize()', 'Matrix:columnSize()', 'Random:nextInt(int)', 'Matrix:get(int,int)', 'Random:nextGaussian()', 'Matrix:viewColumn(int)', 'Vector:set(int,double)', 'Matrix:get(int,int)', 'MatrixTest:assertEquals(double,double,double)', 'Matrix:viewColumn(int)', 'Vector:get(int)', 'MatrixTest:assertEquals(double,double,double)', 'Matrix:set(int,int,double)', 'Matrix:get(int,int)', 'MatrixTest:assertEquals(double,double,double)', 'Matrix:viewColumn(int)', 'Vector:get(int)', 'MatrixTest:assertEquals(double,double,double)']
MatrixTest:testCopy():['Matrix:clone()', 'Object:getClass()', 'Object:getClass()', 'MatrixTest:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testDeterminant():['MatrixTest:matrixFactory(double[][])', 'Matrix:determinant()', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testDivide():['Matrix:divide(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testGet():['Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:get(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testGetIndexOver():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:get(int,int)']
MatrixTest:testGetIndexUnder():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:get(int,int)']
MatrixTest:testGetQuick():['Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testIterate():['Matrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:vector()', 'MatrixSlice:index()', 'Matrix:viewColumn(int)', 'MatrixSlice:index()', 'Matrix:viewRow(int)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:toString()', 'MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)']
MatrixTest:testLabelBindingSerialization():['MatrixTest:matrixFactory(double[][])', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertNull(java.lang.String,java.lang.Object)', 'Matrix:getColumnLabelBindings()', 'MatrixTest:assertNull(java.lang.String,java.lang.Object)', 'HashMap:<init>()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setRowLabelBindings(java.util.Map)', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', 'HashMap:<init>()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setColumnLabelBindings(java.util.Map)', 'Matrix:getColumnLabelBindings()', 'MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)']
MatrixTest:testLabelBindings():['MatrixTest:matrixFactory(double[][])', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertNull(java.lang.String,java.lang.Object)', 'Matrix:getColumnLabelBindings()', 'MatrixTest:assertNull(java.lang.String,java.lang.Object)', 'HashMap:<init>()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setRowLabelBindings(java.util.Map)', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', 'HashMap:<init>()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setColumnLabelBindings(java.util.Map)', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', 'Matrix:get(int,int)', 'Matrix:get(java.lang.String,java.lang.String)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)', 'Matrix:set(java.lang.String,double[])', 'Matrix:get(int,int)', 'Matrix:get(java.lang.String,java.lang.String)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testLike():['Matrix:like()', 'Object:getClass()', 'Object:getClass()', 'MatrixTest:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', 'Matrix:rowSize()', 'Matrix:rowSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:columnSize()', 'Matrix:columnSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)']
MatrixTest:testLikeIntInt():['Matrix:like(int,int)', 'Object:getClass()', 'Object:getClass()', 'MatrixTest:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', 'Matrix:rowSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:columnSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)']
MatrixTest:testMatrixViewBug():['Matrix:viewPart(int,int,int,int)', 'Matrix:viewPart(int,int,int,int)', 'Matrix:zSum()', 'MatrixTest:assertEquals(double,double,double)']
MatrixTest:testMinus():['Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testMinusCardinality():['Matrix:transpose()', 'Matrix:minus(org.apache.mahout.math.Matrix)']
MatrixTest:testPlusDouble():['Matrix:plus(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testPlusMatrix():['Matrix:plus(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testPlusMatrixCardinality():['Matrix:transpose()', 'Matrix:plus(org.apache.mahout.math.Matrix)']
MatrixTest:testRowView():['Matrix:columnSize()', 'Matrix:viewRow(int)', 'Vector:size()', 'MatrixTest:assertEquals(long,long)', 'Matrix:columnSize()', 'Matrix:viewRow(int)', 'Vector:size()', 'MatrixTest:assertEquals(long,long)', 'RandomUtils:getRandom()', 'Matrix:rowSize()', 'Matrix:columnSize()', 'Random:nextInt(int)', 'Matrix:get(int,int)', 'Random:nextGaussian()', 'Matrix:viewRow(int)', 'Vector:set(int,double)', 'Matrix:get(int,int)', 'MatrixTest:assertEquals(double,double,double)', 'Matrix:viewRow(int)', 'Vector:get(int)', 'MatrixTest:assertEquals(double,double,double)', 'Matrix:set(int,int,double)', 'Matrix:get(int,int)', 'MatrixTest:assertEquals(double,double,double)', 'Matrix:viewRow(int)', 'Vector:get(int)', 'MatrixTest:assertEquals(double,double,double)']
MatrixTest:testSetOver():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:set(int,int,double)']
MatrixTest:testSetQuick():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:setQuick(int,int,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testSetUnder():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:set(int,int,double)']
MatrixTest:testSettingLabelBindings():['MatrixTest:matrixFactory(double[][])', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertNull(java.lang.String,java.lang.Object)', 'Matrix:getColumnLabelBindings()', 'MatrixTest:assertNull(java.lang.String,java.lang.Object)', 'Matrix:set(java.lang.String,java.lang.String,int,int,double)', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertNotNull(java.lang.String,java.lang.Object)', 'Matrix:getRowLabelBindings()', 'MatrixTest:assertNotNull(java.lang.String,java.lang.Object)', 'Matrix:getRowLabelBindings()', 'Map:get(java.lang.Object)', 'Integer:intValue()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:getColumnLabelBindings()', 'Map:get(java.lang.Object)', 'Integer:intValue()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:get(int,int)', 'Matrix:get(java.lang.String,java.lang.String)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)', 'Matrix:get(java.lang.String,java.lang.String)']
MatrixTest:testSize():['Matrix:getNumNondefaultElements()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'MatrixTest:assertEquals(java.lang.String,long,long)']
MatrixTest:testTimesDouble():['Matrix:times(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testTimesMatrix():['Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:rowSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'DenseMatrix:<init>(double[][])', 'DenseMatrix:times(double)', 'Matrix:numCols()', 'Matrix:numRows()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:toString()', 'Matrix:get(int,int)', 'Matrix:get(int,int)', 'Math:abs(double)', 'MatrixTest:assertTrue(java.lang.String,boolean)', 'DenseMatrix:<init>(int,int)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)']
MatrixTest:testTimesMatrixCardinality():['Matrix:like(int,int)', 'Matrix:times(org.apache.mahout.math.Matrix)']
MatrixTest:testTimesSquaredTimesVector():['DenseVector:<init>(double[])', 'Matrix:timesSquared(org.apache.mahout.math.Vector)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Vector)', 'Matrix:times(org.apache.mahout.math.Vector)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:toString()', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'MatrixTest:assertTrue(java.lang.String,boolean)']
MatrixTest:testTimesVector():['DenseVector:<init>(double[])', 'Matrix:times(org.apache.mahout.math.Vector)', 'DenseVector:<init>(double[])', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(java.lang.Object)', 'StringBuilder:toString()', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'MatrixTest:assertTrue(java.lang.String,boolean)', 'Matrix:times(org.apache.mahout.math.Vector)']
MatrixTest:testTranspose():['Matrix:transpose()', 'Matrix:columnSize()', 'Matrix:rowSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testViewColumn():['Matrix:viewColumn(int)', 'Vector:getNumNondefaultElements()', 'MatrixTest:assertEquals(java.lang.String,long,long)']
MatrixTest:testViewColumnIndexOver():['Matrix:viewColumn(int)']
MatrixTest:testViewColumnIndexUnder():['Matrix:viewColumn(int)']
MatrixTest:testViewPart():['Matrix:viewPart(int[],int[])', 'Matrix:rowSize()', 'MatrixTest:assertEquals(long,long)', 'Matrix:columnSize()', 'MatrixTest:assertEquals(long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:get(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testViewPartCardinality():['Matrix:viewPart(int[],int[])']
MatrixTest:testViewPartIndexOver():['Matrix:viewPart(int[],int[])']
MatrixTest:testViewPartIndexUnder():['Matrix:viewPart(int[],int[])']
MatrixTest:testViewRow():['Matrix:viewRow(int)', 'Vector:getNumNondefaultElements()', 'MatrixTest:assertEquals(java.lang.String,long,long)', 'SparseMatrix:<init>(int,int)', 'Matrix:viewRow(int)', 'Vector:assign(double)', 'Vector:getQuick(int)', 'Matrix:getQuick(int,int)', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixTest:testViewRowIndexOver():['Matrix:viewRow(int)']
MatrixTest:testViewRowIndexUnder():['Matrix:viewRow(int)']
MatrixTest:testZSum():['Matrix:zSum()', 'MatrixTest:assertEquals(java.lang.String,double,double,double)']
MatrixVectorViewTest:testColumnView():['DenseMatrix:<init>(int,int)', 'Matrix:viewColumn(int)', 'Vector:cross(org.apache.mahout.math.Vector)', 'Matrix:numRows()', 'Matrix:numRows()', 'MatrixVectorViewTest:assertEquals(long,long)', 'Matrix:numRows()', 'Matrix:numCols()', 'MatrixVectorViewTest:assertEquals(long,long)']
MatrixVectorViewTest:testIndexRange():['DenseMatrix:<init>(int,int)', 'Functions:random()', 'DenseMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix:viewColumn(int)', 'MatrixVectorViewTest:fail(java.lang.String)', 'IllegalArgumentException:getMessage()', 'String:startsWith(java.lang.String)', 'MatrixVectorViewTest:assertTrue(boolean)', 'Matrix:viewRow(int)', 'MatrixVectorViewTest:fail(java.lang.String)', 'IllegalArgumentException:getMessage()', 'String:startsWith(java.lang.String)', 'MatrixVectorViewTest:assertTrue(boolean)']
MersenneTwisterTest:test10001():['MersenneTwister:<init>()', 'MersenneTwister:setReferenceSeed(int)', 'MersenneTwister:nextInt()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'MersenneTwisterTest:assertEquals(java.lang.String,long,long)', 'MersenneTwister:setReferenceSeed(int)', 'Double:valueOf(double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Double:doubleValue()', 'MersenneTwister:nextInt()', 'MersenneTwisterTest:toDouble(long)', 'MersenneTwisterTest:assertEquals(java.lang.String,double,double,double)']
MersenneTwisterTest:testDateConstructor():['MersenneTwister:<init>(int)', 'Date:<init>(long)', 'MersenneTwister:<init>(java.util.Date)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'RandomEngine:nextInt()', 'RandomEngine:nextInt()', 'MersenneTwisterTest:assertEquals(java.lang.String,long,long)']
MersenneTwisterTest:testRegression():['MersenneTwister:<init>(int)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'RandomEngine:nextDouble()', 'MersenneTwisterTest:assertEquals(java.lang.String,double,double,double)']
MultiNormalTest:testDiagonal():['DenseVector:<init>(double[])', 'DenseVector:<init>(double[])', 'MultiNormal:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'OnlineSummarizer:<init>()', 'OnlineSummarizer:<init>()', 'OnlineSummarizer:<init>()', 'OnlineSummarizer:<init>()', 'OnlineSummarizer:<init>()', 'OnlineSummarizer:<init>()', 'MultiNormal:sample()', 'Vector:get(int)', 'DenseVector:get(int)', 'OnlineSummarizer:add(double)', 'Vector:get(int)', 'DenseVector:get(int)', 'Vector:get(int)', 'DenseVector:get(int)', 'OnlineSummarizer:add(double)', 'OnlineSummarizer:getMean()', 'OnlineSummarizer:getSD()', 'MultiNormalTest:assertEquals(double,double,double)', 'OnlineSummarizer:getMean()', 'OnlineSummarizer:getSD()', 'MultiNormalTest:assertEquals(double,double,double)']
MultiNormalTest:testRadius():['DenseVector:<init>(int)', 'MultiNormal:<init>(double,org.apache.mahout.math.Vector)', 'OnlineSummarizer:<init>()', 'MultiNormal:sample()', 'Vector:norm(double)', 'Math:sqrt(double)', 'OnlineSummarizer:add(double)', 'OnlineSummarizer:getMean()', 'MultiNormalTest:assertEquals(double,double,double)']
MultinomialTest:testDeleteAndUpdate():['RandomUtils:getRandom()', 'Multinomial:<init>()', 'Multinomial:getWeight()', 'MultinomialTest:assertEquals(double,double,double)', 'Random:nextDouble()', 'Integer:valueOf(int)', 'Multinomial:add(java.lang.Object,double)', 'Multinomial:getWeight()', 'MultinomialTest:assertEquals(double,double,double)', 'Multinomial:getWeight()', 'MultinomialTest:assertEquals(double,double,double)', 'MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', 'Integer:valueOf(int)', 'Multinomial:delete(java.lang.Object)', 'Integer:valueOf(int)', 'Multinomial:set(java.lang.Object,double)', 'MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', 'Multinomial:getWeight()', 'MultinomialTest:assertEquals(double,double,double)', 'Integer:valueOf(int)', 'Multinomial:getWeight(java.lang.Object)', 'MultinomialTest:assertEquals(double,double,double)', 'Integer:valueOf(int)', 'Multinomial:getProbability(java.lang.Object)', 'MultinomialTest:assertEquals(double,double,double)', 'Integer:valueOf(int)', 'Multinomial:set(java.lang.Object,double)', 'Multinomial:getWeight()', 'MultinomialTest:assertEquals(double,double,double)', 'Integer:valueOf(int)', 'Multinomial:getWeight(java.lang.Object)', 'MultinomialTest:assertEquals(double,double,double)', 'Integer:valueOf(int)', 'Multinomial:getProbability(java.lang.Object)', 'MultinomialTest:assertEquals(double,double,double)', 'MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', 'Integer:valueOf(int)', 'Multinomial:getWeight(java.lang.Object)', 'MultinomialTest:assertEquals(double,double,double)']
MultinomialTest:testEvenSplit():['HashMultiset:create()', 'String:valueOf(int)', 'Multiset:add(java.lang.Object)', 'Multinomial:<init>(com.google.common.collect.Multiset)', 'HashMultiset:create()', 'Multinomial:sample(double)', 'Multiset:add(java.lang.Object)', 'Multinomial:sample(double)', 'Multiset:add(java.lang.Object)', 'Multinomial:sample(double)', 'Multiset:add(java.lang.Object)', 'Multiset:elementSet()', 'Set:size()', 'MultinomialTest:assertEquals(long,long)', 'Multiset:elementSet()', 'Set:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Multiset:count(java.lang.Object)', 'MultinomialTest:assertEquals(double,double,double)', 'Multinomial:sample(double)', 'Multiset:contains(java.lang.Object)', 'MultinomialTest:assertTrue(boolean)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)']
MultinomialTest:testInsert():['RandomUtils:getRandom()', 'Multinomial:<init>()', 'Random:nextDouble()', 'Integer:valueOf(int)', 'Multinomial:add(java.lang.Object,double)', 'MultinomialTest:checkSelfConsistent(org.apache.mahout.math.random.Multinomial)', 'Integer:valueOf(int)', 'Multinomial:getWeight(java.lang.Object)', 'MultinomialTest:assertEquals(double,double,double)']
MultinomialTest:testNoNullValuesAllowed():['Multinomial:<init>()', 'Multinomial:add(java.lang.Object,double)']
MultinomialTest:testNoValues():['HashMultiset:create()', 'Multinomial:<init>(com.google.common.collect.Multiset)']
MultinomialTest:testPrime():['Lists:newArrayList()', 'List:add(java.lang.Object)', 'HashMultiset:create()', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Multiset:add(java.lang.Object)', 'Multinomial:<init>(com.google.common.collect.Multiset)', 'Multinomial:<init>(com.google.common.collect.Multiset)', 'Multinomial:<init>(com.google.common.collect.Multiset)', 'HashMultiset:create()', 'Multinomial:sample(double)', 'Multiset:add(java.lang.Object)', 'Multinomial:sample(double)', 'Multiset:add(java.lang.Object)', 'Multinomial:sample(double)', 'Multiset:add(java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multiset:elementSet()', 'Set:size()', 'MultinomialTest:assertEquals(long,long)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)', 'Multiset:elementSet()', 'Set:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Map:get(java.lang.Object)', 'Integer:intValue()', 'Multiset:count(java.lang.Object)', 'Math:abs(int)', 'MultinomialTest:assertTrue(boolean)', 'Multinomial:sample(double)', 'Multiset:contains(java.lang.Object)', 'MultinomialTest:assertTrue(boolean)', 'Multinomial:sample(double)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)']
MultinomialTest:testSetZeroWhileIterating():['Multinomial:<init>()', 'Integer:valueOf(int)', 'Multinomial:add(java.lang.Object,double)', 'Multinomial:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Multinomial:set(java.lang.Object,double)']
MultinomialTest:testSingleton():['HashMultiset:create()', 'Multiset:add(java.lang.Object)', 'Multinomial:<init>(com.google.common.collect.Multiset)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)', 'Multinomial:sample(double)', 'MultinomialTest:assertEquals(java.lang.Object,java.lang.Object)']
MurmurHash3Test:testCorrectValues():['String:getBytes(java.lang.String)', 'System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'MurmurHash3:murmurhash3x8632(byte[],int,int,int)', 'MurmurHash3Test:assertEquals(long,long)']
MurmurHashTest:testChangingKey():['MurmurHashTest:setKey(byte[],int)', 'MurmurHash:hash(byte[],int)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Assert:assertEquals(java.lang.String,long,long)']
MurmurHashTest:testChangingKeyLength():['MurmurHashTest:setKey(byte[],int)', 'MurmurHash:hash(byte[],int)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Assert:assertEquals(java.lang.String,long,long)']
MurmurHashTest:testChangingSeed():['MurmurHash:hash(byte[],int)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Assert:assertEquals(java.lang.String,long,long)']
MurmurHashTest:testForLotsOfChange32():['String:getBytes(java.nio.charset.Charset)', 'MurmurHash:hash(byte[],int)', 'String:getBytes(java.nio.charset.Charset)', 'MurmurHash:hash(byte[],int)', 'Integer:bitCount(int)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Assert:assertTrue(java.lang.String,boolean)']
MurmurHashTest:testForLotsOfChange64():['String:getBytes(java.nio.charset.Charset)', 'MurmurHash:hash64A(byte[],int)', 'String:getBytes(java.nio.charset.Charset)', 'MurmurHash:hash64A(byte[],int)', 'Long:bitCount(long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Assert:assertTrue(java.lang.String,boolean)']
MurmurHashTest:testHash64():['String:getBytes(java.nio.charset.Charset)', 'MurmurHash:hash64A(byte[],int)', 'Assert:assertEquals(long,long)', 'String:getBytes(java.nio.charset.Charset)', 'MurmurHash:hash64A(byte[],int)', 'Assert:assertEquals(long,long)', 'String:getBytes(java.nio.charset.Charset)', 'MurmurHash:hash64A(byte[],int)', 'Assert:assertEquals(long,long)']
NegativeBinomialTest:testDistributionFunctions():['Resources:getResource(java.lang.String)', 'Resources:newReaderSupplier(java.net.URL,java.nio.charset.Charset)', 'CharStreams:readLines(com.google.common.io.InputSupplier)', 'List:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Splitter:split(java.lang.CharSequence)', 'Iterables:get(java.lang.Iterable,int)', 'Integer:parseInt(java.lang.String)', 'Iterables:get(java.lang.Iterable,int)', 'Double:parseDouble(java.lang.String)', 'Iterables:get(java.lang.Iterable,int)', 'Integer:parseInt(java.lang.String)', 'Iterables:get(java.lang.Iterable,int)', 'Double:parseDouble(java.lang.String)', 'Iterables:get(java.lang.Iterable,int)', 'Double:parseDouble(java.lang.String)', 'RandomUtils:getRandom()', 'NegativeBinomial:<init>(int,double,java.util.Random)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:append(double)', 'StringBuilder:append(char)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'NegativeBinomial:cdf(int)', 'NegativeBinomialTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:append(double)', 'StringBuilder:append(char)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'NegativeBinomial:pdf(int)', 'NegativeBinomialTest:assertEquals(java.lang.String,double,double,double)']
NormalTest:testCdf():['RandomUtils:getRandom()', 'Normal:<init>(double,double,java.util.Random)', 'DistributionChecks:checkCdf(double,double,org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double[])', 'Random:nextGaussian()', 'Random:nextGaussian()', 'Math:exp(double)']
NormalTest:testOffset():['OnlineSummarizer:<init>()', 'Normal:<init>(double,double)', 'Sampler:sample()', 'Double:doubleValue()', 'OnlineSummarizer:add(double)', 'OnlineSummarizer:getMean()', 'Double:valueOf(double)', 'OnlineSummarizer:getSD()', 'Double:valueOf(double)', 'String:format(java.lang.String,java.lang.Object[])', 'OnlineSummarizer:getMean()', 'OnlineSummarizer:getSD()', 'NormalTest:assertEquals(java.lang.String,double,double,double)', 'OnlineSummarizer:getSD()', 'NormalTest:assertEquals(double,double,double)']
NormalTest:testSample():['Normal:<init>()', 'Sampler:sample()', 'Double:doubleValue()', 'Arrays:sort(double[])', 'RandomUtils:getRandom()', 'RandomWrapper:getRandomGenerator()', 'NormalDistribution:<init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)', 'NormalDistribution:inverseCumulativeProbability(double)', 'NormalTest:assertEquals(java.lang.String,double,double,double)']
NormalTest:testSetState():['RandomUtils:getRandom()', 'Normal:<init>(double,double,java.util.Random)', 'Normal:setState(double,double)', 'DistributionChecks:checkDistribution(org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double,double,int)']
NormalTest:testToString():['Normal:<init>(double,double,java.util.Random)', 'Normal:toString()', 'NormalTest:assertEquals(java.lang.Object,java.lang.Object)']
OnlineExponentialAverageTest:testAverage():['OnlineExponentialAverage:<init>(double)', 'OnlineExponentialAverage:add(double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OnlineExponentialAverage:mean()', 'OnlineExponentialAverageTest:assertEquals(java.lang.String,double,double,double)']
OnlineExponentialAverageTest:testRate():['RandomUtils:getRandom()', 'Poisson:<init>(double,java.util.Random)', 'Random:nextDouble()', 'Poisson:nextInt(double)', 'OnlineExponentialAverage:<init>(double)', 'OnlineExponentialAverage:add(double,double)', 'OnlineExponentialAverage:meanRate()', 'OnlineExponentialAverageTest:assertEquals(java.lang.String,double,double,double)']
OnlineSummarizerTest:testStats():['PrintStream:printf(java.lang.String,java.lang.Object[])', 'OnlineSummarizerTest:normal(int)', 'OnlineSummarizerTest:check(double[])', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'OnlineSummarizerTest:exp(int)', 'OnlineSummarizerTest:check(double[])', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'OnlineSummarizerTest:gamma(int,double)', 'OnlineSummarizerTest:check(double[])']
OpenByteByteHashMapTest:testAdjustOrPutValue():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:adjustOrPutValue(byte,byte,byte)', 'OpenByteByteHashMap:get(byte)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMap:adjustOrPutValue(byte,byte,byte)', 'OpenByteByteHashMap:get(byte)', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testClear():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMap:clear()', 'OpenByteByteHashMap:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMap:get(byte)', 'OpenByteByteHashMapTest:assertEquals(double,double,double)']
OpenByteByteHashMapTest:testClone():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:clone()', 'OpenByteByteHashMap:clear()', 'OpenByteByteHashMap:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testConstructors():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMapTest:assertEquals(double,double,double)', 'OpenByteByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteByteHashMap:<init>(int)', 'OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMapTest:assertEquals(double,double,double)', 'OpenByteByteHashMapTest:assertEquals(double,double,double)', 'OpenByteByteHashMap:<init>(int,double,double)', 'OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMapTest:assertEquals(double,double,double)', 'OpenByteByteHashMapTest:assertEquals(double,double,double)']
OpenByteByteHashMapTest:testContainValue():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:containsValue(byte)', 'OpenByteByteHashMapTest:assertTrue(boolean)', 'OpenByteByteHashMap:containsValue(byte)', 'OpenByteByteHashMapTest:assertFalse(boolean)']
OpenByteByteHashMapTest:testContainsKey():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:containsKey(byte)', 'OpenByteByteHashMapTest:assertTrue(boolean)', 'OpenByteByteHashMap:containsKey(byte)', 'OpenByteByteHashMapTest:assertFalse(boolean)']
OpenByteByteHashMapTest:testCopy():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:copy()', 'OpenByteByteHashMap:clear()', 'OpenByteByteHashMap:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testEnsureCapacity():['OpenByteByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteByteHashMap:ensureCapacity(int)', 'OpenByteByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testEquals():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:removeKey(byte)', 'OpenByteByteHashMap:copy()', 'OpenByteByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteByteHashMap:equals(java.lang.Object)', 'OpenByteByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteByteHashMapTest:assertFalse(boolean)', 'OpenByteByteHashMap:equals(java.lang.Object)', 'OpenByteByteHashMapTest:assertFalse(boolean)', 'OpenByteByteHashMap:removeKey(byte)', 'OpenByteByteHashMap:equals(java.lang.Object)', 'OpenByteByteHashMapTest:assertFalse(boolean)', 'OpenByteByteHashMap:equals(java.lang.Object)', 'OpenByteByteHashMapTest:assertFalse(boolean)']
OpenByteByteHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:removeKey(byte)', 'OpenByteByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteByteHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteByteHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:removeKey(byte)', 'OpenByteByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest,java.util.List)', 'OpenByteByteHashMap:forEachPair(org.apache.mahout.math.function.ByteByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenByteByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest,java.util.List)', 'OpenByteByteHashMap:forEachPair(org.apache.mahout.math.function.ByteByteProcedure)', 'List:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testGet():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:get(byte)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMap:get(byte)', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testKeys():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'ByteArrayList:<init>()', 'OpenByteByteHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'OpenByteByteHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteByteHashMapTest:testKeysSortedByValue():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteByteHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteByteHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteByteHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:removeKey(byte)', 'OpenByteByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteByteHashMapTest)', 'OpenByteByteHashMap:pairsMatching(org.apache.mahout.math.function.ByteByteProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:sort()', 'ByteArrayList:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testPairsSortedByKey():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'ByteArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenByteByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:clear()', 'ByteArrayList:clear()', 'OpenByteByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteByteHashMapTest:testValues():['OpenByteByteHashMap:<init>()', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:put(byte,byte)', 'OpenByteByteHashMap:removeKey(byte)', 'ByteArrayList:<init>(int)', 'OpenByteByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteByteHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testAdjustOrPutValue():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:adjustOrPutValue(byte,char,char)', 'OpenByteCharHashMap:get(byte)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMap:adjustOrPutValue(byte,char,char)', 'OpenByteCharHashMap:get(byte)', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testClear():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMap:clear()', 'OpenByteCharHashMap:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMap:get(byte)', 'OpenByteCharHashMapTest:assertEquals(double,double,double)']
OpenByteCharHashMapTest:testClone():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:clone()', 'OpenByteCharHashMap:clear()', 'OpenByteCharHashMap:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testConstructors():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMapTest:assertEquals(double,double,double)', 'OpenByteCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteCharHashMap:<init>(int)', 'OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMapTest:assertEquals(double,double,double)', 'OpenByteCharHashMapTest:assertEquals(double,double,double)', 'OpenByteCharHashMap:<init>(int,double,double)', 'OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMapTest:assertEquals(double,double,double)', 'OpenByteCharHashMapTest:assertEquals(double,double,double)']
OpenByteCharHashMapTest:testContainValue():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:containsValue(char)', 'OpenByteCharHashMapTest:assertTrue(boolean)', 'OpenByteCharHashMap:containsValue(char)', 'OpenByteCharHashMapTest:assertFalse(boolean)']
OpenByteCharHashMapTest:testContainsKey():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:containsKey(byte)', 'OpenByteCharHashMapTest:assertTrue(boolean)', 'OpenByteCharHashMap:containsKey(byte)', 'OpenByteCharHashMapTest:assertFalse(boolean)']
OpenByteCharHashMapTest:testCopy():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:copy()', 'OpenByteCharHashMap:clear()', 'OpenByteCharHashMap:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testEnsureCapacity():['OpenByteCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteCharHashMap:ensureCapacity(int)', 'OpenByteCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testEquals():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:removeKey(byte)', 'OpenByteCharHashMap:copy()', 'OpenByteCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteCharHashMap:equals(java.lang.Object)', 'OpenByteCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteCharHashMapTest:assertFalse(boolean)', 'OpenByteCharHashMap:equals(java.lang.Object)', 'OpenByteCharHashMapTest:assertFalse(boolean)', 'OpenByteCharHashMap:removeKey(byte)', 'OpenByteCharHashMap:equals(java.lang.Object)', 'OpenByteCharHashMapTest:assertFalse(boolean)', 'OpenByteCharHashMap:equals(java.lang.Object)', 'OpenByteCharHashMapTest:assertFalse(boolean)']
OpenByteCharHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:removeKey(byte)', 'OpenByteCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteCharHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteCharHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:removeKey(byte)', 'OpenByteCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest,java.util.List)', 'OpenByteCharHashMap:forEachPair(org.apache.mahout.math.function.ByteCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenByteCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest,java.util.List)', 'OpenByteCharHashMap:forEachPair(org.apache.mahout.math.function.ByteCharProcedure)', 'List:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testGet():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:get(byte)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMap:get(byte)', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testKeys():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'ByteArrayList:<init>()', 'OpenByteCharHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'OpenByteCharHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteCharHashMapTest:testKeysSortedByValue():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteCharHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteCharHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteCharHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'CharArrayList:<init>()', 'OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:removeKey(byte)', 'OpenByteCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteCharHashMapTest)', 'OpenByteCharHashMap:pairsMatching(org.apache.mahout.math.function.ByteCharProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', 'ByteArrayList:sort()', 'CharArrayList:sort()', 'ByteArrayList:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testPairsSortedByKey():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'ByteArrayList:<init>()', 'CharArrayList:<init>()', 'OpenByteCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', 'ByteArrayList:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:clear()', 'CharArrayList:clear()', 'OpenByteCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteCharHashMapTest:testValues():['OpenByteCharHashMap:<init>()', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:put(byte,char)', 'OpenByteCharHashMap:removeKey(byte)', 'CharArrayList:<init>(int)', 'OpenByteCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenByteCharHashMapTest:assertEquals(long,long)']
OpenByteDoubleHashMapTest:testAdjustOrPutValue():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:adjustOrPutValue(byte,double,double)', 'OpenByteDoubleHashMap:get(byte)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'OpenByteDoubleHashMap:adjustOrPutValue(byte,double,double)', 'OpenByteDoubleHashMap:get(byte)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
OpenByteDoubleHashMapTest:testClear():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'OpenByteDoubleHashMap:clear()', 'OpenByteDoubleHashMap:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'OpenByteDoubleHashMap:get(byte)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
OpenByteDoubleHashMapTest:testClone():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:clone()', 'OpenByteDoubleHashMap:clear()', 'OpenByteDoubleHashMap:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)']
OpenByteDoubleHashMapTest:testConstructors():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteDoubleHashMap:<init>(int)', 'OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'OpenByteDoubleHashMap:<init>(int,double,double)', 'OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
OpenByteDoubleHashMapTest:testContainValue():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:containsValue(double)', 'OpenByteDoubleHashMapTest:assertTrue(boolean)', 'OpenByteDoubleHashMap:containsValue(double)', 'OpenByteDoubleHashMapTest:assertFalse(boolean)']
OpenByteDoubleHashMapTest:testContainsKey():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:containsKey(byte)', 'OpenByteDoubleHashMapTest:assertTrue(boolean)', 'OpenByteDoubleHashMap:containsKey(byte)', 'OpenByteDoubleHashMapTest:assertFalse(boolean)']
OpenByteDoubleHashMapTest:testCopy():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:copy()', 'OpenByteDoubleHashMap:clear()', 'OpenByteDoubleHashMap:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)']
OpenByteDoubleHashMapTest:testEnsureCapacity():['OpenByteDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteDoubleHashMap:ensureCapacity(int)', 'OpenByteDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteDoubleHashMapTest:assertEquals(long,long)']
OpenByteDoubleHashMapTest:testEquals():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:removeKey(byte)', 'OpenByteDoubleHashMap:copy()', 'OpenByteDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteDoubleHashMap:equals(java.lang.Object)', 'OpenByteDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteDoubleHashMapTest:assertFalse(boolean)', 'OpenByteDoubleHashMap:equals(java.lang.Object)', 'OpenByteDoubleHashMapTest:assertFalse(boolean)', 'OpenByteDoubleHashMap:removeKey(byte)', 'OpenByteDoubleHashMap:equals(java.lang.Object)', 'OpenByteDoubleHashMapTest:assertFalse(boolean)', 'OpenByteDoubleHashMap:equals(java.lang.Object)', 'OpenByteDoubleHashMapTest:assertFalse(boolean)']
OpenByteDoubleHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:removeKey(byte)', 'OpenByteDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteDoubleHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteDoubleHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:removeKey(byte)', 'OpenByteDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest,java.util.List)', 'OpenByteDoubleHashMap:forEachPair(org.apache.mahout.math.function.ByteDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'List:clear()', 'OpenByteDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest,java.util.List)', 'OpenByteDoubleHashMap:forEachPair(org.apache.mahout.math.function.ByteDoubleProcedure)', 'List:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)']
OpenByteDoubleHashMapTest:testGet():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:get(byte)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'OpenByteDoubleHashMap:get(byte)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
OpenByteDoubleHashMapTest:testKeys():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'ByteArrayList:<init>()', 'OpenByteDoubleHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'OpenByteDoubleHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteDoubleHashMapTest:testKeysSortedByValue():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteDoubleHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteDoubleHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:removeKey(byte)', 'OpenByteDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteDoubleHashMapTest)', 'OpenByteDoubleHashMap:pairsMatching(org.apache.mahout.math.function.ByteDoubleProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ByteArrayList:sort()', 'DoubleArrayList:sort()', 'ByteArrayList:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
OpenByteDoubleHashMapTest:testPairsSortedByKey():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'ByteArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenByteDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ByteArrayList:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:clear()', 'DoubleArrayList:clear()', 'OpenByteDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
OpenByteDoubleHashMapTest:testValues():['OpenByteDoubleHashMap:<init>()', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:put(byte,double)', 'OpenByteDoubleHashMap:removeKey(byte)', 'DoubleArrayList:<init>(int)', 'OpenByteDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenByteDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenByteDoubleHashMapTest:assertEquals(double,double,double)']
OpenByteFloatHashMapTest:testAdjustOrPutValue():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:adjustOrPutValue(byte,float,float)', 'OpenByteFloatHashMap:get(byte)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'OpenByteFloatHashMap:adjustOrPutValue(byte,float,float)', 'OpenByteFloatHashMap:get(byte)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)']
OpenByteFloatHashMapTest:testClear():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'OpenByteFloatHashMap:clear()', 'OpenByteFloatHashMap:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'OpenByteFloatHashMap:get(byte)', 'OpenByteFloatHashMapTest:assertEquals(double,double,double)']
OpenByteFloatHashMapTest:testClone():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:clone()', 'OpenByteFloatHashMap:clear()', 'OpenByteFloatHashMap:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)']
OpenByteFloatHashMapTest:testConstructors():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'OpenByteFloatHashMapTest:assertEquals(double,double,double)', 'OpenByteFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteFloatHashMap:<init>(int)', 'OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'OpenByteFloatHashMapTest:assertEquals(double,double,double)', 'OpenByteFloatHashMapTest:assertEquals(double,double,double)', 'OpenByteFloatHashMap:<init>(int,double,double)', 'OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'OpenByteFloatHashMapTest:assertEquals(double,double,double)', 'OpenByteFloatHashMapTest:assertEquals(double,double,double)']
OpenByteFloatHashMapTest:testContainValue():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:containsValue(float)', 'OpenByteFloatHashMapTest:assertTrue(boolean)', 'OpenByteFloatHashMap:containsValue(float)', 'OpenByteFloatHashMapTest:assertFalse(boolean)']
OpenByteFloatHashMapTest:testContainsKey():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:containsKey(byte)', 'OpenByteFloatHashMapTest:assertTrue(boolean)', 'OpenByteFloatHashMap:containsKey(byte)', 'OpenByteFloatHashMapTest:assertFalse(boolean)']
OpenByteFloatHashMapTest:testCopy():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:copy()', 'OpenByteFloatHashMap:clear()', 'OpenByteFloatHashMap:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)']
OpenByteFloatHashMapTest:testEnsureCapacity():['OpenByteFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteFloatHashMap:ensureCapacity(int)', 'OpenByteFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteFloatHashMapTest:assertEquals(long,long)']
OpenByteFloatHashMapTest:testEquals():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:removeKey(byte)', 'OpenByteFloatHashMap:copy()', 'OpenByteFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteFloatHashMap:equals(java.lang.Object)', 'OpenByteFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteFloatHashMapTest:assertFalse(boolean)', 'OpenByteFloatHashMap:equals(java.lang.Object)', 'OpenByteFloatHashMapTest:assertFalse(boolean)', 'OpenByteFloatHashMap:removeKey(byte)', 'OpenByteFloatHashMap:equals(java.lang.Object)', 'OpenByteFloatHashMapTest:assertFalse(boolean)', 'OpenByteFloatHashMap:equals(java.lang.Object)', 'OpenByteFloatHashMapTest:assertFalse(boolean)']
OpenByteFloatHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:removeKey(byte)', 'OpenByteFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteFloatHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteFloatHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:removeKey(byte)', 'OpenByteFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest,java.util.List)', 'OpenByteFloatHashMap:forEachPair(org.apache.mahout.math.function.ByteFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'List:clear()', 'OpenByteFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest,java.util.List)', 'OpenByteFloatHashMap:forEachPair(org.apache.mahout.math.function.ByteFloatProcedure)', 'List:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)']
OpenByteFloatHashMapTest:testGet():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:get(byte)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'OpenByteFloatHashMap:get(byte)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)']
OpenByteFloatHashMapTest:testKeys():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'ByteArrayList:<init>()', 'OpenByteFloatHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'OpenByteFloatHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteFloatHashMapTest:testKeysSortedByValue():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteFloatHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteFloatHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:removeKey(byte)', 'OpenByteFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteFloatHashMapTest)', 'OpenByteFloatHashMap:pairsMatching(org.apache.mahout.math.function.ByteFloatProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ByteArrayList:sort()', 'FloatArrayList:sort()', 'ByteArrayList:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)']
OpenByteFloatHashMapTest:testPairsSortedByKey():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'ByteArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenByteFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ByteArrayList:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:clear()', 'FloatArrayList:clear()', 'OpenByteFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)']
OpenByteFloatHashMapTest:testValues():['OpenByteFloatHashMap:<init>()', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:put(byte,float)', 'OpenByteFloatHashMap:removeKey(byte)', 'FloatArrayList:<init>(int)', 'OpenByteFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenByteFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenByteFloatHashMapTest:assertEquals(float,float,float)']
OpenByteHashSetTest:testClear():['OpenByteHashSet:<init>()', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:size()', 'OpenByteHashSetTest:assertEquals(long,long)', 'OpenByteHashSet:clear()', 'OpenByteHashSet:size()', 'OpenByteHashSetTest:assertEquals(long,long)']
OpenByteHashSetTest:testClone():['OpenByteHashSet:<init>()', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:clone()', 'OpenByteHashSet:clear()', 'OpenByteHashSet:size()', 'OpenByteHashSetTest:assertEquals(long,long)']
OpenByteHashSetTest:testConstructors():['OpenByteHashSet:<init>()', 'OpenByteHashSet:getInternalFactors(int[],double[],double[])', 'OpenByteHashSetTest:assertEquals(long,long)', 'OpenByteHashSetTest:assertEquals(double,double,double)', 'OpenByteHashSetTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteHashSet:<init>(int)', 'OpenByteHashSet:getInternalFactors(int[],double[],double[])', 'OpenByteHashSetTest:assertEquals(long,long)', 'OpenByteHashSetTest:assertEquals(double,double,double)', 'OpenByteHashSetTest:assertEquals(double,double,double)', 'OpenByteHashSet:<init>(int,double,double)', 'OpenByteHashSet:getInternalFactors(int[],double[],double[])', 'OpenByteHashSetTest:assertEquals(long,long)', 'OpenByteHashSetTest:assertEquals(double,double,double)', 'OpenByteHashSetTest:assertEquals(double,double,double)']
OpenByteHashSetTest:testContains():['OpenByteHashSet:<init>()', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:contains(byte)', 'OpenByteHashSetTest:assertTrue(boolean)', 'OpenByteHashSet:contains(byte)', 'OpenByteHashSetTest:assertFalse(boolean)']
OpenByteHashSetTest:testCopy():['OpenByteHashSet:<init>()', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:copy()', 'OpenByteHashSet:clear()', 'OpenByteHashSet:size()', 'OpenByteHashSetTest:assertEquals(long,long)']
OpenByteHashSetTest:testEnsureCapacity():['OpenByteHashSet:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteHashSet:ensureCapacity(int)', 'OpenByteHashSet:getInternalFactors(int[],double[],double[])', 'OpenByteHashSetTest:assertEquals(long,long)']
OpenByteHashSetTest:testEquals():['OpenByteHashSet:<init>()', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:remove(byte)', 'OpenByteHashSet:copy()', 'OpenByteHashSet:equals(java.lang.Object)', 'OpenByteHashSetTest:assertTrue(boolean)', 'OpenByteHashSet:hashCode()', 'OpenByteHashSet:hashCode()', 'OpenByteHashSetTest:assertTrue(boolean)', 'OpenByteHashSet:equals(java.lang.Object)', 'OpenByteHashSetTest:assertTrue(boolean)', 'OpenByteHashSet:hashCode()', 'OpenByteHashSet:hashCode()', 'OpenByteHashSetTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteHashSetTest:assertFalse(boolean)', 'OpenByteHashSet:equals(java.lang.Object)', 'OpenByteHashSetTest:assertFalse(boolean)', 'OpenByteHashSet:remove(byte)', 'OpenByteHashSet:equals(java.lang.Object)', 'OpenByteHashSetTest:assertFalse(boolean)', 'OpenByteHashSet:equals(java.lang.Object)', 'OpenByteHashSetTest:assertFalse(boolean)', 'OpenByteHashSet:hashCode()', 'OpenByteHashSet:hashCode()', 'OpenByteHashSetTest:assertFalse(boolean)']
OpenByteHashSetTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteHashSet:<init>()', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:remove(byte)', 'OpenByteHashSetTest$1:<init>(org.apache.mahout.math.set.OpenByteHashSetTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteHashSet:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteHashSetTest:assertArrayEquals(byte[],byte[])']
OpenByteHashSetTest:testKeys():['OpenByteHashSet:<init>()', 'OpenByteHashSet:add(byte)', 'OpenByteHashSet:add(byte)', 'ByteArrayList:<init>()', 'OpenByteHashSet:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteHashSetTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteHashSetTest:assertEquals(long,long)', 'OpenByteHashSet:keys()', 'ByteArrayList:sort()', 'OpenByteHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteIntHashMapTest:testAdjustOrPutValue():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:adjustOrPutValue(byte,int,int)', 'OpenByteIntHashMap:get(byte)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMap:adjustOrPutValue(byte,int,int)', 'OpenByteIntHashMap:get(byte)', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testClear():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMap:clear()', 'OpenByteIntHashMap:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMap:get(byte)', 'OpenByteIntHashMapTest:assertEquals(double,double,double)']
OpenByteIntHashMapTest:testClone():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:clone()', 'OpenByteIntHashMap:clear()', 'OpenByteIntHashMap:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testConstructors():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMapTest:assertEquals(double,double,double)', 'OpenByteIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteIntHashMap:<init>(int)', 'OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMapTest:assertEquals(double,double,double)', 'OpenByteIntHashMapTest:assertEquals(double,double,double)', 'OpenByteIntHashMap:<init>(int,double,double)', 'OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMapTest:assertEquals(double,double,double)', 'OpenByteIntHashMapTest:assertEquals(double,double,double)']
OpenByteIntHashMapTest:testContainValue():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:containsValue(int)', 'OpenByteIntHashMapTest:assertTrue(boolean)', 'OpenByteIntHashMap:containsValue(int)', 'OpenByteIntHashMapTest:assertFalse(boolean)']
OpenByteIntHashMapTest:testContainsKey():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:containsKey(byte)', 'OpenByteIntHashMapTest:assertTrue(boolean)', 'OpenByteIntHashMap:containsKey(byte)', 'OpenByteIntHashMapTest:assertFalse(boolean)']
OpenByteIntHashMapTest:testCopy():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:copy()', 'OpenByteIntHashMap:clear()', 'OpenByteIntHashMap:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testEnsureCapacity():['OpenByteIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteIntHashMap:ensureCapacity(int)', 'OpenByteIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testEquals():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:removeKey(byte)', 'OpenByteIntHashMap:copy()', 'OpenByteIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteIntHashMap:equals(java.lang.Object)', 'OpenByteIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteIntHashMapTest:assertFalse(boolean)', 'OpenByteIntHashMap:equals(java.lang.Object)', 'OpenByteIntHashMapTest:assertFalse(boolean)', 'OpenByteIntHashMap:removeKey(byte)', 'OpenByteIntHashMap:equals(java.lang.Object)', 'OpenByteIntHashMapTest:assertFalse(boolean)', 'OpenByteIntHashMap:equals(java.lang.Object)', 'OpenByteIntHashMapTest:assertFalse(boolean)']
OpenByteIntHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:removeKey(byte)', 'OpenByteIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteIntHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteIntHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:removeKey(byte)', 'OpenByteIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest,java.util.List)', 'OpenByteIntHashMap:forEachPair(org.apache.mahout.math.function.ByteIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenByteIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest,java.util.List)', 'OpenByteIntHashMap:forEachPair(org.apache.mahout.math.function.ByteIntProcedure)', 'List:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testGet():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:get(byte)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMap:get(byte)', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testKeys():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'ByteArrayList:<init>()', 'OpenByteIntHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'OpenByteIntHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteIntHashMapTest:testKeysSortedByValue():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteIntHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteIntHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteIntHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'IntArrayList:<init>()', 'OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:removeKey(byte)', 'OpenByteIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteIntHashMapTest)', 'OpenByteIntHashMap:pairsMatching(org.apache.mahout.math.function.ByteIntProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', 'ByteArrayList:sort()', 'IntArrayList:sort()', 'ByteArrayList:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testPairsSortedByKey():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'ByteArrayList:<init>()', 'IntArrayList:<init>()', 'OpenByteIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', 'ByteArrayList:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:clear()', 'IntArrayList:clear()', 'OpenByteIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteIntHashMapTest:testValues():['OpenByteIntHashMap:<init>()', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:put(byte,int)', 'OpenByteIntHashMap:removeKey(byte)', 'IntArrayList:<init>(int)', 'OpenByteIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenByteIntHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testAdjustOrPutValue():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:adjustOrPutValue(byte,long,long)', 'OpenByteLongHashMap:get(byte)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMap:adjustOrPutValue(byte,long,long)', 'OpenByteLongHashMap:get(byte)', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testClear():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMap:clear()', 'OpenByteLongHashMap:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMap:get(byte)', 'OpenByteLongHashMapTest:assertEquals(double,double,double)']
OpenByteLongHashMapTest:testClone():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:clone()', 'OpenByteLongHashMap:clear()', 'OpenByteLongHashMap:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testConstructors():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMapTest:assertEquals(double,double,double)', 'OpenByteLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteLongHashMap:<init>(int)', 'OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMapTest:assertEquals(double,double,double)', 'OpenByteLongHashMapTest:assertEquals(double,double,double)', 'OpenByteLongHashMap:<init>(int,double,double)', 'OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMapTest:assertEquals(double,double,double)', 'OpenByteLongHashMapTest:assertEquals(double,double,double)']
OpenByteLongHashMapTest:testContainValue():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:containsValue(long)', 'OpenByteLongHashMapTest:assertTrue(boolean)', 'OpenByteLongHashMap:containsValue(long)', 'OpenByteLongHashMapTest:assertFalse(boolean)']
OpenByteLongHashMapTest:testContainsKey():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:containsKey(byte)', 'OpenByteLongHashMapTest:assertTrue(boolean)', 'OpenByteLongHashMap:containsKey(byte)', 'OpenByteLongHashMapTest:assertFalse(boolean)']
OpenByteLongHashMapTest:testCopy():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:copy()', 'OpenByteLongHashMap:clear()', 'OpenByteLongHashMap:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testEnsureCapacity():['OpenByteLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteLongHashMap:ensureCapacity(int)', 'OpenByteLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testEquals():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:removeKey(byte)', 'OpenByteLongHashMap:copy()', 'OpenByteLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteLongHashMap:equals(java.lang.Object)', 'OpenByteLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteLongHashMapTest:assertFalse(boolean)', 'OpenByteLongHashMap:equals(java.lang.Object)', 'OpenByteLongHashMapTest:assertFalse(boolean)', 'OpenByteLongHashMap:removeKey(byte)', 'OpenByteLongHashMap:equals(java.lang.Object)', 'OpenByteLongHashMapTest:assertFalse(boolean)', 'OpenByteLongHashMap:equals(java.lang.Object)', 'OpenByteLongHashMapTest:assertFalse(boolean)']
OpenByteLongHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:removeKey(byte)', 'OpenByteLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteLongHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteLongHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:removeKey(byte)', 'OpenByteLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest,java.util.List)', 'OpenByteLongHashMap:forEachPair(org.apache.mahout.math.function.ByteLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenByteLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest,java.util.List)', 'OpenByteLongHashMap:forEachPair(org.apache.mahout.math.function.ByteLongProcedure)', 'List:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testGet():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:get(byte)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMap:get(byte)', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testKeys():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'ByteArrayList:<init>()', 'OpenByteLongHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'OpenByteLongHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteLongHashMapTest:testKeysSortedByValue():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteLongHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteLongHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteLongHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'LongArrayList:<init>()', 'OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:removeKey(byte)', 'OpenByteLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteLongHashMapTest)', 'OpenByteLongHashMap:pairsMatching(org.apache.mahout.math.function.ByteLongProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', 'ByteArrayList:sort()', 'LongArrayList:sort()', 'ByteArrayList:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testPairsSortedByKey():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'ByteArrayList:<init>()', 'LongArrayList:<init>()', 'OpenByteLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', 'ByteArrayList:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:clear()', 'LongArrayList:clear()', 'OpenByteLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteLongHashMapTest:testValues():['OpenByteLongHashMap:<init>()', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:put(byte,long)', 'OpenByteLongHashMap:removeKey(byte)', 'LongArrayList:<init>(int)', 'OpenByteLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenByteLongHashMapTest:assertEquals(long,long)']
OpenByteObjectHashMapTest:testClear():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'OpenByteObjectHashMap:clear()', 'OpenByteObjectHashMap:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OpenByteObjectHashMap:containsKey(byte)', 'OpenByteObjectHashMapTest:assertFalse(java.lang.String,boolean)', 'OpenByteObjectHashMap:get(byte)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenByteObjectHashMapTest:testClone():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:clone()', 'OpenByteObjectHashMap:clear()', 'OpenByteObjectHashMap:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)']
OpenByteObjectHashMapTest:testConstructors():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'OpenByteObjectHashMapTest:assertEquals(double,double,double)', 'OpenByteObjectHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteObjectHashMap:<init>(int)', 'OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'OpenByteObjectHashMapTest:assertEquals(double,double,double)', 'OpenByteObjectHashMapTest:assertEquals(double,double,double)', 'OpenByteObjectHashMap:<init>(int,double,double)', 'OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'OpenByteObjectHashMapTest:assertEquals(double,double,double)', 'OpenByteObjectHashMapTest:assertEquals(double,double,double)']
OpenByteObjectHashMapTest:testContainValue():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:containsValue(java.lang.Object)', 'OpenByteObjectHashMapTest:assertTrue(boolean)', 'OpenByteObjectHashMap:containsValue(java.lang.Object)', 'OpenByteObjectHashMapTest:assertFalse(boolean)']
OpenByteObjectHashMapTest:testContainsKey():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:containsKey(byte)', 'OpenByteObjectHashMapTest:assertTrue(boolean)', 'OpenByteObjectHashMap:containsKey(byte)', 'OpenByteObjectHashMapTest:assertFalse(boolean)']
OpenByteObjectHashMapTest:testCopy():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:copy()', 'OpenByteObjectHashMap:clear()', 'OpenByteObjectHashMap:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)']
OpenByteObjectHashMapTest:testEnsureCapacity():['OpenByteObjectHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteObjectHashMap:ensureCapacity(int)', 'OpenByteObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteObjectHashMapTest:assertEquals(long,long)']
OpenByteObjectHashMapTest:testEquals():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:removeKey(byte)', 'OpenByteObjectHashMap:copy()', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteObjectHashMap:equals(java.lang.Object)', 'OpenByteObjectHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteObjectHashMapTest:assertFalse(boolean)', 'OpenByteObjectHashMap:equals(java.lang.Object)', 'OpenByteObjectHashMapTest:assertFalse(boolean)', 'OpenByteObjectHashMap:removeKey(byte)', 'OpenByteObjectHashMap:equals(java.lang.Object)', 'OpenByteObjectHashMapTest:assertFalse(boolean)', 'OpenByteObjectHashMap:equals(java.lang.Object)', 'OpenByteObjectHashMapTest:assertFalse(boolean)']
OpenByteObjectHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:removeKey(byte)', 'OpenByteObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteObjectHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteObjectHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteObjectHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:removeKey(byte)', 'OpenByteObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest,java.util.List)', 'OpenByteObjectHashMap:forEachPair(org.apache.mahout.math.function.ByteObjectProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenByteObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest,java.util.List)', 'OpenByteObjectHashMap:forEachPair(org.apache.mahout.math.function.ByteObjectProcedure)', 'List:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)']
OpenByteObjectHashMapTest:testGet():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:get(byte)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenByteObjectHashMap:get(byte)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenByteObjectHashMapTest:testKeys():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'ByteArrayList:<init>()', 'OpenByteObjectHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'OpenByteObjectHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteObjectHashMapTest:testKeysSortedByValue():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteObjectHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteObjectHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'ArrayList:<init>()', 'OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:removeKey(byte)', 'OpenByteObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteObjectHashMapTest)', 'OpenByteObjectHashMap:pairsMatching(org.apache.mahout.math.function.ByteObjectProcedure,org.apache.mahout.math.list.ByteArrayList,java.util.List)', 'ByteArrayList:sort()', 'Collections:sort(java.util.List)', 'ByteArrayList:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenByteObjectHashMapTest:testPairsSortedByKey():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'ByteArrayList:<init>()', 'ArrayList:<init>()', 'OpenByteObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,java.util.List)', 'ByteArrayList:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenByteObjectHashMapTest:testPairsSortedByValue():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'ByteArrayList:<init>()', 'ArrayList:<init>()', 'OpenByteObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,java.util.List)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteObjectHashMapTest:testValues():['OpenByteObjectHashMap:<init>()', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:put(byte,java.lang.Object)', 'OpenByteObjectHashMap:removeKey(byte)', 'ArrayList:<init>(int)', 'OpenByteObjectHashMap:values(java.util.List)', 'List:size()', 'OpenByteObjectHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenByteObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteShortHashMapTest:testAdjustOrPutValue():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:adjustOrPutValue(byte,short,short)', 'OpenByteShortHashMap:get(byte)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMap:adjustOrPutValue(byte,short,short)', 'OpenByteShortHashMap:get(byte)', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testClear():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMap:clear()', 'OpenByteShortHashMap:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMap:get(byte)', 'OpenByteShortHashMapTest:assertEquals(double,double,double)']
OpenByteShortHashMapTest:testClone():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:clone()', 'OpenByteShortHashMap:clear()', 'OpenByteShortHashMap:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testConstructors():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMapTest:assertEquals(double,double,double)', 'OpenByteShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenByteShortHashMap:<init>(int)', 'OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMapTest:assertEquals(double,double,double)', 'OpenByteShortHashMapTest:assertEquals(double,double,double)', 'OpenByteShortHashMap:<init>(int,double,double)', 'OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMapTest:assertEquals(double,double,double)', 'OpenByteShortHashMapTest:assertEquals(double,double,double)']
OpenByteShortHashMapTest:testContainValue():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:containsValue(short)', 'OpenByteShortHashMapTest:assertTrue(boolean)', 'OpenByteShortHashMap:containsValue(short)', 'OpenByteShortHashMapTest:assertFalse(boolean)']
OpenByteShortHashMapTest:testContainsKey():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:containsKey(byte)', 'OpenByteShortHashMapTest:assertTrue(boolean)', 'OpenByteShortHashMap:containsKey(byte)', 'OpenByteShortHashMapTest:assertFalse(boolean)']
OpenByteShortHashMapTest:testCopy():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:copy()', 'OpenByteShortHashMap:clear()', 'OpenByteShortHashMap:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testEnsureCapacity():['OpenByteShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenByteShortHashMap:ensureCapacity(int)', 'OpenByteShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testEquals():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:removeKey(byte)', 'OpenByteShortHashMap:copy()', 'OpenByteShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenByteShortHashMap:equals(java.lang.Object)', 'OpenByteShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenByteShortHashMapTest:assertFalse(boolean)', 'OpenByteShortHashMap:equals(java.lang.Object)', 'OpenByteShortHashMapTest:assertFalse(boolean)', 'OpenByteShortHashMap:removeKey(byte)', 'OpenByteShortHashMap:equals(java.lang.Object)', 'OpenByteShortHashMapTest:assertFalse(boolean)', 'OpenByteShortHashMap:equals(java.lang.Object)', 'OpenByteShortHashMapTest:assertFalse(boolean)']
OpenByteShortHashMapTest:testForEachKey():['ByteArrayList:<init>()', 'OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:removeKey(byte)', 'OpenByteShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteShortHashMap:forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'Arrays:sort(byte[])', 'OpenByteShortHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:removeKey(byte)', 'OpenByteShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest,java.util.List)', 'OpenByteShortHashMap:forEachPair(org.apache.mahout.math.function.ByteShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenByteShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest,java.util.List)', 'OpenByteShortHashMap:forEachPair(org.apache.mahout.math.function.ByteShortProcedure)', 'List:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testGet():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:get(byte)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMap:get(byte)', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testKeys():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'ByteArrayList:<init>()', 'OpenByteShortHashMap:keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'OpenByteShortHashMap:keys()', 'ByteArrayList:sort()', 'OpenByteShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenByteShortHashMapTest:testKeysSortedByValue():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:removeKey(byte)', 'ByteArrayList:<init>()', 'OpenByteShortHashMap:keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'ByteArrayList:toArray(byte[])', 'OpenByteShortHashMapTest:assertArrayEquals(byte[],byte[])']
OpenByteShortHashMapTest:testPairsMatching():['ByteArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:removeKey(byte)', 'OpenByteShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenByteShortHashMapTest)', 'OpenByteShortHashMap:pairsMatching(org.apache.mahout.math.function.ByteShortProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ByteArrayList:sort()', 'ShortArrayList:sort()', 'ByteArrayList:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testPairsSortedByKey():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'ByteArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenByteShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ByteArrayList:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:clear()', 'ShortArrayList:clear()', 'OpenByteShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenByteShortHashMapTest:testValues():['OpenByteShortHashMap:<init>()', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:put(byte,short)', 'OpenByteShortHashMap:removeKey(byte)', 'ShortArrayList:<init>(int)', 'OpenByteShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenByteShortHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testAdjustOrPutValue():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:adjustOrPutValue(char,byte,byte)', 'OpenCharByteHashMap:get(char)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMap:adjustOrPutValue(char,byte,byte)', 'OpenCharByteHashMap:get(char)', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testClear():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMap:clear()', 'OpenCharByteHashMap:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMap:get(char)', 'OpenCharByteHashMapTest:assertEquals(double,double,double)']
OpenCharByteHashMapTest:testClone():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:clone()', 'OpenCharByteHashMap:clear()', 'OpenCharByteHashMap:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testConstructors():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMapTest:assertEquals(double,double,double)', 'OpenCharByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharByteHashMap:<init>(int)', 'OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMapTest:assertEquals(double,double,double)', 'OpenCharByteHashMapTest:assertEquals(double,double,double)', 'OpenCharByteHashMap:<init>(int,double,double)', 'OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMapTest:assertEquals(double,double,double)', 'OpenCharByteHashMapTest:assertEquals(double,double,double)']
OpenCharByteHashMapTest:testContainValue():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:containsValue(byte)', 'OpenCharByteHashMapTest:assertTrue(boolean)', 'OpenCharByteHashMap:containsValue(byte)', 'OpenCharByteHashMapTest:assertFalse(boolean)']
OpenCharByteHashMapTest:testContainsKey():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:containsKey(char)', 'OpenCharByteHashMapTest:assertTrue(boolean)', 'OpenCharByteHashMap:containsKey(char)', 'OpenCharByteHashMapTest:assertFalse(boolean)']
OpenCharByteHashMapTest:testCopy():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:copy()', 'OpenCharByteHashMap:clear()', 'OpenCharByteHashMap:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testEnsureCapacity():['OpenCharByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharByteHashMap:ensureCapacity(int)', 'OpenCharByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testEquals():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:removeKey(char)', 'OpenCharByteHashMap:copy()', 'OpenCharByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharByteHashMap:equals(java.lang.Object)', 'OpenCharByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharByteHashMapTest:assertFalse(boolean)', 'OpenCharByteHashMap:equals(java.lang.Object)', 'OpenCharByteHashMapTest:assertFalse(boolean)', 'OpenCharByteHashMap:removeKey(char)', 'OpenCharByteHashMap:equals(java.lang.Object)', 'OpenCharByteHashMapTest:assertFalse(boolean)', 'OpenCharByteHashMap:equals(java.lang.Object)', 'OpenCharByteHashMapTest:assertFalse(boolean)']
OpenCharByteHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:removeKey(char)', 'OpenCharByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharByteHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharByteHashMapTest:assertArrayEquals(char[],char[])']
OpenCharByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:removeKey(char)', 'OpenCharByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest,java.util.List)', 'OpenCharByteHashMap:forEachPair(org.apache.mahout.math.function.CharByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenCharByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest,java.util.List)', 'OpenCharByteHashMap:forEachPair(org.apache.mahout.math.function.CharByteProcedure)', 'List:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testGet():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:get(char)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMap:get(char)', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testKeys():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'CharArrayList:<init>()', 'OpenCharByteHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'OpenCharByteHashMap:keys()', 'CharArrayList:sort()', 'OpenCharByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharByteHashMapTest:testKeysSortedByValue():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharByteHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharByteHashMapTest:assertArrayEquals(char[],char[])']
OpenCharByteHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:removeKey(char)', 'OpenCharByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharByteHashMapTest)', 'OpenCharByteHashMap:pairsMatching(org.apache.mahout.math.function.CharByteProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', 'CharArrayList:sort()', 'ByteArrayList:sort()', 'CharArrayList:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testPairsSortedByKey():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'CharArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenCharByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', 'CharArrayList:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:clear()', 'ByteArrayList:clear()', 'OpenCharByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharByteHashMapTest:testValues():['OpenCharByteHashMap:<init>()', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:put(char,byte)', 'OpenCharByteHashMap:removeKey(char)', 'ByteArrayList:<init>(int)', 'OpenCharByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenCharByteHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testAdjustOrPutValue():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:adjustOrPutValue(char,char,char)', 'OpenCharCharHashMap:get(char)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMap:adjustOrPutValue(char,char,char)', 'OpenCharCharHashMap:get(char)', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testClear():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMap:clear()', 'OpenCharCharHashMap:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMap:get(char)', 'OpenCharCharHashMapTest:assertEquals(double,double,double)']
OpenCharCharHashMapTest:testClone():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:clone()', 'OpenCharCharHashMap:clear()', 'OpenCharCharHashMap:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testConstructors():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMapTest:assertEquals(double,double,double)', 'OpenCharCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharCharHashMap:<init>(int)', 'OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMapTest:assertEquals(double,double,double)', 'OpenCharCharHashMapTest:assertEquals(double,double,double)', 'OpenCharCharHashMap:<init>(int,double,double)', 'OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMapTest:assertEquals(double,double,double)', 'OpenCharCharHashMapTest:assertEquals(double,double,double)']
OpenCharCharHashMapTest:testContainValue():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:containsValue(char)', 'OpenCharCharHashMapTest:assertTrue(boolean)', 'OpenCharCharHashMap:containsValue(char)', 'OpenCharCharHashMapTest:assertFalse(boolean)']
OpenCharCharHashMapTest:testContainsKey():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:containsKey(char)', 'OpenCharCharHashMapTest:assertTrue(boolean)', 'OpenCharCharHashMap:containsKey(char)', 'OpenCharCharHashMapTest:assertFalse(boolean)']
OpenCharCharHashMapTest:testCopy():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:copy()', 'OpenCharCharHashMap:clear()', 'OpenCharCharHashMap:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testEnsureCapacity():['OpenCharCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharCharHashMap:ensureCapacity(int)', 'OpenCharCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testEquals():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:removeKey(char)', 'OpenCharCharHashMap:copy()', 'OpenCharCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharCharHashMap:equals(java.lang.Object)', 'OpenCharCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharCharHashMapTest:assertFalse(boolean)', 'OpenCharCharHashMap:equals(java.lang.Object)', 'OpenCharCharHashMapTest:assertFalse(boolean)', 'OpenCharCharHashMap:removeKey(char)', 'OpenCharCharHashMap:equals(java.lang.Object)', 'OpenCharCharHashMapTest:assertFalse(boolean)', 'OpenCharCharHashMap:equals(java.lang.Object)', 'OpenCharCharHashMapTest:assertFalse(boolean)']
OpenCharCharHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:removeKey(char)', 'OpenCharCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharCharHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharCharHashMapTest:assertArrayEquals(char[],char[])']
OpenCharCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:removeKey(char)', 'OpenCharCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest,java.util.List)', 'OpenCharCharHashMap:forEachPair(org.apache.mahout.math.function.CharCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenCharCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest,java.util.List)', 'OpenCharCharHashMap:forEachPair(org.apache.mahout.math.function.CharCharProcedure)', 'List:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testGet():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:get(char)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMap:get(char)', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testKeys():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'CharArrayList:<init>()', 'OpenCharCharHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'OpenCharCharHashMap:keys()', 'CharArrayList:sort()', 'OpenCharCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharCharHashMapTest:testKeysSortedByValue():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharCharHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharCharHashMapTest:assertArrayEquals(char[],char[])']
OpenCharCharHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'CharArrayList:<init>()', 'OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:removeKey(char)', 'OpenCharCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharCharHashMapTest)', 'OpenCharCharHashMap:pairsMatching(org.apache.mahout.math.function.CharCharProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:sort()', 'CharArrayList:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testPairsSortedByKey():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'CharArrayList:<init>()', 'CharArrayList:<init>()', 'OpenCharCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:clear()', 'CharArrayList:clear()', 'OpenCharCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharCharHashMapTest:testValues():['OpenCharCharHashMap:<init>()', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:put(char,char)', 'OpenCharCharHashMap:removeKey(char)', 'CharArrayList:<init>(int)', 'OpenCharCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharCharHashMapTest:assertEquals(long,long)']
OpenCharDoubleHashMapTest:testAdjustOrPutValue():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:adjustOrPutValue(char,double,double)', 'OpenCharDoubleHashMap:get(char)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'OpenCharDoubleHashMap:adjustOrPutValue(char,double,double)', 'OpenCharDoubleHashMap:get(char)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
OpenCharDoubleHashMapTest:testClear():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'OpenCharDoubleHashMap:clear()', 'OpenCharDoubleHashMap:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'OpenCharDoubleHashMap:get(char)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
OpenCharDoubleHashMapTest:testClone():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:clone()', 'OpenCharDoubleHashMap:clear()', 'OpenCharDoubleHashMap:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)']
OpenCharDoubleHashMapTest:testConstructors():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharDoubleHashMap:<init>(int)', 'OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'OpenCharDoubleHashMap:<init>(int,double,double)', 'OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
OpenCharDoubleHashMapTest:testContainValue():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:containsValue(double)', 'OpenCharDoubleHashMapTest:assertTrue(boolean)', 'OpenCharDoubleHashMap:containsValue(double)', 'OpenCharDoubleHashMapTest:assertFalse(boolean)']
OpenCharDoubleHashMapTest:testContainsKey():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:containsKey(char)', 'OpenCharDoubleHashMapTest:assertTrue(boolean)', 'OpenCharDoubleHashMap:containsKey(char)', 'OpenCharDoubleHashMapTest:assertFalse(boolean)']
OpenCharDoubleHashMapTest:testCopy():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:copy()', 'OpenCharDoubleHashMap:clear()', 'OpenCharDoubleHashMap:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)']
OpenCharDoubleHashMapTest:testEnsureCapacity():['OpenCharDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharDoubleHashMap:ensureCapacity(int)', 'OpenCharDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharDoubleHashMapTest:assertEquals(long,long)']
OpenCharDoubleHashMapTest:testEquals():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:removeKey(char)', 'OpenCharDoubleHashMap:copy()', 'OpenCharDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharDoubleHashMap:equals(java.lang.Object)', 'OpenCharDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharDoubleHashMapTest:assertFalse(boolean)', 'OpenCharDoubleHashMap:equals(java.lang.Object)', 'OpenCharDoubleHashMapTest:assertFalse(boolean)', 'OpenCharDoubleHashMap:removeKey(char)', 'OpenCharDoubleHashMap:equals(java.lang.Object)', 'OpenCharDoubleHashMapTest:assertFalse(boolean)', 'OpenCharDoubleHashMap:equals(java.lang.Object)', 'OpenCharDoubleHashMapTest:assertFalse(boolean)']
OpenCharDoubleHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:removeKey(char)', 'OpenCharDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharDoubleHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharDoubleHashMapTest:assertArrayEquals(char[],char[])']
OpenCharDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:removeKey(char)', 'OpenCharDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest,java.util.List)', 'OpenCharDoubleHashMap:forEachPair(org.apache.mahout.math.function.CharDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'List:clear()', 'OpenCharDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest,java.util.List)', 'OpenCharDoubleHashMap:forEachPair(org.apache.mahout.math.function.CharDoubleProcedure)', 'List:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)']
OpenCharDoubleHashMapTest:testGet():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:get(char)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'OpenCharDoubleHashMap:get(char)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
OpenCharDoubleHashMapTest:testKeys():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'CharArrayList:<init>()', 'OpenCharDoubleHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'OpenCharDoubleHashMap:keys()', 'CharArrayList:sort()', 'OpenCharDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharDoubleHashMapTest:testKeysSortedByValue():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharDoubleHashMapTest:assertArrayEquals(char[],char[])']
OpenCharDoubleHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:removeKey(char)', 'OpenCharDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharDoubleHashMapTest)', 'OpenCharDoubleHashMap:pairsMatching(org.apache.mahout.math.function.CharDoubleProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'CharArrayList:sort()', 'DoubleArrayList:sort()', 'CharArrayList:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
OpenCharDoubleHashMapTest:testPairsSortedByKey():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'CharArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenCharDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'CharArrayList:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'CharArrayList:clear()', 'DoubleArrayList:clear()', 'OpenCharDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
OpenCharDoubleHashMapTest:testValues():['OpenCharDoubleHashMap:<init>()', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:put(char,double)', 'OpenCharDoubleHashMap:removeKey(char)', 'DoubleArrayList:<init>(int)', 'OpenCharDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenCharDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenCharDoubleHashMapTest:assertEquals(double,double,double)']
OpenCharFloatHashMapTest:testAdjustOrPutValue():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:adjustOrPutValue(char,float,float)', 'OpenCharFloatHashMap:get(char)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'OpenCharFloatHashMap:adjustOrPutValue(char,float,float)', 'OpenCharFloatHashMap:get(char)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)']
OpenCharFloatHashMapTest:testClear():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'OpenCharFloatHashMap:clear()', 'OpenCharFloatHashMap:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'OpenCharFloatHashMap:get(char)', 'OpenCharFloatHashMapTest:assertEquals(double,double,double)']
OpenCharFloatHashMapTest:testClone():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:clone()', 'OpenCharFloatHashMap:clear()', 'OpenCharFloatHashMap:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)']
OpenCharFloatHashMapTest:testConstructors():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'OpenCharFloatHashMapTest:assertEquals(double,double,double)', 'OpenCharFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharFloatHashMap:<init>(int)', 'OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'OpenCharFloatHashMapTest:assertEquals(double,double,double)', 'OpenCharFloatHashMapTest:assertEquals(double,double,double)', 'OpenCharFloatHashMap:<init>(int,double,double)', 'OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'OpenCharFloatHashMapTest:assertEquals(double,double,double)', 'OpenCharFloatHashMapTest:assertEquals(double,double,double)']
OpenCharFloatHashMapTest:testContainValue():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:containsValue(float)', 'OpenCharFloatHashMapTest:assertTrue(boolean)', 'OpenCharFloatHashMap:containsValue(float)', 'OpenCharFloatHashMapTest:assertFalse(boolean)']
OpenCharFloatHashMapTest:testContainsKey():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:containsKey(char)', 'OpenCharFloatHashMapTest:assertTrue(boolean)', 'OpenCharFloatHashMap:containsKey(char)', 'OpenCharFloatHashMapTest:assertFalse(boolean)']
OpenCharFloatHashMapTest:testCopy():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:copy()', 'OpenCharFloatHashMap:clear()', 'OpenCharFloatHashMap:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)']
OpenCharFloatHashMapTest:testEnsureCapacity():['OpenCharFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharFloatHashMap:ensureCapacity(int)', 'OpenCharFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharFloatHashMapTest:assertEquals(long,long)']
OpenCharFloatHashMapTest:testEquals():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:removeKey(char)', 'OpenCharFloatHashMap:copy()', 'OpenCharFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharFloatHashMap:equals(java.lang.Object)', 'OpenCharFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharFloatHashMapTest:assertFalse(boolean)', 'OpenCharFloatHashMap:equals(java.lang.Object)', 'OpenCharFloatHashMapTest:assertFalse(boolean)', 'OpenCharFloatHashMap:removeKey(char)', 'OpenCharFloatHashMap:equals(java.lang.Object)', 'OpenCharFloatHashMapTest:assertFalse(boolean)', 'OpenCharFloatHashMap:equals(java.lang.Object)', 'OpenCharFloatHashMapTest:assertFalse(boolean)']
OpenCharFloatHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:removeKey(char)', 'OpenCharFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharFloatHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharFloatHashMapTest:assertArrayEquals(char[],char[])']
OpenCharFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:removeKey(char)', 'OpenCharFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest,java.util.List)', 'OpenCharFloatHashMap:forEachPair(org.apache.mahout.math.function.CharFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'List:clear()', 'OpenCharFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest,java.util.List)', 'OpenCharFloatHashMap:forEachPair(org.apache.mahout.math.function.CharFloatProcedure)', 'List:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)']
OpenCharFloatHashMapTest:testGet():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:get(char)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'OpenCharFloatHashMap:get(char)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)']
OpenCharFloatHashMapTest:testKeys():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'CharArrayList:<init>()', 'OpenCharFloatHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'OpenCharFloatHashMap:keys()', 'CharArrayList:sort()', 'OpenCharFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharFloatHashMapTest:testKeysSortedByValue():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharFloatHashMapTest:assertArrayEquals(char[],char[])']
OpenCharFloatHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:removeKey(char)', 'OpenCharFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharFloatHashMapTest)', 'OpenCharFloatHashMap:pairsMatching(org.apache.mahout.math.function.CharFloatProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', 'CharArrayList:sort()', 'FloatArrayList:sort()', 'CharArrayList:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)']
OpenCharFloatHashMapTest:testPairsSortedByKey():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'CharArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenCharFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', 'CharArrayList:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'CharArrayList:clear()', 'FloatArrayList:clear()', 'OpenCharFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)']
OpenCharFloatHashMapTest:testValues():['OpenCharFloatHashMap:<init>()', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:put(char,float)', 'OpenCharFloatHashMap:removeKey(char)', 'FloatArrayList:<init>(int)', 'OpenCharFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenCharFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenCharFloatHashMapTest:assertEquals(float,float,float)']
OpenCharHashSetTest:testClear():['OpenCharHashSet:<init>()', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:size()', 'OpenCharHashSetTest:assertEquals(long,long)', 'OpenCharHashSet:clear()', 'OpenCharHashSet:size()', 'OpenCharHashSetTest:assertEquals(long,long)']
OpenCharHashSetTest:testClone():['OpenCharHashSet:<init>()', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:clone()', 'OpenCharHashSet:clear()', 'OpenCharHashSet:size()', 'OpenCharHashSetTest:assertEquals(long,long)']
OpenCharHashSetTest:testConstructors():['OpenCharHashSet:<init>()', 'OpenCharHashSet:getInternalFactors(int[],double[],double[])', 'OpenCharHashSetTest:assertEquals(long,long)', 'OpenCharHashSetTest:assertEquals(double,double,double)', 'OpenCharHashSetTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharHashSet:<init>(int)', 'OpenCharHashSet:getInternalFactors(int[],double[],double[])', 'OpenCharHashSetTest:assertEquals(long,long)', 'OpenCharHashSetTest:assertEquals(double,double,double)', 'OpenCharHashSetTest:assertEquals(double,double,double)', 'OpenCharHashSet:<init>(int,double,double)', 'OpenCharHashSet:getInternalFactors(int[],double[],double[])', 'OpenCharHashSetTest:assertEquals(long,long)', 'OpenCharHashSetTest:assertEquals(double,double,double)', 'OpenCharHashSetTest:assertEquals(double,double,double)']
OpenCharHashSetTest:testContains():['OpenCharHashSet:<init>()', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:contains(char)', 'OpenCharHashSetTest:assertTrue(boolean)', 'OpenCharHashSet:contains(char)', 'OpenCharHashSetTest:assertFalse(boolean)']
OpenCharHashSetTest:testCopy():['OpenCharHashSet:<init>()', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:copy()', 'OpenCharHashSet:clear()', 'OpenCharHashSet:size()', 'OpenCharHashSetTest:assertEquals(long,long)']
OpenCharHashSetTest:testEnsureCapacity():['OpenCharHashSet:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharHashSet:ensureCapacity(int)', 'OpenCharHashSet:getInternalFactors(int[],double[],double[])', 'OpenCharHashSetTest:assertEquals(long,long)']
OpenCharHashSetTest:testEquals():['OpenCharHashSet:<init>()', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:remove(char)', 'OpenCharHashSet:copy()', 'OpenCharHashSet:equals(java.lang.Object)', 'OpenCharHashSetTest:assertTrue(boolean)', 'OpenCharHashSet:hashCode()', 'OpenCharHashSet:hashCode()', 'OpenCharHashSetTest:assertTrue(boolean)', 'OpenCharHashSet:equals(java.lang.Object)', 'OpenCharHashSetTest:assertTrue(boolean)', 'OpenCharHashSet:hashCode()', 'OpenCharHashSet:hashCode()', 'OpenCharHashSetTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharHashSetTest:assertFalse(boolean)', 'OpenCharHashSet:equals(java.lang.Object)', 'OpenCharHashSetTest:assertFalse(boolean)', 'OpenCharHashSet:remove(char)', 'OpenCharHashSet:equals(java.lang.Object)', 'OpenCharHashSetTest:assertFalse(boolean)', 'OpenCharHashSet:equals(java.lang.Object)', 'OpenCharHashSetTest:assertFalse(boolean)', 'OpenCharHashSet:hashCode()', 'OpenCharHashSet:hashCode()', 'OpenCharHashSetTest:assertFalse(boolean)']
OpenCharHashSetTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharHashSet:<init>()', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:remove(char)', 'OpenCharHashSetTest$1:<init>(org.apache.mahout.math.set.OpenCharHashSetTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharHashSet:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharHashSetTest:assertArrayEquals(char[],char[])']
OpenCharHashSetTest:testKeys():['OpenCharHashSet:<init>()', 'OpenCharHashSet:add(char)', 'OpenCharHashSet:add(char)', 'CharArrayList:<init>()', 'OpenCharHashSet:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharHashSetTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharHashSetTest:assertEquals(long,long)', 'OpenCharHashSet:keys()', 'CharArrayList:sort()', 'OpenCharHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharIntHashMapTest:testAdjustOrPutValue():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:adjustOrPutValue(char,int,int)', 'OpenCharIntHashMap:get(char)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMap:adjustOrPutValue(char,int,int)', 'OpenCharIntHashMap:get(char)', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testClear():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMap:clear()', 'OpenCharIntHashMap:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMap:get(char)', 'OpenCharIntHashMapTest:assertEquals(double,double,double)']
OpenCharIntHashMapTest:testClone():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:clone()', 'OpenCharIntHashMap:clear()', 'OpenCharIntHashMap:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testConstructors():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMapTest:assertEquals(double,double,double)', 'OpenCharIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharIntHashMap:<init>(int)', 'OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMapTest:assertEquals(double,double,double)', 'OpenCharIntHashMapTest:assertEquals(double,double,double)', 'OpenCharIntHashMap:<init>(int,double,double)', 'OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMapTest:assertEquals(double,double,double)', 'OpenCharIntHashMapTest:assertEquals(double,double,double)']
OpenCharIntHashMapTest:testContainValue():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:containsValue(int)', 'OpenCharIntHashMapTest:assertTrue(boolean)', 'OpenCharIntHashMap:containsValue(int)', 'OpenCharIntHashMapTest:assertFalse(boolean)']
OpenCharIntHashMapTest:testContainsKey():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:containsKey(char)', 'OpenCharIntHashMapTest:assertTrue(boolean)', 'OpenCharIntHashMap:containsKey(char)', 'OpenCharIntHashMapTest:assertFalse(boolean)']
OpenCharIntHashMapTest:testCopy():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:copy()', 'OpenCharIntHashMap:clear()', 'OpenCharIntHashMap:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testEnsureCapacity():['OpenCharIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharIntHashMap:ensureCapacity(int)', 'OpenCharIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testEquals():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:removeKey(char)', 'OpenCharIntHashMap:copy()', 'OpenCharIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharIntHashMap:equals(java.lang.Object)', 'OpenCharIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharIntHashMapTest:assertFalse(boolean)', 'OpenCharIntHashMap:equals(java.lang.Object)', 'OpenCharIntHashMapTest:assertFalse(boolean)', 'OpenCharIntHashMap:removeKey(char)', 'OpenCharIntHashMap:equals(java.lang.Object)', 'OpenCharIntHashMapTest:assertFalse(boolean)', 'OpenCharIntHashMap:equals(java.lang.Object)', 'OpenCharIntHashMapTest:assertFalse(boolean)']
OpenCharIntHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:removeKey(char)', 'OpenCharIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharIntHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharIntHashMapTest:assertArrayEquals(char[],char[])']
OpenCharIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:removeKey(char)', 'OpenCharIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest,java.util.List)', 'OpenCharIntHashMap:forEachPair(org.apache.mahout.math.function.CharIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenCharIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest,java.util.List)', 'OpenCharIntHashMap:forEachPair(org.apache.mahout.math.function.CharIntProcedure)', 'List:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testGet():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:get(char)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMap:get(char)', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testKeys():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'CharArrayList:<init>()', 'OpenCharIntHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'OpenCharIntHashMap:keys()', 'CharArrayList:sort()', 'OpenCharIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharIntHashMapTest:testKeysSortedByValue():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharIntHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharIntHashMapTest:assertArrayEquals(char[],char[])']
OpenCharIntHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'IntArrayList:<init>()', 'OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:removeKey(char)', 'OpenCharIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharIntHashMapTest)', 'OpenCharIntHashMap:pairsMatching(org.apache.mahout.math.function.CharIntProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', 'CharArrayList:sort()', 'IntArrayList:sort()', 'CharArrayList:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testPairsSortedByKey():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'CharArrayList:<init>()', 'IntArrayList:<init>()', 'OpenCharIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', 'CharArrayList:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:clear()', 'IntArrayList:clear()', 'OpenCharIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharIntHashMapTest:testValues():['OpenCharIntHashMap:<init>()', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:put(char,int)', 'OpenCharIntHashMap:removeKey(char)', 'IntArrayList:<init>(int)', 'OpenCharIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenCharIntHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testAdjustOrPutValue():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:adjustOrPutValue(char,long,long)', 'OpenCharLongHashMap:get(char)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMap:adjustOrPutValue(char,long,long)', 'OpenCharLongHashMap:get(char)', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testClear():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMap:clear()', 'OpenCharLongHashMap:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMap:get(char)', 'OpenCharLongHashMapTest:assertEquals(double,double,double)']
OpenCharLongHashMapTest:testClone():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:clone()', 'OpenCharLongHashMap:clear()', 'OpenCharLongHashMap:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testConstructors():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMapTest:assertEquals(double,double,double)', 'OpenCharLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharLongHashMap:<init>(int)', 'OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMapTest:assertEquals(double,double,double)', 'OpenCharLongHashMapTest:assertEquals(double,double,double)', 'OpenCharLongHashMap:<init>(int,double,double)', 'OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMapTest:assertEquals(double,double,double)', 'OpenCharLongHashMapTest:assertEquals(double,double,double)']
OpenCharLongHashMapTest:testContainValue():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:containsValue(long)', 'OpenCharLongHashMapTest:assertTrue(boolean)', 'OpenCharLongHashMap:containsValue(long)', 'OpenCharLongHashMapTest:assertFalse(boolean)']
OpenCharLongHashMapTest:testContainsKey():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:containsKey(char)', 'OpenCharLongHashMapTest:assertTrue(boolean)', 'OpenCharLongHashMap:containsKey(char)', 'OpenCharLongHashMapTest:assertFalse(boolean)']
OpenCharLongHashMapTest:testCopy():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:copy()', 'OpenCharLongHashMap:clear()', 'OpenCharLongHashMap:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testEnsureCapacity():['OpenCharLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharLongHashMap:ensureCapacity(int)', 'OpenCharLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testEquals():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:removeKey(char)', 'OpenCharLongHashMap:copy()', 'OpenCharLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharLongHashMap:equals(java.lang.Object)', 'OpenCharLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharLongHashMapTest:assertFalse(boolean)', 'OpenCharLongHashMap:equals(java.lang.Object)', 'OpenCharLongHashMapTest:assertFalse(boolean)', 'OpenCharLongHashMap:removeKey(char)', 'OpenCharLongHashMap:equals(java.lang.Object)', 'OpenCharLongHashMapTest:assertFalse(boolean)', 'OpenCharLongHashMap:equals(java.lang.Object)', 'OpenCharLongHashMapTest:assertFalse(boolean)']
OpenCharLongHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:removeKey(char)', 'OpenCharLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharLongHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharLongHashMapTest:assertArrayEquals(char[],char[])']
OpenCharLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:removeKey(char)', 'OpenCharLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest,java.util.List)', 'OpenCharLongHashMap:forEachPair(org.apache.mahout.math.function.CharLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenCharLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest,java.util.List)', 'OpenCharLongHashMap:forEachPair(org.apache.mahout.math.function.CharLongProcedure)', 'List:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testGet():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:get(char)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMap:get(char)', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testKeys():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'CharArrayList:<init>()', 'OpenCharLongHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'OpenCharLongHashMap:keys()', 'CharArrayList:sort()', 'OpenCharLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharLongHashMapTest:testKeysSortedByValue():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharLongHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharLongHashMapTest:assertArrayEquals(char[],char[])']
OpenCharLongHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'LongArrayList:<init>()', 'OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:removeKey(char)', 'OpenCharLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharLongHashMapTest)', 'OpenCharLongHashMap:pairsMatching(org.apache.mahout.math.function.CharLongProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', 'CharArrayList:sort()', 'LongArrayList:sort()', 'CharArrayList:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testPairsSortedByKey():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'CharArrayList:<init>()', 'LongArrayList:<init>()', 'OpenCharLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', 'CharArrayList:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:clear()', 'LongArrayList:clear()', 'OpenCharLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharLongHashMapTest:testValues():['OpenCharLongHashMap:<init>()', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:put(char,long)', 'OpenCharLongHashMap:removeKey(char)', 'LongArrayList:<init>(int)', 'OpenCharLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenCharLongHashMapTest:assertEquals(long,long)']
OpenCharObjectHashMapTest:testClear():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'OpenCharObjectHashMap:clear()', 'OpenCharObjectHashMap:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OpenCharObjectHashMap:containsKey(char)', 'OpenCharObjectHashMapTest:assertFalse(java.lang.String,boolean)', 'OpenCharObjectHashMap:get(char)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenCharObjectHashMapTest:testClone():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:clone()', 'OpenCharObjectHashMap:clear()', 'OpenCharObjectHashMap:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)']
OpenCharObjectHashMapTest:testConstructors():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'OpenCharObjectHashMapTest:assertEquals(double,double,double)', 'OpenCharObjectHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharObjectHashMap:<init>(int)', 'OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'OpenCharObjectHashMapTest:assertEquals(double,double,double)', 'OpenCharObjectHashMapTest:assertEquals(double,double,double)', 'OpenCharObjectHashMap:<init>(int,double,double)', 'OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'OpenCharObjectHashMapTest:assertEquals(double,double,double)', 'OpenCharObjectHashMapTest:assertEquals(double,double,double)']
OpenCharObjectHashMapTest:testContainValue():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:containsValue(java.lang.Object)', 'OpenCharObjectHashMapTest:assertTrue(boolean)', 'OpenCharObjectHashMap:containsValue(java.lang.Object)', 'OpenCharObjectHashMapTest:assertFalse(boolean)']
OpenCharObjectHashMapTest:testContainsKey():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:containsKey(char)', 'OpenCharObjectHashMapTest:assertTrue(boolean)', 'OpenCharObjectHashMap:containsKey(char)', 'OpenCharObjectHashMapTest:assertFalse(boolean)']
OpenCharObjectHashMapTest:testCopy():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:copy()', 'OpenCharObjectHashMap:clear()', 'OpenCharObjectHashMap:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)']
OpenCharObjectHashMapTest:testEnsureCapacity():['OpenCharObjectHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharObjectHashMap:ensureCapacity(int)', 'OpenCharObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharObjectHashMapTest:assertEquals(long,long)']
OpenCharObjectHashMapTest:testEquals():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:removeKey(char)', 'OpenCharObjectHashMap:copy()', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharObjectHashMap:equals(java.lang.Object)', 'OpenCharObjectHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharObjectHashMapTest:assertFalse(boolean)', 'OpenCharObjectHashMap:equals(java.lang.Object)', 'OpenCharObjectHashMapTest:assertFalse(boolean)', 'OpenCharObjectHashMap:removeKey(char)', 'OpenCharObjectHashMap:equals(java.lang.Object)', 'OpenCharObjectHashMapTest:assertFalse(boolean)', 'OpenCharObjectHashMap:equals(java.lang.Object)', 'OpenCharObjectHashMapTest:assertFalse(boolean)']
OpenCharObjectHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:removeKey(char)', 'OpenCharObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharObjectHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharObjectHashMapTest:assertArrayEquals(char[],char[])']
OpenCharObjectHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:removeKey(char)', 'OpenCharObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest,java.util.List)', 'OpenCharObjectHashMap:forEachPair(org.apache.mahout.math.function.CharObjectProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenCharObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest,java.util.List)', 'OpenCharObjectHashMap:forEachPair(org.apache.mahout.math.function.CharObjectProcedure)', 'List:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)']
OpenCharObjectHashMapTest:testGet():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:get(char)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenCharObjectHashMap:get(char)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenCharObjectHashMapTest:testKeys():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'CharArrayList:<init>()', 'OpenCharObjectHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'OpenCharObjectHashMap:keys()', 'CharArrayList:sort()', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharObjectHashMapTest:testKeysSortedByValue():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharObjectHashMapTest:assertArrayEquals(char[],char[])']
OpenCharObjectHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'ArrayList:<init>()', 'OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:removeKey(char)', 'OpenCharObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharObjectHashMapTest)', 'OpenCharObjectHashMap:pairsMatching(org.apache.mahout.math.function.CharObjectProcedure,org.apache.mahout.math.list.CharArrayList,java.util.List)', 'CharArrayList:sort()', 'Collections:sort(java.util.List)', 'CharArrayList:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenCharObjectHashMapTest:testPairsSortedByKey():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'CharArrayList:<init>()', 'ArrayList:<init>()', 'OpenCharObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,java.util.List)', 'CharArrayList:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenCharObjectHashMapTest:testPairsSortedByValue():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'CharArrayList:<init>()', 'ArrayList:<init>()', 'OpenCharObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,java.util.List)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharObjectHashMapTest:testValues():['OpenCharObjectHashMap:<init>()', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:put(char,java.lang.Object)', 'OpenCharObjectHashMap:removeKey(char)', 'ArrayList:<init>(int)', 'OpenCharObjectHashMap:values(java.util.List)', 'List:size()', 'OpenCharObjectHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenCharObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharShortHashMapTest:testAdjustOrPutValue():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:adjustOrPutValue(char,short,short)', 'OpenCharShortHashMap:get(char)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMap:adjustOrPutValue(char,short,short)', 'OpenCharShortHashMap:get(char)', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testClear():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMap:clear()', 'OpenCharShortHashMap:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMap:get(char)', 'OpenCharShortHashMapTest:assertEquals(double,double,double)']
OpenCharShortHashMapTest:testClone():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:clone()', 'OpenCharShortHashMap:clear()', 'OpenCharShortHashMap:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testConstructors():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMapTest:assertEquals(double,double,double)', 'OpenCharShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenCharShortHashMap:<init>(int)', 'OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMapTest:assertEquals(double,double,double)', 'OpenCharShortHashMapTest:assertEquals(double,double,double)', 'OpenCharShortHashMap:<init>(int,double,double)', 'OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMapTest:assertEquals(double,double,double)', 'OpenCharShortHashMapTest:assertEquals(double,double,double)']
OpenCharShortHashMapTest:testContainValue():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:containsValue(short)', 'OpenCharShortHashMapTest:assertTrue(boolean)', 'OpenCharShortHashMap:containsValue(short)', 'OpenCharShortHashMapTest:assertFalse(boolean)']
OpenCharShortHashMapTest:testContainsKey():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:containsKey(char)', 'OpenCharShortHashMapTest:assertTrue(boolean)', 'OpenCharShortHashMap:containsKey(char)', 'OpenCharShortHashMapTest:assertFalse(boolean)']
OpenCharShortHashMapTest:testCopy():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:copy()', 'OpenCharShortHashMap:clear()', 'OpenCharShortHashMap:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testEnsureCapacity():['OpenCharShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenCharShortHashMap:ensureCapacity(int)', 'OpenCharShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testEquals():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:removeKey(char)', 'OpenCharShortHashMap:copy()', 'OpenCharShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenCharShortHashMap:equals(java.lang.Object)', 'OpenCharShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenCharShortHashMapTest:assertFalse(boolean)', 'OpenCharShortHashMap:equals(java.lang.Object)', 'OpenCharShortHashMapTest:assertFalse(boolean)', 'OpenCharShortHashMap:removeKey(char)', 'OpenCharShortHashMap:equals(java.lang.Object)', 'OpenCharShortHashMapTest:assertFalse(boolean)', 'OpenCharShortHashMap:equals(java.lang.Object)', 'OpenCharShortHashMapTest:assertFalse(boolean)']
OpenCharShortHashMapTest:testForEachKey():['CharArrayList:<init>()', 'OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:removeKey(char)', 'OpenCharShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest,org.apache.mahout.math.list.CharArrayList)', 'OpenCharShortHashMap:forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'Arrays:sort(char[])', 'OpenCharShortHashMapTest:assertArrayEquals(char[],char[])']
OpenCharShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:removeKey(char)', 'OpenCharShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest,java.util.List)', 'OpenCharShortHashMap:forEachPair(org.apache.mahout.math.function.CharShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenCharShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest,java.util.List)', 'OpenCharShortHashMap:forEachPair(org.apache.mahout.math.function.CharShortProcedure)', 'List:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testGet():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:get(char)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMap:get(char)', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testKeys():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'CharArrayList:<init>()', 'OpenCharShortHashMap:keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'OpenCharShortHashMap:keys()', 'CharArrayList:sort()', 'OpenCharShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenCharShortHashMapTest:testKeysSortedByValue():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:removeKey(char)', 'CharArrayList:<init>()', 'OpenCharShortHashMap:keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'CharArrayList:toArray(char[])', 'OpenCharShortHashMapTest:assertArrayEquals(char[],char[])']
OpenCharShortHashMapTest:testPairsMatching():['CharArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:removeKey(char)', 'OpenCharShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenCharShortHashMapTest)', 'OpenCharShortHashMap:pairsMatching(org.apache.mahout.math.function.CharShortProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', 'CharArrayList:sort()', 'ShortArrayList:sort()', 'CharArrayList:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testPairsSortedByKey():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'CharArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenCharShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', 'CharArrayList:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:clear()', 'ShortArrayList:clear()', 'OpenCharShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenCharShortHashMapTest:testValues():['OpenCharShortHashMap:<init>()', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:put(char,short)', 'OpenCharShortHashMap:removeKey(char)', 'ShortArrayList:<init>(int)', 'OpenCharShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenCharShortHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testAdjustOrPutValue():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:adjustOrPutValue(double,byte,byte)', 'OpenDoubleByteHashMap:get(double)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'OpenDoubleByteHashMap:adjustOrPutValue(double,byte,byte)', 'OpenDoubleByteHashMap:get(double)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testClear():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'OpenDoubleByteHashMap:clear()', 'OpenDoubleByteHashMap:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'OpenDoubleByteHashMap:get(double)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)']
OpenDoubleByteHashMapTest:testClone():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:clone()', 'OpenDoubleByteHashMap:clear()', 'OpenDoubleByteHashMap:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testConstructors():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleByteHashMap:<init>(int)', 'OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'OpenDoubleByteHashMap:<init>(int,double,double)', 'OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)']
OpenDoubleByteHashMapTest:testContainValue():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:containsValue(byte)', 'OpenDoubleByteHashMapTest:assertTrue(boolean)', 'OpenDoubleByteHashMap:containsValue(byte)', 'OpenDoubleByteHashMapTest:assertFalse(boolean)']
OpenDoubleByteHashMapTest:testContainsKey():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:containsKey(double)', 'OpenDoubleByteHashMapTest:assertTrue(boolean)', 'OpenDoubleByteHashMap:containsKey(double)', 'OpenDoubleByteHashMapTest:assertFalse(boolean)']
OpenDoubleByteHashMapTest:testCopy():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:copy()', 'OpenDoubleByteHashMap:clear()', 'OpenDoubleByteHashMap:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testEnsureCapacity():['OpenDoubleByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleByteHashMap:ensureCapacity(int)', 'OpenDoubleByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testEquals():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:removeKey(double)', 'OpenDoubleByteHashMap:copy()', 'OpenDoubleByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleByteHashMap:equals(java.lang.Object)', 'OpenDoubleByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleByteHashMapTest:assertFalse(boolean)', 'OpenDoubleByteHashMap:equals(java.lang.Object)', 'OpenDoubleByteHashMapTest:assertFalse(boolean)', 'OpenDoubleByteHashMap:removeKey(double)', 'OpenDoubleByteHashMap:equals(java.lang.Object)', 'OpenDoubleByteHashMapTest:assertFalse(boolean)', 'OpenDoubleByteHashMap:equals(java.lang.Object)', 'OpenDoubleByteHashMapTest:assertFalse(boolean)']
OpenDoubleByteHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:removeKey(double)', 'OpenDoubleByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleByteHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleByteHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:removeKey(double)', 'OpenDoubleByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest,java.util.List)', 'OpenDoubleByteHashMap:forEachPair(org.apache.mahout.math.function.DoubleByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenDoubleByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest,java.util.List)', 'OpenDoubleByteHashMap:forEachPair(org.apache.mahout.math.function.DoubleByteProcedure)', 'List:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testGet():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:get(double)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'OpenDoubleByteHashMap:get(double)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testKeys():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'DoubleArrayList:<init>()', 'OpenDoubleByteHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'OpenDoubleByteHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleByteHashMapTest:testKeysSortedByValue():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleByteHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleByteHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleByteHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:removeKey(double)', 'OpenDoubleByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleByteHashMapTest)', 'OpenDoubleByteHashMap:pairsMatching(org.apache.mahout.math.function.DoubleByteProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', 'DoubleArrayList:sort()', 'ByteArrayList:sort()', 'DoubleArrayList:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testPairsSortedByKey():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'DoubleArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenDoubleByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', 'DoubleArrayList:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:clear()', 'ByteArrayList:clear()', 'OpenDoubleByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(double,double,double)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleByteHashMapTest:testValues():['OpenDoubleByteHashMap:<init>()', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:put(double,byte)', 'OpenDoubleByteHashMap:removeKey(double)', 'ByteArrayList:<init>(int)', 'OpenDoubleByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenDoubleByteHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testAdjustOrPutValue():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:adjustOrPutValue(double,char,char)', 'OpenDoubleCharHashMap:get(double)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'OpenDoubleCharHashMap:adjustOrPutValue(double,char,char)', 'OpenDoubleCharHashMap:get(double)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testClear():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'OpenDoubleCharHashMap:clear()', 'OpenDoubleCharHashMap:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'OpenDoubleCharHashMap:get(double)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)']
OpenDoubleCharHashMapTest:testClone():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:clone()', 'OpenDoubleCharHashMap:clear()', 'OpenDoubleCharHashMap:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testConstructors():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleCharHashMap:<init>(int)', 'OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'OpenDoubleCharHashMap:<init>(int,double,double)', 'OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)']
OpenDoubleCharHashMapTest:testContainValue():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:containsValue(char)', 'OpenDoubleCharHashMapTest:assertTrue(boolean)', 'OpenDoubleCharHashMap:containsValue(char)', 'OpenDoubleCharHashMapTest:assertFalse(boolean)']
OpenDoubleCharHashMapTest:testContainsKey():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:containsKey(double)', 'OpenDoubleCharHashMapTest:assertTrue(boolean)', 'OpenDoubleCharHashMap:containsKey(double)', 'OpenDoubleCharHashMapTest:assertFalse(boolean)']
OpenDoubleCharHashMapTest:testCopy():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:copy()', 'OpenDoubleCharHashMap:clear()', 'OpenDoubleCharHashMap:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testEnsureCapacity():['OpenDoubleCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleCharHashMap:ensureCapacity(int)', 'OpenDoubleCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testEquals():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:removeKey(double)', 'OpenDoubleCharHashMap:copy()', 'OpenDoubleCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleCharHashMap:equals(java.lang.Object)', 'OpenDoubleCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleCharHashMapTest:assertFalse(boolean)', 'OpenDoubleCharHashMap:equals(java.lang.Object)', 'OpenDoubleCharHashMapTest:assertFalse(boolean)', 'OpenDoubleCharHashMap:removeKey(double)', 'OpenDoubleCharHashMap:equals(java.lang.Object)', 'OpenDoubleCharHashMapTest:assertFalse(boolean)', 'OpenDoubleCharHashMap:equals(java.lang.Object)', 'OpenDoubleCharHashMapTest:assertFalse(boolean)']
OpenDoubleCharHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:removeKey(double)', 'OpenDoubleCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleCharHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleCharHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:removeKey(double)', 'OpenDoubleCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest,java.util.List)', 'OpenDoubleCharHashMap:forEachPair(org.apache.mahout.math.function.DoubleCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenDoubleCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest,java.util.List)', 'OpenDoubleCharHashMap:forEachPair(org.apache.mahout.math.function.DoubleCharProcedure)', 'List:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testGet():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:get(double)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'OpenDoubleCharHashMap:get(double)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testKeys():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'DoubleArrayList:<init>()', 'OpenDoubleCharHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'OpenDoubleCharHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleCharHashMapTest:testKeysSortedByValue():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleCharHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleCharHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleCharHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'CharArrayList:<init>()', 'OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:removeKey(double)', 'OpenDoubleCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleCharHashMapTest)', 'OpenDoubleCharHashMap:pairsMatching(org.apache.mahout.math.function.DoubleCharProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', 'DoubleArrayList:sort()', 'CharArrayList:sort()', 'DoubleArrayList:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testPairsSortedByKey():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'DoubleArrayList:<init>()', 'CharArrayList:<init>()', 'OpenDoubleCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', 'DoubleArrayList:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:clear()', 'CharArrayList:clear()', 'OpenDoubleCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(double,double,double)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleCharHashMapTest:testValues():['OpenDoubleCharHashMap:<init>()', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:put(double,char)', 'OpenDoubleCharHashMap:removeKey(double)', 'CharArrayList:<init>(int)', 'OpenDoubleCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenDoubleCharHashMapTest:assertEquals(long,long)']
OpenDoubleDoubleHashMapTest:testAdjustOrPutValue():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:adjustOrPutValue(double,double,double)', 'OpenDoubleDoubleHashMap:get(double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'OpenDoubleDoubleHashMap:adjustOrPutValue(double,double,double)', 'OpenDoubleDoubleHashMap:get(double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
OpenDoubleDoubleHashMapTest:testClear():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'OpenDoubleDoubleHashMap:clear()', 'OpenDoubleDoubleHashMap:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'OpenDoubleDoubleHashMap:get(double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
OpenDoubleDoubleHashMapTest:testClone():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:clone()', 'OpenDoubleDoubleHashMap:clear()', 'OpenDoubleDoubleHashMap:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
OpenDoubleDoubleHashMapTest:testConstructors():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleDoubleHashMap:<init>(int)', 'OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'OpenDoubleDoubleHashMap:<init>(int,double,double)', 'OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
OpenDoubleDoubleHashMapTest:testContainValue():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:containsValue(double)', 'OpenDoubleDoubleHashMapTest:assertTrue(boolean)', 'OpenDoubleDoubleHashMap:containsValue(double)', 'OpenDoubleDoubleHashMapTest:assertFalse(boolean)']
OpenDoubleDoubleHashMapTest:testContainsKey():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:containsKey(double)', 'OpenDoubleDoubleHashMapTest:assertTrue(boolean)', 'OpenDoubleDoubleHashMap:containsKey(double)', 'OpenDoubleDoubleHashMapTest:assertFalse(boolean)']
OpenDoubleDoubleHashMapTest:testCopy():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:copy()', 'OpenDoubleDoubleHashMap:clear()', 'OpenDoubleDoubleHashMap:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
OpenDoubleDoubleHashMapTest:testEnsureCapacity():['OpenDoubleDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleDoubleHashMap:ensureCapacity(int)', 'OpenDoubleDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
OpenDoubleDoubleHashMapTest:testEquals():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:removeKey(double)', 'OpenDoubleDoubleHashMap:copy()', 'OpenDoubleDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleDoubleHashMap:equals(java.lang.Object)', 'OpenDoubleDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleDoubleHashMapTest:assertFalse(boolean)', 'OpenDoubleDoubleHashMap:equals(java.lang.Object)', 'OpenDoubleDoubleHashMapTest:assertFalse(boolean)', 'OpenDoubleDoubleHashMap:removeKey(double)', 'OpenDoubleDoubleHashMap:equals(java.lang.Object)', 'OpenDoubleDoubleHashMapTest:assertFalse(boolean)', 'OpenDoubleDoubleHashMap:equals(java.lang.Object)', 'OpenDoubleDoubleHashMapTest:assertFalse(boolean)']
OpenDoubleDoubleHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:removeKey(double)', 'OpenDoubleDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleDoubleHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleDoubleHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:removeKey(double)', 'OpenDoubleDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest,java.util.List)', 'OpenDoubleDoubleHashMap:forEachPair(org.apache.mahout.math.function.DoubleDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'List:clear()', 'OpenDoubleDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest,java.util.List)', 'OpenDoubleDoubleHashMap:forEachPair(org.apache.mahout.math.function.DoubleDoubleProcedure)', 'List:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)']
OpenDoubleDoubleHashMapTest:testGet():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:get(double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'OpenDoubleDoubleHashMap:get(double)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
OpenDoubleDoubleHashMapTest:testKeys():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'DoubleArrayList:<init>()', 'OpenDoubleDoubleHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'OpenDoubleDoubleHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleDoubleHashMapTest:testKeysSortedByValue():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleDoubleHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleDoubleHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:removeKey(double)', 'OpenDoubleDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleDoubleHashMapTest)', 'OpenDoubleDoubleHashMap:pairsMatching(org.apache.mahout.math.function.DoubleDoubleProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:sort()', 'DoubleArrayList:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
OpenDoubleDoubleHashMapTest:testPairsSortedByKey():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'DoubleArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenDoubleDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:clear()', 'DoubleArrayList:clear()', 'OpenDoubleDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
OpenDoubleDoubleHashMapTest:testValues():['OpenDoubleDoubleHashMap:<init>()', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:put(double,double)', 'OpenDoubleDoubleHashMap:removeKey(double)', 'DoubleArrayList:<init>(int)', 'OpenDoubleDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenDoubleDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleDoubleHashMapTest:assertEquals(double,double,double)']
OpenDoubleFloatHashMapTest:testAdjustOrPutValue():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:adjustOrPutValue(double,float,float)', 'OpenDoubleFloatHashMap:get(double)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'OpenDoubleFloatHashMap:adjustOrPutValue(double,float,float)', 'OpenDoubleFloatHashMap:get(double)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
OpenDoubleFloatHashMapTest:testClear():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'OpenDoubleFloatHashMap:clear()', 'OpenDoubleFloatHashMap:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'OpenDoubleFloatHashMap:get(double)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)']
OpenDoubleFloatHashMapTest:testClone():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:clone()', 'OpenDoubleFloatHashMap:clear()', 'OpenDoubleFloatHashMap:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)']
OpenDoubleFloatHashMapTest:testConstructors():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleFloatHashMap:<init>(int)', 'OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'OpenDoubleFloatHashMap:<init>(int,double,double)', 'OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)']
OpenDoubleFloatHashMapTest:testContainValue():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:containsValue(float)', 'OpenDoubleFloatHashMapTest:assertTrue(boolean)', 'OpenDoubleFloatHashMap:containsValue(float)', 'OpenDoubleFloatHashMapTest:assertFalse(boolean)']
OpenDoubleFloatHashMapTest:testContainsKey():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:containsKey(double)', 'OpenDoubleFloatHashMapTest:assertTrue(boolean)', 'OpenDoubleFloatHashMap:containsKey(double)', 'OpenDoubleFloatHashMapTest:assertFalse(boolean)']
OpenDoubleFloatHashMapTest:testCopy():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:copy()', 'OpenDoubleFloatHashMap:clear()', 'OpenDoubleFloatHashMap:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)']
OpenDoubleFloatHashMapTest:testEnsureCapacity():['OpenDoubleFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleFloatHashMap:ensureCapacity(int)', 'OpenDoubleFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)']
OpenDoubleFloatHashMapTest:testEquals():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:removeKey(double)', 'OpenDoubleFloatHashMap:copy()', 'OpenDoubleFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleFloatHashMap:equals(java.lang.Object)', 'OpenDoubleFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleFloatHashMapTest:assertFalse(boolean)', 'OpenDoubleFloatHashMap:equals(java.lang.Object)', 'OpenDoubleFloatHashMapTest:assertFalse(boolean)', 'OpenDoubleFloatHashMap:removeKey(double)', 'OpenDoubleFloatHashMap:equals(java.lang.Object)', 'OpenDoubleFloatHashMapTest:assertFalse(boolean)', 'OpenDoubleFloatHashMap:equals(java.lang.Object)', 'OpenDoubleFloatHashMapTest:assertFalse(boolean)']
OpenDoubleFloatHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:removeKey(double)', 'OpenDoubleFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleFloatHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleFloatHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:removeKey(double)', 'OpenDoubleFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest,java.util.List)', 'OpenDoubleFloatHashMap:forEachPair(org.apache.mahout.math.function.DoubleFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'List:clear()', 'OpenDoubleFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest,java.util.List)', 'OpenDoubleFloatHashMap:forEachPair(org.apache.mahout.math.function.DoubleFloatProcedure)', 'List:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)']
OpenDoubleFloatHashMapTest:testGet():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:get(double)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'OpenDoubleFloatHashMap:get(double)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
OpenDoubleFloatHashMapTest:testKeys():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'DoubleArrayList:<init>()', 'OpenDoubleFloatHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'OpenDoubleFloatHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleFloatHashMapTest:testKeysSortedByValue():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleFloatHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleFloatHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:removeKey(double)', 'OpenDoubleFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleFloatHashMapTest)', 'OpenDoubleFloatHashMap:pairsMatching(org.apache.mahout.math.function.DoubleFloatProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', 'DoubleArrayList:sort()', 'FloatArrayList:sort()', 'DoubleArrayList:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
OpenDoubleFloatHashMapTest:testPairsSortedByKey():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'DoubleArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenDoubleFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', 'DoubleArrayList:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:clear()', 'FloatArrayList:clear()', 'OpenDoubleFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
OpenDoubleFloatHashMapTest:testValues():['OpenDoubleFloatHashMap:<init>()', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:put(double,float)', 'OpenDoubleFloatHashMap:removeKey(double)', 'FloatArrayList:<init>(int)', 'OpenDoubleFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenDoubleFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenDoubleFloatHashMapTest:assertEquals(float,float,float)']
OpenDoubleHashSetTest:testClear():['OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:size()', 'OpenDoubleHashSetTest:assertEquals(long,long)', 'OpenDoubleHashSet:clear()', 'OpenDoubleHashSet:size()', 'OpenDoubleHashSetTest:assertEquals(long,long)']
OpenDoubleHashSetTest:testClone():['OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:clone()', 'OpenDoubleHashSet:clear()', 'OpenDoubleHashSet:size()', 'OpenDoubleHashSetTest:assertEquals(long,long)']
OpenDoubleHashSetTest:testConstructors():['OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', 'OpenDoubleHashSetTest:assertEquals(long,long)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleHashSet:<init>(int)', 'OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', 'OpenDoubleHashSetTest:assertEquals(long,long)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)', 'OpenDoubleHashSet:<init>(int,double,double)', 'OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', 'OpenDoubleHashSetTest:assertEquals(long,long)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)']
OpenDoubleHashSetTest:testContains():['OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:contains(double)', 'OpenDoubleHashSetTest:assertTrue(boolean)', 'OpenDoubleHashSet:contains(double)', 'OpenDoubleHashSetTest:assertFalse(boolean)']
OpenDoubleHashSetTest:testCopy():['OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:copy()', 'OpenDoubleHashSet:clear()', 'OpenDoubleHashSet:size()', 'OpenDoubleHashSetTest:assertEquals(long,long)']
OpenDoubleHashSetTest:testEnsureCapacity():['OpenDoubleHashSet:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleHashSet:ensureCapacity(int)', 'OpenDoubleHashSet:getInternalFactors(int[],double[],double[])', 'OpenDoubleHashSetTest:assertEquals(long,long)']
OpenDoubleHashSetTest:testEquals():['OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:remove(double)', 'OpenDoubleHashSet:copy()', 'OpenDoubleHashSet:equals(java.lang.Object)', 'OpenDoubleHashSetTest:assertTrue(boolean)', 'OpenDoubleHashSet:hashCode()', 'OpenDoubleHashSet:hashCode()', 'OpenDoubleHashSetTest:assertTrue(boolean)', 'OpenDoubleHashSet:equals(java.lang.Object)', 'OpenDoubleHashSetTest:assertTrue(boolean)', 'OpenDoubleHashSet:hashCode()', 'OpenDoubleHashSet:hashCode()', 'OpenDoubleHashSetTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleHashSetTest:assertFalse(boolean)', 'OpenDoubleHashSet:equals(java.lang.Object)', 'OpenDoubleHashSetTest:assertFalse(boolean)', 'OpenDoubleHashSet:remove(double)', 'OpenDoubleHashSet:equals(java.lang.Object)', 'OpenDoubleHashSetTest:assertFalse(boolean)', 'OpenDoubleHashSet:equals(java.lang.Object)', 'OpenDoubleHashSetTest:assertFalse(boolean)', 'OpenDoubleHashSet:hashCode()', 'OpenDoubleHashSet:hashCode()', 'OpenDoubleHashSetTest:assertFalse(boolean)']
OpenDoubleHashSetTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:remove(double)', 'OpenDoubleHashSetTest$1:<init>(org.apache.mahout.math.set.OpenDoubleHashSetTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleHashSet:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleHashSetTest:assertArrayEquals(double[],double[],double)']
OpenDoubleHashSetTest:testKeys():['OpenDoubleHashSet:<init>()', 'OpenDoubleHashSet:add(double)', 'OpenDoubleHashSet:add(double)', 'DoubleArrayList:<init>()', 'OpenDoubleHashSet:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleHashSetTest:assertEquals(double,double,double)', 'OpenDoubleHashSet:keys()', 'DoubleArrayList:sort()', 'OpenDoubleHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleIntHashMapTest:testAdjustOrPutValue():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:adjustOrPutValue(double,int,int)', 'OpenDoubleIntHashMap:get(double)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'OpenDoubleIntHashMap:adjustOrPutValue(double,int,int)', 'OpenDoubleIntHashMap:get(double)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testClear():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'OpenDoubleIntHashMap:clear()', 'OpenDoubleIntHashMap:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'OpenDoubleIntHashMap:get(double)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)']
OpenDoubleIntHashMapTest:testClone():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:clone()', 'OpenDoubleIntHashMap:clear()', 'OpenDoubleIntHashMap:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testConstructors():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleIntHashMap:<init>(int)', 'OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'OpenDoubleIntHashMap:<init>(int,double,double)', 'OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)']
OpenDoubleIntHashMapTest:testContainValue():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:containsValue(int)', 'OpenDoubleIntHashMapTest:assertTrue(boolean)', 'OpenDoubleIntHashMap:containsValue(int)', 'OpenDoubleIntHashMapTest:assertFalse(boolean)']
OpenDoubleIntHashMapTest:testContainsKey():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:containsKey(double)', 'OpenDoubleIntHashMapTest:assertTrue(boolean)', 'OpenDoubleIntHashMap:containsKey(double)', 'OpenDoubleIntHashMapTest:assertFalse(boolean)']
OpenDoubleIntHashMapTest:testCopy():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:copy()', 'OpenDoubleIntHashMap:clear()', 'OpenDoubleIntHashMap:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testEnsureCapacity():['OpenDoubleIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleIntHashMap:ensureCapacity(int)', 'OpenDoubleIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testEquals():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:removeKey(double)', 'OpenDoubleIntHashMap:copy()', 'OpenDoubleIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleIntHashMap:equals(java.lang.Object)', 'OpenDoubleIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleIntHashMapTest:assertFalse(boolean)', 'OpenDoubleIntHashMap:equals(java.lang.Object)', 'OpenDoubleIntHashMapTest:assertFalse(boolean)', 'OpenDoubleIntHashMap:removeKey(double)', 'OpenDoubleIntHashMap:equals(java.lang.Object)', 'OpenDoubleIntHashMapTest:assertFalse(boolean)', 'OpenDoubleIntHashMap:equals(java.lang.Object)', 'OpenDoubleIntHashMapTest:assertFalse(boolean)']
OpenDoubleIntHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:removeKey(double)', 'OpenDoubleIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleIntHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleIntHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:removeKey(double)', 'OpenDoubleIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest,java.util.List)', 'OpenDoubleIntHashMap:forEachPair(org.apache.mahout.math.function.DoubleIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenDoubleIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest,java.util.List)', 'OpenDoubleIntHashMap:forEachPair(org.apache.mahout.math.function.DoubleIntProcedure)', 'List:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testGet():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:get(double)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'OpenDoubleIntHashMap:get(double)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testKeys():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'DoubleArrayList:<init>()', 'OpenDoubleIntHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'OpenDoubleIntHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleIntHashMapTest:testKeysSortedByValue():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleIntHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleIntHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleIntHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'IntArrayList:<init>()', 'OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:removeKey(double)', 'OpenDoubleIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleIntHashMapTest)', 'OpenDoubleIntHashMap:pairsMatching(org.apache.mahout.math.function.DoubleIntProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', 'DoubleArrayList:sort()', 'IntArrayList:sort()', 'DoubleArrayList:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testPairsSortedByKey():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'DoubleArrayList:<init>()', 'IntArrayList:<init>()', 'OpenDoubleIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', 'DoubleArrayList:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:clear()', 'IntArrayList:clear()', 'OpenDoubleIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleIntHashMapTest:testValues():['OpenDoubleIntHashMap:<init>()', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:put(double,int)', 'OpenDoubleIntHashMap:removeKey(double)', 'IntArrayList:<init>(int)', 'OpenDoubleIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenDoubleIntHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testAdjustOrPutValue():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:adjustOrPutValue(double,long,long)', 'OpenDoubleLongHashMap:get(double)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'OpenDoubleLongHashMap:adjustOrPutValue(double,long,long)', 'OpenDoubleLongHashMap:get(double)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testClear():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'OpenDoubleLongHashMap:clear()', 'OpenDoubleLongHashMap:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'OpenDoubleLongHashMap:get(double)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)']
OpenDoubleLongHashMapTest:testClone():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:clone()', 'OpenDoubleLongHashMap:clear()', 'OpenDoubleLongHashMap:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testConstructors():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleLongHashMap:<init>(int)', 'OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'OpenDoubleLongHashMap:<init>(int,double,double)', 'OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)']
OpenDoubleLongHashMapTest:testContainValue():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:containsValue(long)', 'OpenDoubleLongHashMapTest:assertTrue(boolean)', 'OpenDoubleLongHashMap:containsValue(long)', 'OpenDoubleLongHashMapTest:assertFalse(boolean)']
OpenDoubleLongHashMapTest:testContainsKey():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:containsKey(double)', 'OpenDoubleLongHashMapTest:assertTrue(boolean)', 'OpenDoubleLongHashMap:containsKey(double)', 'OpenDoubleLongHashMapTest:assertFalse(boolean)']
OpenDoubleLongHashMapTest:testCopy():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:copy()', 'OpenDoubleLongHashMap:clear()', 'OpenDoubleLongHashMap:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testEnsureCapacity():['OpenDoubleLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleLongHashMap:ensureCapacity(int)', 'OpenDoubleLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testEquals():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:removeKey(double)', 'OpenDoubleLongHashMap:copy()', 'OpenDoubleLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleLongHashMap:equals(java.lang.Object)', 'OpenDoubleLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleLongHashMapTest:assertFalse(boolean)', 'OpenDoubleLongHashMap:equals(java.lang.Object)', 'OpenDoubleLongHashMapTest:assertFalse(boolean)', 'OpenDoubleLongHashMap:removeKey(double)', 'OpenDoubleLongHashMap:equals(java.lang.Object)', 'OpenDoubleLongHashMapTest:assertFalse(boolean)', 'OpenDoubleLongHashMap:equals(java.lang.Object)', 'OpenDoubleLongHashMapTest:assertFalse(boolean)']
OpenDoubleLongHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:removeKey(double)', 'OpenDoubleLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleLongHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleLongHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:removeKey(double)', 'OpenDoubleLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest,java.util.List)', 'OpenDoubleLongHashMap:forEachPair(org.apache.mahout.math.function.DoubleLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenDoubleLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest,java.util.List)', 'OpenDoubleLongHashMap:forEachPair(org.apache.mahout.math.function.DoubleLongProcedure)', 'List:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testGet():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:get(double)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'OpenDoubleLongHashMap:get(double)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testKeys():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'DoubleArrayList:<init>()', 'OpenDoubleLongHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'OpenDoubleLongHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleLongHashMapTest:testKeysSortedByValue():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleLongHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleLongHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleLongHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'LongArrayList:<init>()', 'OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:removeKey(double)', 'OpenDoubleLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleLongHashMapTest)', 'OpenDoubleLongHashMap:pairsMatching(org.apache.mahout.math.function.DoubleLongProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', 'DoubleArrayList:sort()', 'LongArrayList:sort()', 'DoubleArrayList:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testPairsSortedByKey():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'DoubleArrayList:<init>()', 'LongArrayList:<init>()', 'OpenDoubleLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', 'DoubleArrayList:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:clear()', 'LongArrayList:clear()', 'OpenDoubleLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleLongHashMapTest:testValues():['OpenDoubleLongHashMap:<init>()', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:put(double,long)', 'OpenDoubleLongHashMap:removeKey(double)', 'LongArrayList:<init>(int)', 'OpenDoubleLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenDoubleLongHashMapTest:assertEquals(long,long)']
OpenDoubleObjectHashMapTest:testClear():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'OpenDoubleObjectHashMap:clear()', 'OpenDoubleObjectHashMap:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OpenDoubleObjectHashMap:containsKey(double)', 'OpenDoubleObjectHashMapTest:assertFalse(java.lang.String,boolean)', 'OpenDoubleObjectHashMap:get(double)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenDoubleObjectHashMapTest:testClone():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:clone()', 'OpenDoubleObjectHashMap:clear()', 'OpenDoubleObjectHashMap:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)']
OpenDoubleObjectHashMapTest:testConstructors():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleObjectHashMap:<init>(int)', 'OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'OpenDoubleObjectHashMap:<init>(int,double,double)', 'OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)']
OpenDoubleObjectHashMapTest:testContainValue():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:containsValue(java.lang.Object)', 'OpenDoubleObjectHashMapTest:assertTrue(boolean)', 'OpenDoubleObjectHashMap:containsValue(java.lang.Object)', 'OpenDoubleObjectHashMapTest:assertFalse(boolean)']
OpenDoubleObjectHashMapTest:testContainsKey():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:containsKey(double)', 'OpenDoubleObjectHashMapTest:assertTrue(boolean)', 'OpenDoubleObjectHashMap:containsKey(double)', 'OpenDoubleObjectHashMapTest:assertFalse(boolean)']
OpenDoubleObjectHashMapTest:testCopy():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:copy()', 'OpenDoubleObjectHashMap:clear()', 'OpenDoubleObjectHashMap:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)']
OpenDoubleObjectHashMapTest:testEnsureCapacity():['OpenDoubleObjectHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleObjectHashMap:ensureCapacity(int)', 'OpenDoubleObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)']
OpenDoubleObjectHashMapTest:testEquals():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:removeKey(double)', 'OpenDoubleObjectHashMap:copy()', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleObjectHashMap:equals(java.lang.Object)', 'OpenDoubleObjectHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleObjectHashMapTest:assertFalse(boolean)', 'OpenDoubleObjectHashMap:equals(java.lang.Object)', 'OpenDoubleObjectHashMapTest:assertFalse(boolean)', 'OpenDoubleObjectHashMap:removeKey(double)', 'OpenDoubleObjectHashMap:equals(java.lang.Object)', 'OpenDoubleObjectHashMapTest:assertFalse(boolean)', 'OpenDoubleObjectHashMap:equals(java.lang.Object)', 'OpenDoubleObjectHashMapTest:assertFalse(boolean)']
OpenDoubleObjectHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:removeKey(double)', 'OpenDoubleObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleObjectHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleObjectHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleObjectHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:removeKey(double)', 'OpenDoubleObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest,java.util.List)', 'OpenDoubleObjectHashMap:forEachPair(org.apache.mahout.math.function.DoubleObjectProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenDoubleObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest,java.util.List)', 'OpenDoubleObjectHashMap:forEachPair(org.apache.mahout.math.function.DoubleObjectProcedure)', 'List:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)']
OpenDoubleObjectHashMapTest:testGet():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:get(double)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenDoubleObjectHashMap:get(double)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenDoubleObjectHashMapTest:testKeys():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'DoubleArrayList:<init>()', 'OpenDoubleObjectHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'OpenDoubleObjectHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleObjectHashMapTest:testKeysSortedByValue():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleObjectHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleObjectHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'ArrayList:<init>()', 'OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:removeKey(double)', 'OpenDoubleObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleObjectHashMapTest)', 'OpenDoubleObjectHashMap:pairsMatching(org.apache.mahout.math.function.DoubleObjectProcedure,org.apache.mahout.math.list.DoubleArrayList,java.util.List)', 'DoubleArrayList:sort()', 'Collections:sort(java.util.List)', 'DoubleArrayList:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenDoubleObjectHashMapTest:testPairsSortedByKey():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'DoubleArrayList:<init>()', 'ArrayList:<init>()', 'OpenDoubleObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,java.util.List)', 'DoubleArrayList:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenDoubleObjectHashMapTest:testPairsSortedByValue():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'DoubleArrayList:<init>()', 'ArrayList:<init>()', 'OpenDoubleObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,java.util.List)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleObjectHashMapTest:testValues():['OpenDoubleObjectHashMap:<init>()', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:put(double,java.lang.Object)', 'OpenDoubleObjectHashMap:removeKey(double)', 'ArrayList:<init>(int)', 'OpenDoubleObjectHashMap:values(java.util.List)', 'List:size()', 'OpenDoubleObjectHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenDoubleObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleShortHashMapTest:testAdjustOrPutValue():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:adjustOrPutValue(double,short,short)', 'OpenDoubleShortHashMap:get(double)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'OpenDoubleShortHashMap:adjustOrPutValue(double,short,short)', 'OpenDoubleShortHashMap:get(double)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testClear():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'OpenDoubleShortHashMap:clear()', 'OpenDoubleShortHashMap:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'OpenDoubleShortHashMap:get(double)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)']
OpenDoubleShortHashMapTest:testClone():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:clone()', 'OpenDoubleShortHashMap:clear()', 'OpenDoubleShortHashMap:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testConstructors():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenDoubleShortHashMap:<init>(int)', 'OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'OpenDoubleShortHashMap:<init>(int,double,double)', 'OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)']
OpenDoubleShortHashMapTest:testContainValue():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:containsValue(short)', 'OpenDoubleShortHashMapTest:assertTrue(boolean)', 'OpenDoubleShortHashMap:containsValue(short)', 'OpenDoubleShortHashMapTest:assertFalse(boolean)']
OpenDoubleShortHashMapTest:testContainsKey():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:containsKey(double)', 'OpenDoubleShortHashMapTest:assertTrue(boolean)', 'OpenDoubleShortHashMap:containsKey(double)', 'OpenDoubleShortHashMapTest:assertFalse(boolean)']
OpenDoubleShortHashMapTest:testCopy():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:copy()', 'OpenDoubleShortHashMap:clear()', 'OpenDoubleShortHashMap:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testEnsureCapacity():['OpenDoubleShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenDoubleShortHashMap:ensureCapacity(int)', 'OpenDoubleShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testEquals():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:removeKey(double)', 'OpenDoubleShortHashMap:copy()', 'OpenDoubleShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenDoubleShortHashMap:equals(java.lang.Object)', 'OpenDoubleShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenDoubleShortHashMapTest:assertFalse(boolean)', 'OpenDoubleShortHashMap:equals(java.lang.Object)', 'OpenDoubleShortHashMapTest:assertFalse(boolean)', 'OpenDoubleShortHashMap:removeKey(double)', 'OpenDoubleShortHashMap:equals(java.lang.Object)', 'OpenDoubleShortHashMapTest:assertFalse(boolean)', 'OpenDoubleShortHashMap:equals(java.lang.Object)', 'OpenDoubleShortHashMapTest:assertFalse(boolean)']
OpenDoubleShortHashMapTest:testForEachKey():['DoubleArrayList:<init>()', 'OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:removeKey(double)', 'OpenDoubleShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleShortHashMap:forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'Arrays:sort(double[])', 'OpenDoubleShortHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:removeKey(double)', 'OpenDoubleShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest,java.util.List)', 'OpenDoubleShortHashMap:forEachPair(org.apache.mahout.math.function.DoubleShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenDoubleShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest,java.util.List)', 'OpenDoubleShortHashMap:forEachPair(org.apache.mahout.math.function.DoubleShortProcedure)', 'List:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testGet():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:get(double)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'OpenDoubleShortHashMap:get(double)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testKeys():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'DoubleArrayList:<init>()', 'OpenDoubleShortHashMap:keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'OpenDoubleShortHashMap:keys()', 'DoubleArrayList:sort()', 'OpenDoubleShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenDoubleShortHashMapTest:testKeysSortedByValue():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:removeKey(double)', 'DoubleArrayList:<init>()', 'OpenDoubleShortHashMap:keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'DoubleArrayList:toArray(double[])', 'OpenDoubleShortHashMapTest:assertArrayEquals(double[],double[],double)']
OpenDoubleShortHashMapTest:testPairsMatching():['DoubleArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:removeKey(double)', 'OpenDoubleShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenDoubleShortHashMapTest)', 'OpenDoubleShortHashMap:pairsMatching(org.apache.mahout.math.function.DoubleShortProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', 'DoubleArrayList:sort()', 'ShortArrayList:sort()', 'DoubleArrayList:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testPairsSortedByKey():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'DoubleArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenDoubleShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', 'DoubleArrayList:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:clear()', 'ShortArrayList:clear()', 'OpenDoubleShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenDoubleShortHashMapTest:testValues():['OpenDoubleShortHashMap:<init>()', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:put(double,short)', 'OpenDoubleShortHashMap:removeKey(double)', 'ShortArrayList:<init>(int)', 'OpenDoubleShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenDoubleShortHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testAdjustOrPutValue():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:adjustOrPutValue(float,byte,byte)', 'OpenFloatByteHashMap:get(float)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'OpenFloatByteHashMap:adjustOrPutValue(float,byte,byte)', 'OpenFloatByteHashMap:get(float)', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testClear():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'OpenFloatByteHashMap:clear()', 'OpenFloatByteHashMap:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'OpenFloatByteHashMap:get(float)', 'OpenFloatByteHashMapTest:assertEquals(double,double,double)']
OpenFloatByteHashMapTest:testClone():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:clone()', 'OpenFloatByteHashMap:clear()', 'OpenFloatByteHashMap:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testConstructors():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'OpenFloatByteHashMapTest:assertEquals(double,double,double)', 'OpenFloatByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatByteHashMap:<init>(int)', 'OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'OpenFloatByteHashMapTest:assertEquals(double,double,double)', 'OpenFloatByteHashMapTest:assertEquals(double,double,double)', 'OpenFloatByteHashMap:<init>(int,double,double)', 'OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'OpenFloatByteHashMapTest:assertEquals(double,double,double)', 'OpenFloatByteHashMapTest:assertEquals(double,double,double)']
OpenFloatByteHashMapTest:testContainValue():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:containsValue(byte)', 'OpenFloatByteHashMapTest:assertTrue(boolean)', 'OpenFloatByteHashMap:containsValue(byte)', 'OpenFloatByteHashMapTest:assertFalse(boolean)']
OpenFloatByteHashMapTest:testContainsKey():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:containsKey(float)', 'OpenFloatByteHashMapTest:assertTrue(boolean)', 'OpenFloatByteHashMap:containsKey(float)', 'OpenFloatByteHashMapTest:assertFalse(boolean)']
OpenFloatByteHashMapTest:testCopy():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:copy()', 'OpenFloatByteHashMap:clear()', 'OpenFloatByteHashMap:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testEnsureCapacity():['OpenFloatByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatByteHashMap:ensureCapacity(int)', 'OpenFloatByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testEquals():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:removeKey(float)', 'OpenFloatByteHashMap:copy()', 'OpenFloatByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatByteHashMap:equals(java.lang.Object)', 'OpenFloatByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatByteHashMapTest:assertFalse(boolean)', 'OpenFloatByteHashMap:equals(java.lang.Object)', 'OpenFloatByteHashMapTest:assertFalse(boolean)', 'OpenFloatByteHashMap:removeKey(float)', 'OpenFloatByteHashMap:equals(java.lang.Object)', 'OpenFloatByteHashMapTest:assertFalse(boolean)', 'OpenFloatByteHashMap:equals(java.lang.Object)', 'OpenFloatByteHashMapTest:assertFalse(boolean)']
OpenFloatByteHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:removeKey(float)', 'OpenFloatByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatByteHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatByteHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:removeKey(float)', 'OpenFloatByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest,java.util.List)', 'OpenFloatByteHashMap:forEachPair(org.apache.mahout.math.function.FloatByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenFloatByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest,java.util.List)', 'OpenFloatByteHashMap:forEachPair(org.apache.mahout.math.function.FloatByteProcedure)', 'List:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testGet():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:get(float)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'OpenFloatByteHashMap:get(float)', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testKeys():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'FloatArrayList:<init>()', 'OpenFloatByteHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'OpenFloatByteHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatByteHashMapTest:testKeysSortedByValue():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatByteHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatByteHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatByteHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:removeKey(float)', 'OpenFloatByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatByteHashMapTest)', 'OpenFloatByteHashMap:pairsMatching(org.apache.mahout.math.function.FloatByteProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', 'FloatArrayList:sort()', 'ByteArrayList:sort()', 'FloatArrayList:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testPairsSortedByKey():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'FloatArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenFloatByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', 'FloatArrayList:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:clear()', 'ByteArrayList:clear()', 'OpenFloatByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(float,float,float)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatByteHashMapTest:testValues():['OpenFloatByteHashMap:<init>()', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:put(float,byte)', 'OpenFloatByteHashMap:removeKey(float)', 'ByteArrayList:<init>(int)', 'OpenFloatByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenFloatByteHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testAdjustOrPutValue():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:adjustOrPutValue(float,char,char)', 'OpenFloatCharHashMap:get(float)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'OpenFloatCharHashMap:adjustOrPutValue(float,char,char)', 'OpenFloatCharHashMap:get(float)', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testClear():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'OpenFloatCharHashMap:clear()', 'OpenFloatCharHashMap:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'OpenFloatCharHashMap:get(float)', 'OpenFloatCharHashMapTest:assertEquals(double,double,double)']
OpenFloatCharHashMapTest:testClone():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:clone()', 'OpenFloatCharHashMap:clear()', 'OpenFloatCharHashMap:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testConstructors():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'OpenFloatCharHashMapTest:assertEquals(double,double,double)', 'OpenFloatCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatCharHashMap:<init>(int)', 'OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'OpenFloatCharHashMapTest:assertEquals(double,double,double)', 'OpenFloatCharHashMapTest:assertEquals(double,double,double)', 'OpenFloatCharHashMap:<init>(int,double,double)', 'OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'OpenFloatCharHashMapTest:assertEquals(double,double,double)', 'OpenFloatCharHashMapTest:assertEquals(double,double,double)']
OpenFloatCharHashMapTest:testContainValue():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:containsValue(char)', 'OpenFloatCharHashMapTest:assertTrue(boolean)', 'OpenFloatCharHashMap:containsValue(char)', 'OpenFloatCharHashMapTest:assertFalse(boolean)']
OpenFloatCharHashMapTest:testContainsKey():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:containsKey(float)', 'OpenFloatCharHashMapTest:assertTrue(boolean)', 'OpenFloatCharHashMap:containsKey(float)', 'OpenFloatCharHashMapTest:assertFalse(boolean)']
OpenFloatCharHashMapTest:testCopy():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:copy()', 'OpenFloatCharHashMap:clear()', 'OpenFloatCharHashMap:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testEnsureCapacity():['OpenFloatCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatCharHashMap:ensureCapacity(int)', 'OpenFloatCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testEquals():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:removeKey(float)', 'OpenFloatCharHashMap:copy()', 'OpenFloatCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatCharHashMap:equals(java.lang.Object)', 'OpenFloatCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatCharHashMapTest:assertFalse(boolean)', 'OpenFloatCharHashMap:equals(java.lang.Object)', 'OpenFloatCharHashMapTest:assertFalse(boolean)', 'OpenFloatCharHashMap:removeKey(float)', 'OpenFloatCharHashMap:equals(java.lang.Object)', 'OpenFloatCharHashMapTest:assertFalse(boolean)', 'OpenFloatCharHashMap:equals(java.lang.Object)', 'OpenFloatCharHashMapTest:assertFalse(boolean)']
OpenFloatCharHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:removeKey(float)', 'OpenFloatCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatCharHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatCharHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:removeKey(float)', 'OpenFloatCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest,java.util.List)', 'OpenFloatCharHashMap:forEachPair(org.apache.mahout.math.function.FloatCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenFloatCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest,java.util.List)', 'OpenFloatCharHashMap:forEachPair(org.apache.mahout.math.function.FloatCharProcedure)', 'List:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testGet():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:get(float)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'OpenFloatCharHashMap:get(float)', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testKeys():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'FloatArrayList:<init>()', 'OpenFloatCharHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'OpenFloatCharHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatCharHashMapTest:testKeysSortedByValue():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatCharHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatCharHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatCharHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'CharArrayList:<init>()', 'OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:removeKey(float)', 'OpenFloatCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatCharHashMapTest)', 'OpenFloatCharHashMap:pairsMatching(org.apache.mahout.math.function.FloatCharProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', 'FloatArrayList:sort()', 'CharArrayList:sort()', 'FloatArrayList:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testPairsSortedByKey():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'FloatArrayList:<init>()', 'CharArrayList:<init>()', 'OpenFloatCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', 'FloatArrayList:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:clear()', 'CharArrayList:clear()', 'OpenFloatCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(float,float,float)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatCharHashMapTest:testValues():['OpenFloatCharHashMap:<init>()', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:put(float,char)', 'OpenFloatCharHashMap:removeKey(float)', 'CharArrayList:<init>(int)', 'OpenFloatCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenFloatCharHashMapTest:assertEquals(long,long)']
OpenFloatDoubleHashMapTest:testAdjustOrPutValue():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:adjustOrPutValue(float,double,double)', 'OpenFloatDoubleHashMap:get(float)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'OpenFloatDoubleHashMap:adjustOrPutValue(float,double,double)', 'OpenFloatDoubleHashMap:get(float)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
OpenFloatDoubleHashMapTest:testClear():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'OpenFloatDoubleHashMap:clear()', 'OpenFloatDoubleHashMap:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'OpenFloatDoubleHashMap:get(float)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
OpenFloatDoubleHashMapTest:testClone():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:clone()', 'OpenFloatDoubleHashMap:clear()', 'OpenFloatDoubleHashMap:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)']
OpenFloatDoubleHashMapTest:testConstructors():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatDoubleHashMap:<init>(int)', 'OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'OpenFloatDoubleHashMap:<init>(int,double,double)', 'OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
OpenFloatDoubleHashMapTest:testContainValue():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:containsValue(double)', 'OpenFloatDoubleHashMapTest:assertTrue(boolean)', 'OpenFloatDoubleHashMap:containsValue(double)', 'OpenFloatDoubleHashMapTest:assertFalse(boolean)']
OpenFloatDoubleHashMapTest:testContainsKey():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:containsKey(float)', 'OpenFloatDoubleHashMapTest:assertTrue(boolean)', 'OpenFloatDoubleHashMap:containsKey(float)', 'OpenFloatDoubleHashMapTest:assertFalse(boolean)']
OpenFloatDoubleHashMapTest:testCopy():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:copy()', 'OpenFloatDoubleHashMap:clear()', 'OpenFloatDoubleHashMap:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)']
OpenFloatDoubleHashMapTest:testEnsureCapacity():['OpenFloatDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatDoubleHashMap:ensureCapacity(int)', 'OpenFloatDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)']
OpenFloatDoubleHashMapTest:testEquals():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:removeKey(float)', 'OpenFloatDoubleHashMap:copy()', 'OpenFloatDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatDoubleHashMap:equals(java.lang.Object)', 'OpenFloatDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatDoubleHashMapTest:assertFalse(boolean)', 'OpenFloatDoubleHashMap:equals(java.lang.Object)', 'OpenFloatDoubleHashMapTest:assertFalse(boolean)', 'OpenFloatDoubleHashMap:removeKey(float)', 'OpenFloatDoubleHashMap:equals(java.lang.Object)', 'OpenFloatDoubleHashMapTest:assertFalse(boolean)', 'OpenFloatDoubleHashMap:equals(java.lang.Object)', 'OpenFloatDoubleHashMapTest:assertFalse(boolean)']
OpenFloatDoubleHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:removeKey(float)', 'OpenFloatDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatDoubleHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatDoubleHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:removeKey(float)', 'OpenFloatDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest,java.util.List)', 'OpenFloatDoubleHashMap:forEachPair(org.apache.mahout.math.function.FloatDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'List:clear()', 'OpenFloatDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest,java.util.List)', 'OpenFloatDoubleHashMap:forEachPair(org.apache.mahout.math.function.FloatDoubleProcedure)', 'List:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)']
OpenFloatDoubleHashMapTest:testGet():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:get(float)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'OpenFloatDoubleHashMap:get(float)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
OpenFloatDoubleHashMapTest:testKeys():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'FloatArrayList:<init>()', 'OpenFloatDoubleHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'OpenFloatDoubleHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatDoubleHashMapTest:testKeysSortedByValue():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatDoubleHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatDoubleHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:removeKey(float)', 'OpenFloatDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatDoubleHashMapTest)', 'OpenFloatDoubleHashMap:pairsMatching(org.apache.mahout.math.function.FloatDoubleProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'FloatArrayList:sort()', 'DoubleArrayList:sort()', 'FloatArrayList:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
OpenFloatDoubleHashMapTest:testPairsSortedByKey():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'FloatArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenFloatDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'FloatArrayList:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:clear()', 'DoubleArrayList:clear()', 'OpenFloatDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'FloatArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(float,float,float)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
OpenFloatDoubleHashMapTest:testValues():['OpenFloatDoubleHashMap:<init>()', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:put(float,double)', 'OpenFloatDoubleHashMap:removeKey(float)', 'DoubleArrayList:<init>(int)', 'OpenFloatDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenFloatDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenFloatDoubleHashMapTest:assertEquals(double,double,double)']
OpenFloatFloatHashMapTest:testAdjustOrPutValue():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:adjustOrPutValue(float,float,float)', 'OpenFloatFloatHashMap:get(float)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'OpenFloatFloatHashMap:adjustOrPutValue(float,float,float)', 'OpenFloatFloatHashMap:get(float)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
OpenFloatFloatHashMapTest:testClear():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'OpenFloatFloatHashMap:clear()', 'OpenFloatFloatHashMap:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'OpenFloatFloatHashMap:get(float)', 'OpenFloatFloatHashMapTest:assertEquals(double,double,double)']
OpenFloatFloatHashMapTest:testClone():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:clone()', 'OpenFloatFloatHashMap:clear()', 'OpenFloatFloatHashMap:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)']
OpenFloatFloatHashMapTest:testConstructors():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'OpenFloatFloatHashMapTest:assertEquals(double,double,double)', 'OpenFloatFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatFloatHashMap:<init>(int)', 'OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'OpenFloatFloatHashMapTest:assertEquals(double,double,double)', 'OpenFloatFloatHashMapTest:assertEquals(double,double,double)', 'OpenFloatFloatHashMap:<init>(int,double,double)', 'OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'OpenFloatFloatHashMapTest:assertEquals(double,double,double)', 'OpenFloatFloatHashMapTest:assertEquals(double,double,double)']
OpenFloatFloatHashMapTest:testContainValue():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:containsValue(float)', 'OpenFloatFloatHashMapTest:assertTrue(boolean)', 'OpenFloatFloatHashMap:containsValue(float)', 'OpenFloatFloatHashMapTest:assertFalse(boolean)']
OpenFloatFloatHashMapTest:testContainsKey():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:containsKey(float)', 'OpenFloatFloatHashMapTest:assertTrue(boolean)', 'OpenFloatFloatHashMap:containsKey(float)', 'OpenFloatFloatHashMapTest:assertFalse(boolean)']
OpenFloatFloatHashMapTest:testCopy():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:copy()', 'OpenFloatFloatHashMap:clear()', 'OpenFloatFloatHashMap:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)']
OpenFloatFloatHashMapTest:testEnsureCapacity():['OpenFloatFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatFloatHashMap:ensureCapacity(int)', 'OpenFloatFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatFloatHashMapTest:assertEquals(long,long)']
OpenFloatFloatHashMapTest:testEquals():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:removeKey(float)', 'OpenFloatFloatHashMap:copy()', 'OpenFloatFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatFloatHashMap:equals(java.lang.Object)', 'OpenFloatFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatFloatHashMapTest:assertFalse(boolean)', 'OpenFloatFloatHashMap:equals(java.lang.Object)', 'OpenFloatFloatHashMapTest:assertFalse(boolean)', 'OpenFloatFloatHashMap:removeKey(float)', 'OpenFloatFloatHashMap:equals(java.lang.Object)', 'OpenFloatFloatHashMapTest:assertFalse(boolean)', 'OpenFloatFloatHashMap:equals(java.lang.Object)', 'OpenFloatFloatHashMapTest:assertFalse(boolean)']
OpenFloatFloatHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:removeKey(float)', 'OpenFloatFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatFloatHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatFloatHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:removeKey(float)', 'OpenFloatFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest,java.util.List)', 'OpenFloatFloatHashMap:forEachPair(org.apache.mahout.math.function.FloatFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'List:clear()', 'OpenFloatFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest,java.util.List)', 'OpenFloatFloatHashMap:forEachPair(org.apache.mahout.math.function.FloatFloatProcedure)', 'List:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)']
OpenFloatFloatHashMapTest:testGet():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:get(float)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'OpenFloatFloatHashMap:get(float)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
OpenFloatFloatHashMapTest:testKeys():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'FloatArrayList:<init>()', 'OpenFloatFloatHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'OpenFloatFloatHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatFloatHashMapTest:testKeysSortedByValue():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatFloatHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatFloatHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:removeKey(float)', 'OpenFloatFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatFloatHashMapTest)', 'OpenFloatFloatHashMap:pairsMatching(org.apache.mahout.math.function.FloatFloatProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:sort()', 'FloatArrayList:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
OpenFloatFloatHashMapTest:testPairsSortedByKey():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'FloatArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenFloatFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:clear()', 'FloatArrayList:clear()', 'OpenFloatFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
OpenFloatFloatHashMapTest:testValues():['OpenFloatFloatHashMap:<init>()', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:put(float,float)', 'OpenFloatFloatHashMap:removeKey(float)', 'FloatArrayList:<init>(int)', 'OpenFloatFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenFloatFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatFloatHashMapTest:assertEquals(float,float,float)']
OpenFloatHashSetTest:testClear():['OpenFloatHashSet:<init>()', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:size()', 'OpenFloatHashSetTest:assertEquals(long,long)', 'OpenFloatHashSet:clear()', 'OpenFloatHashSet:size()', 'OpenFloatHashSetTest:assertEquals(long,long)']
OpenFloatHashSetTest:testClone():['OpenFloatHashSet:<init>()', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:clone()', 'OpenFloatHashSet:clear()', 'OpenFloatHashSet:size()', 'OpenFloatHashSetTest:assertEquals(long,long)']
OpenFloatHashSetTest:testConstructors():['OpenFloatHashSet:<init>()', 'OpenFloatHashSet:getInternalFactors(int[],double[],double[])', 'OpenFloatHashSetTest:assertEquals(long,long)', 'OpenFloatHashSetTest:assertEquals(double,double,double)', 'OpenFloatHashSetTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatHashSet:<init>(int)', 'OpenFloatHashSet:getInternalFactors(int[],double[],double[])', 'OpenFloatHashSetTest:assertEquals(long,long)', 'OpenFloatHashSetTest:assertEquals(double,double,double)', 'OpenFloatHashSetTest:assertEquals(double,double,double)', 'OpenFloatHashSet:<init>(int,double,double)', 'OpenFloatHashSet:getInternalFactors(int[],double[],double[])', 'OpenFloatHashSetTest:assertEquals(long,long)', 'OpenFloatHashSetTest:assertEquals(double,double,double)', 'OpenFloatHashSetTest:assertEquals(double,double,double)']
OpenFloatHashSetTest:testContains():['OpenFloatHashSet:<init>()', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:contains(float)', 'OpenFloatHashSetTest:assertTrue(boolean)', 'OpenFloatHashSet:contains(float)', 'OpenFloatHashSetTest:assertFalse(boolean)']
OpenFloatHashSetTest:testCopy():['OpenFloatHashSet:<init>()', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:copy()', 'OpenFloatHashSet:clear()', 'OpenFloatHashSet:size()', 'OpenFloatHashSetTest:assertEquals(long,long)']
OpenFloatHashSetTest:testEnsureCapacity():['OpenFloatHashSet:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatHashSet:ensureCapacity(int)', 'OpenFloatHashSet:getInternalFactors(int[],double[],double[])', 'OpenFloatHashSetTest:assertEquals(long,long)']
OpenFloatHashSetTest:testEquals():['OpenFloatHashSet:<init>()', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:remove(float)', 'OpenFloatHashSet:copy()', 'OpenFloatHashSet:equals(java.lang.Object)', 'OpenFloatHashSetTest:assertTrue(boolean)', 'OpenFloatHashSet:hashCode()', 'OpenFloatHashSet:hashCode()', 'OpenFloatHashSetTest:assertTrue(boolean)', 'OpenFloatHashSet:equals(java.lang.Object)', 'OpenFloatHashSetTest:assertTrue(boolean)', 'OpenFloatHashSet:hashCode()', 'OpenFloatHashSet:hashCode()', 'OpenFloatHashSetTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatHashSetTest:assertFalse(boolean)', 'OpenFloatHashSet:equals(java.lang.Object)', 'OpenFloatHashSetTest:assertFalse(boolean)', 'OpenFloatHashSet:remove(float)', 'OpenFloatHashSet:equals(java.lang.Object)', 'OpenFloatHashSetTest:assertFalse(boolean)', 'OpenFloatHashSet:equals(java.lang.Object)', 'OpenFloatHashSetTest:assertFalse(boolean)', 'OpenFloatHashSet:hashCode()', 'OpenFloatHashSet:hashCode()', 'OpenFloatHashSetTest:assertFalse(boolean)']
OpenFloatHashSetTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatHashSet:<init>()', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:remove(float)', 'OpenFloatHashSetTest$1:<init>(org.apache.mahout.math.set.OpenFloatHashSetTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatHashSet:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatHashSetTest:assertArrayEquals(float[],float[],float)']
OpenFloatHashSetTest:testKeys():['OpenFloatHashSet:<init>()', 'OpenFloatHashSet:add(float)', 'OpenFloatHashSet:add(float)', 'FloatArrayList:<init>()', 'OpenFloatHashSet:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatHashSetTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatHashSetTest:assertEquals(float,float,float)', 'OpenFloatHashSet:keys()', 'FloatArrayList:sort()', 'OpenFloatHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatIntHashMapTest:testAdjustOrPutValue():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:adjustOrPutValue(float,int,int)', 'OpenFloatIntHashMap:get(float)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'OpenFloatIntHashMap:adjustOrPutValue(float,int,int)', 'OpenFloatIntHashMap:get(float)', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testClear():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'OpenFloatIntHashMap:clear()', 'OpenFloatIntHashMap:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'OpenFloatIntHashMap:get(float)', 'OpenFloatIntHashMapTest:assertEquals(double,double,double)']
OpenFloatIntHashMapTest:testClone():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:clone()', 'OpenFloatIntHashMap:clear()', 'OpenFloatIntHashMap:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testConstructors():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'OpenFloatIntHashMapTest:assertEquals(double,double,double)', 'OpenFloatIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatIntHashMap:<init>(int)', 'OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'OpenFloatIntHashMapTest:assertEquals(double,double,double)', 'OpenFloatIntHashMapTest:assertEquals(double,double,double)', 'OpenFloatIntHashMap:<init>(int,double,double)', 'OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'OpenFloatIntHashMapTest:assertEquals(double,double,double)', 'OpenFloatIntHashMapTest:assertEquals(double,double,double)']
OpenFloatIntHashMapTest:testContainValue():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:containsValue(int)', 'OpenFloatIntHashMapTest:assertTrue(boolean)', 'OpenFloatIntHashMap:containsValue(int)', 'OpenFloatIntHashMapTest:assertFalse(boolean)']
OpenFloatIntHashMapTest:testContainsKey():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:containsKey(float)', 'OpenFloatIntHashMapTest:assertTrue(boolean)', 'OpenFloatIntHashMap:containsKey(float)', 'OpenFloatIntHashMapTest:assertFalse(boolean)']
OpenFloatIntHashMapTest:testCopy():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:copy()', 'OpenFloatIntHashMap:clear()', 'OpenFloatIntHashMap:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testEnsureCapacity():['OpenFloatIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatIntHashMap:ensureCapacity(int)', 'OpenFloatIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testEquals():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:removeKey(float)', 'OpenFloatIntHashMap:copy()', 'OpenFloatIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatIntHashMap:equals(java.lang.Object)', 'OpenFloatIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatIntHashMapTest:assertFalse(boolean)', 'OpenFloatIntHashMap:equals(java.lang.Object)', 'OpenFloatIntHashMapTest:assertFalse(boolean)', 'OpenFloatIntHashMap:removeKey(float)', 'OpenFloatIntHashMap:equals(java.lang.Object)', 'OpenFloatIntHashMapTest:assertFalse(boolean)', 'OpenFloatIntHashMap:equals(java.lang.Object)', 'OpenFloatIntHashMapTest:assertFalse(boolean)']
OpenFloatIntHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:removeKey(float)', 'OpenFloatIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatIntHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatIntHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:removeKey(float)', 'OpenFloatIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest,java.util.List)', 'OpenFloatIntHashMap:forEachPair(org.apache.mahout.math.function.FloatIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenFloatIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest,java.util.List)', 'OpenFloatIntHashMap:forEachPair(org.apache.mahout.math.function.FloatIntProcedure)', 'List:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testGet():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:get(float)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'OpenFloatIntHashMap:get(float)', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testKeys():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'FloatArrayList:<init>()', 'OpenFloatIntHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'OpenFloatIntHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatIntHashMapTest:testKeysSortedByValue():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatIntHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatIntHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatIntHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'IntArrayList:<init>()', 'OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:removeKey(float)', 'OpenFloatIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatIntHashMapTest)', 'OpenFloatIntHashMap:pairsMatching(org.apache.mahout.math.function.FloatIntProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', 'FloatArrayList:sort()', 'IntArrayList:sort()', 'FloatArrayList:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testPairsSortedByKey():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'FloatArrayList:<init>()', 'IntArrayList:<init>()', 'OpenFloatIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', 'FloatArrayList:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:clear()', 'IntArrayList:clear()', 'OpenFloatIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatIntHashMapTest:testValues():['OpenFloatIntHashMap:<init>()', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:put(float,int)', 'OpenFloatIntHashMap:removeKey(float)', 'IntArrayList:<init>(int)', 'OpenFloatIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenFloatIntHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testAdjustOrPutValue():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:adjustOrPutValue(float,long,long)', 'OpenFloatLongHashMap:get(float)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'OpenFloatLongHashMap:adjustOrPutValue(float,long,long)', 'OpenFloatLongHashMap:get(float)', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testClear():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'OpenFloatLongHashMap:clear()', 'OpenFloatLongHashMap:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'OpenFloatLongHashMap:get(float)', 'OpenFloatLongHashMapTest:assertEquals(double,double,double)']
OpenFloatLongHashMapTest:testClone():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:clone()', 'OpenFloatLongHashMap:clear()', 'OpenFloatLongHashMap:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testConstructors():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'OpenFloatLongHashMapTest:assertEquals(double,double,double)', 'OpenFloatLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatLongHashMap:<init>(int)', 'OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'OpenFloatLongHashMapTest:assertEquals(double,double,double)', 'OpenFloatLongHashMapTest:assertEquals(double,double,double)', 'OpenFloatLongHashMap:<init>(int,double,double)', 'OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'OpenFloatLongHashMapTest:assertEquals(double,double,double)', 'OpenFloatLongHashMapTest:assertEquals(double,double,double)']
OpenFloatLongHashMapTest:testContainValue():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:containsValue(long)', 'OpenFloatLongHashMapTest:assertTrue(boolean)', 'OpenFloatLongHashMap:containsValue(long)', 'OpenFloatLongHashMapTest:assertFalse(boolean)']
OpenFloatLongHashMapTest:testContainsKey():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:containsKey(float)', 'OpenFloatLongHashMapTest:assertTrue(boolean)', 'OpenFloatLongHashMap:containsKey(float)', 'OpenFloatLongHashMapTest:assertFalse(boolean)']
OpenFloatLongHashMapTest:testCopy():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:copy()', 'OpenFloatLongHashMap:clear()', 'OpenFloatLongHashMap:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testEnsureCapacity():['OpenFloatLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatLongHashMap:ensureCapacity(int)', 'OpenFloatLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testEquals():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:removeKey(float)', 'OpenFloatLongHashMap:copy()', 'OpenFloatLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatLongHashMap:equals(java.lang.Object)', 'OpenFloatLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatLongHashMapTest:assertFalse(boolean)', 'OpenFloatLongHashMap:equals(java.lang.Object)', 'OpenFloatLongHashMapTest:assertFalse(boolean)', 'OpenFloatLongHashMap:removeKey(float)', 'OpenFloatLongHashMap:equals(java.lang.Object)', 'OpenFloatLongHashMapTest:assertFalse(boolean)', 'OpenFloatLongHashMap:equals(java.lang.Object)', 'OpenFloatLongHashMapTest:assertFalse(boolean)']
OpenFloatLongHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:removeKey(float)', 'OpenFloatLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatLongHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatLongHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:removeKey(float)', 'OpenFloatLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest,java.util.List)', 'OpenFloatLongHashMap:forEachPair(org.apache.mahout.math.function.FloatLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenFloatLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest,java.util.List)', 'OpenFloatLongHashMap:forEachPair(org.apache.mahout.math.function.FloatLongProcedure)', 'List:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testGet():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:get(float)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'OpenFloatLongHashMap:get(float)', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testKeys():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'FloatArrayList:<init>()', 'OpenFloatLongHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'OpenFloatLongHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatLongHashMapTest:testKeysSortedByValue():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatLongHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatLongHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatLongHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'LongArrayList:<init>()', 'OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:removeKey(float)', 'OpenFloatLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatLongHashMapTest)', 'OpenFloatLongHashMap:pairsMatching(org.apache.mahout.math.function.FloatLongProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', 'FloatArrayList:sort()', 'LongArrayList:sort()', 'FloatArrayList:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testPairsSortedByKey():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'FloatArrayList:<init>()', 'LongArrayList:<init>()', 'OpenFloatLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', 'FloatArrayList:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:clear()', 'LongArrayList:clear()', 'OpenFloatLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatLongHashMapTest:testValues():['OpenFloatLongHashMap:<init>()', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:put(float,long)', 'OpenFloatLongHashMap:removeKey(float)', 'LongArrayList:<init>(int)', 'OpenFloatLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenFloatLongHashMapTest:assertEquals(long,long)']
OpenFloatObjectHashMapTest:testClear():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'OpenFloatObjectHashMap:clear()', 'OpenFloatObjectHashMap:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OpenFloatObjectHashMap:containsKey(float)', 'OpenFloatObjectHashMapTest:assertFalse(java.lang.String,boolean)', 'OpenFloatObjectHashMap:get(float)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenFloatObjectHashMapTest:testClone():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:clone()', 'OpenFloatObjectHashMap:clear()', 'OpenFloatObjectHashMap:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)']
OpenFloatObjectHashMapTest:testConstructors():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'OpenFloatObjectHashMapTest:assertEquals(double,double,double)', 'OpenFloatObjectHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatObjectHashMap:<init>(int)', 'OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'OpenFloatObjectHashMapTest:assertEquals(double,double,double)', 'OpenFloatObjectHashMapTest:assertEquals(double,double,double)', 'OpenFloatObjectHashMap:<init>(int,double,double)', 'OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'OpenFloatObjectHashMapTest:assertEquals(double,double,double)', 'OpenFloatObjectHashMapTest:assertEquals(double,double,double)']
OpenFloatObjectHashMapTest:testContainValue():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:containsValue(java.lang.Object)', 'OpenFloatObjectHashMapTest:assertTrue(boolean)', 'OpenFloatObjectHashMap:containsValue(java.lang.Object)', 'OpenFloatObjectHashMapTest:assertFalse(boolean)']
OpenFloatObjectHashMapTest:testContainsKey():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:containsKey(float)', 'OpenFloatObjectHashMapTest:assertTrue(boolean)', 'OpenFloatObjectHashMap:containsKey(float)', 'OpenFloatObjectHashMapTest:assertFalse(boolean)']
OpenFloatObjectHashMapTest:testCopy():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:copy()', 'OpenFloatObjectHashMap:clear()', 'OpenFloatObjectHashMap:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)']
OpenFloatObjectHashMapTest:testEnsureCapacity():['OpenFloatObjectHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatObjectHashMap:ensureCapacity(int)', 'OpenFloatObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatObjectHashMapTest:assertEquals(long,long)']
OpenFloatObjectHashMapTest:testEquals():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:removeKey(float)', 'OpenFloatObjectHashMap:copy()', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatObjectHashMap:equals(java.lang.Object)', 'OpenFloatObjectHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatObjectHashMapTest:assertFalse(boolean)', 'OpenFloatObjectHashMap:equals(java.lang.Object)', 'OpenFloatObjectHashMapTest:assertFalse(boolean)', 'OpenFloatObjectHashMap:removeKey(float)', 'OpenFloatObjectHashMap:equals(java.lang.Object)', 'OpenFloatObjectHashMapTest:assertFalse(boolean)', 'OpenFloatObjectHashMap:equals(java.lang.Object)', 'OpenFloatObjectHashMapTest:assertFalse(boolean)']
OpenFloatObjectHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:removeKey(float)', 'OpenFloatObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatObjectHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatObjectHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatObjectHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:removeKey(float)', 'OpenFloatObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest,java.util.List)', 'OpenFloatObjectHashMap:forEachPair(org.apache.mahout.math.function.FloatObjectProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenFloatObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest,java.util.List)', 'OpenFloatObjectHashMap:forEachPair(org.apache.mahout.math.function.FloatObjectProcedure)', 'List:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)']
OpenFloatObjectHashMapTest:testGet():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:get(float)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenFloatObjectHashMap:get(float)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenFloatObjectHashMapTest:testKeys():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'FloatArrayList:<init>()', 'OpenFloatObjectHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'OpenFloatObjectHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatObjectHashMapTest:testKeysSortedByValue():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatObjectHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatObjectHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'ArrayList:<init>()', 'OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:removeKey(float)', 'OpenFloatObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatObjectHashMapTest)', 'OpenFloatObjectHashMap:pairsMatching(org.apache.mahout.math.function.FloatObjectProcedure,org.apache.mahout.math.list.FloatArrayList,java.util.List)', 'FloatArrayList:sort()', 'Collections:sort(java.util.List)', 'FloatArrayList:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenFloatObjectHashMapTest:testPairsSortedByKey():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'FloatArrayList:<init>()', 'ArrayList:<init>()', 'OpenFloatObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,java.util.List)', 'FloatArrayList:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenFloatObjectHashMapTest:testPairsSortedByValue():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'FloatArrayList:<init>()', 'ArrayList:<init>()', 'OpenFloatObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,java.util.List)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatObjectHashMapTest:testValues():['OpenFloatObjectHashMap:<init>()', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:put(float,java.lang.Object)', 'OpenFloatObjectHashMap:removeKey(float)', 'ArrayList:<init>(int)', 'OpenFloatObjectHashMap:values(java.util.List)', 'List:size()', 'OpenFloatObjectHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenFloatObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatShortHashMapTest:testAdjustOrPutValue():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:adjustOrPutValue(float,short,short)', 'OpenFloatShortHashMap:get(float)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'OpenFloatShortHashMap:adjustOrPutValue(float,short,short)', 'OpenFloatShortHashMap:get(float)', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testClear():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'OpenFloatShortHashMap:clear()', 'OpenFloatShortHashMap:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'OpenFloatShortHashMap:get(float)', 'OpenFloatShortHashMapTest:assertEquals(double,double,double)']
OpenFloatShortHashMapTest:testClone():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:clone()', 'OpenFloatShortHashMap:clear()', 'OpenFloatShortHashMap:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testConstructors():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'OpenFloatShortHashMapTest:assertEquals(double,double,double)', 'OpenFloatShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenFloatShortHashMap:<init>(int)', 'OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'OpenFloatShortHashMapTest:assertEquals(double,double,double)', 'OpenFloatShortHashMapTest:assertEquals(double,double,double)', 'OpenFloatShortHashMap:<init>(int,double,double)', 'OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'OpenFloatShortHashMapTest:assertEquals(double,double,double)', 'OpenFloatShortHashMapTest:assertEquals(double,double,double)']
OpenFloatShortHashMapTest:testContainValue():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:containsValue(short)', 'OpenFloatShortHashMapTest:assertTrue(boolean)', 'OpenFloatShortHashMap:containsValue(short)', 'OpenFloatShortHashMapTest:assertFalse(boolean)']
OpenFloatShortHashMapTest:testContainsKey():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:containsKey(float)', 'OpenFloatShortHashMapTest:assertTrue(boolean)', 'OpenFloatShortHashMap:containsKey(float)', 'OpenFloatShortHashMapTest:assertFalse(boolean)']
OpenFloatShortHashMapTest:testCopy():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:copy()', 'OpenFloatShortHashMap:clear()', 'OpenFloatShortHashMap:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testEnsureCapacity():['OpenFloatShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenFloatShortHashMap:ensureCapacity(int)', 'OpenFloatShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testEquals():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:removeKey(float)', 'OpenFloatShortHashMap:copy()', 'OpenFloatShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenFloatShortHashMap:equals(java.lang.Object)', 'OpenFloatShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenFloatShortHashMapTest:assertFalse(boolean)', 'OpenFloatShortHashMap:equals(java.lang.Object)', 'OpenFloatShortHashMapTest:assertFalse(boolean)', 'OpenFloatShortHashMap:removeKey(float)', 'OpenFloatShortHashMap:equals(java.lang.Object)', 'OpenFloatShortHashMapTest:assertFalse(boolean)', 'OpenFloatShortHashMap:equals(java.lang.Object)', 'OpenFloatShortHashMapTest:assertFalse(boolean)']
OpenFloatShortHashMapTest:testForEachKey():['FloatArrayList:<init>()', 'OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:removeKey(float)', 'OpenFloatShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatShortHashMap:forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'Arrays:sort(float[])', 'OpenFloatShortHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:removeKey(float)', 'OpenFloatShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest,java.util.List)', 'OpenFloatShortHashMap:forEachPair(org.apache.mahout.math.function.FloatShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenFloatShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest,java.util.List)', 'OpenFloatShortHashMap:forEachPair(org.apache.mahout.math.function.FloatShortProcedure)', 'List:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testGet():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:get(float)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'OpenFloatShortHashMap:get(float)', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testKeys():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'FloatArrayList:<init>()', 'OpenFloatShortHashMap:keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'OpenFloatShortHashMap:keys()', 'FloatArrayList:sort()', 'OpenFloatShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenFloatShortHashMapTest:testKeysSortedByValue():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:removeKey(float)', 'FloatArrayList:<init>()', 'OpenFloatShortHashMap:keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'FloatArrayList:toArray(float[])', 'OpenFloatShortHashMapTest:assertArrayEquals(float[],float[],float)']
OpenFloatShortHashMapTest:testPairsMatching():['FloatArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:removeKey(float)', 'OpenFloatShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenFloatShortHashMapTest)', 'OpenFloatShortHashMap:pairsMatching(org.apache.mahout.math.function.FloatShortProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', 'FloatArrayList:sort()', 'ShortArrayList:sort()', 'FloatArrayList:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testPairsSortedByKey():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'FloatArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenFloatShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', 'FloatArrayList:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:clear()', 'ShortArrayList:clear()', 'OpenFloatShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenFloatShortHashMapTest:testValues():['OpenFloatShortHashMap:<init>()', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:put(float,short)', 'OpenFloatShortHashMap:removeKey(float)', 'ShortArrayList:<init>(int)', 'OpenFloatShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenFloatShortHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testAdjustOrPutValue():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:adjustOrPutValue(int,byte,byte)', 'OpenIntByteHashMap:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMap:adjustOrPutValue(int,byte,byte)', 'OpenIntByteHashMap:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testClear():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMap:clear()', 'OpenIntByteHashMap:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMap:get(int)', 'OpenIntByteHashMapTest:assertEquals(double,double,double)']
OpenIntByteHashMapTest:testClone():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:clone()', 'OpenIntByteHashMap:clear()', 'OpenIntByteHashMap:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testConstructors():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMapTest:assertEquals(double,double,double)', 'OpenIntByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntByteHashMap:<init>(int)', 'OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMapTest:assertEquals(double,double,double)', 'OpenIntByteHashMapTest:assertEquals(double,double,double)', 'OpenIntByteHashMap:<init>(int,double,double)', 'OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMapTest:assertEquals(double,double,double)', 'OpenIntByteHashMapTest:assertEquals(double,double,double)']
OpenIntByteHashMapTest:testContainValue():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:containsValue(byte)', 'OpenIntByteHashMapTest:assertTrue(boolean)', 'OpenIntByteHashMap:containsValue(byte)', 'OpenIntByteHashMapTest:assertFalse(boolean)']
OpenIntByteHashMapTest:testContainsKey():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:containsKey(int)', 'OpenIntByteHashMapTest:assertTrue(boolean)', 'OpenIntByteHashMap:containsKey(int)', 'OpenIntByteHashMapTest:assertFalse(boolean)']
OpenIntByteHashMapTest:testCopy():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:copy()', 'OpenIntByteHashMap:clear()', 'OpenIntByteHashMap:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testEnsureCapacity():['OpenIntByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntByteHashMap:ensureCapacity(int)', 'OpenIntByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testEquals():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:removeKey(int)', 'OpenIntByteHashMap:copy()', 'OpenIntByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntByteHashMap:equals(java.lang.Object)', 'OpenIntByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntByteHashMapTest:assertFalse(boolean)', 'OpenIntByteHashMap:equals(java.lang.Object)', 'OpenIntByteHashMapTest:assertFalse(boolean)', 'OpenIntByteHashMap:removeKey(int)', 'OpenIntByteHashMap:equals(java.lang.Object)', 'OpenIntByteHashMapTest:assertFalse(boolean)', 'OpenIntByteHashMap:equals(java.lang.Object)', 'OpenIntByteHashMapTest:assertFalse(boolean)']
OpenIntByteHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:removeKey(int)', 'OpenIntByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntByteHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntByteHashMapTest:assertArrayEquals(int[],int[])']
OpenIntByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:removeKey(int)', 'OpenIntByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest,java.util.List)', 'OpenIntByteHashMap:forEachPair(org.apache.mahout.math.function.IntByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenIntByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest,java.util.List)', 'OpenIntByteHashMap:forEachPair(org.apache.mahout.math.function.IntByteProcedure)', 'List:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testGet():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMap:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testKeys():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'IntArrayList:<init>()', 'OpenIntByteHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'OpenIntByteHashMap:keys()', 'IntArrayList:sort()', 'OpenIntByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntByteHashMapTest:testKeysSortedByValue():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntByteHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntByteHashMapTest:assertArrayEquals(int[],int[])']
OpenIntByteHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:removeKey(int)', 'OpenIntByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntByteHashMapTest)', 'OpenIntByteHashMap:pairsMatching(org.apache.mahout.math.function.IntByteProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', 'IntArrayList:sort()', 'ByteArrayList:sort()', 'IntArrayList:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testPairsSortedByKey():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'IntArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenIntByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', 'IntArrayList:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:clear()', 'ByteArrayList:clear()', 'OpenIntByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntByteHashMapTest:testValues():['OpenIntByteHashMap:<init>()', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:put(int,byte)', 'OpenIntByteHashMap:removeKey(int)', 'ByteArrayList:<init>(int)', 'OpenIntByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenIntByteHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testAdjustOrPutValue():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:adjustOrPutValue(int,char,char)', 'OpenIntCharHashMap:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMap:adjustOrPutValue(int,char,char)', 'OpenIntCharHashMap:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testClear():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMap:clear()', 'OpenIntCharHashMap:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMap:get(int)', 'OpenIntCharHashMapTest:assertEquals(double,double,double)']
OpenIntCharHashMapTest:testClone():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:clone()', 'OpenIntCharHashMap:clear()', 'OpenIntCharHashMap:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testConstructors():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMapTest:assertEquals(double,double,double)', 'OpenIntCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntCharHashMap:<init>(int)', 'OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMapTest:assertEquals(double,double,double)', 'OpenIntCharHashMapTest:assertEquals(double,double,double)', 'OpenIntCharHashMap:<init>(int,double,double)', 'OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMapTest:assertEquals(double,double,double)', 'OpenIntCharHashMapTest:assertEquals(double,double,double)']
OpenIntCharHashMapTest:testContainValue():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:containsValue(char)', 'OpenIntCharHashMapTest:assertTrue(boolean)', 'OpenIntCharHashMap:containsValue(char)', 'OpenIntCharHashMapTest:assertFalse(boolean)']
OpenIntCharHashMapTest:testContainsKey():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:containsKey(int)', 'OpenIntCharHashMapTest:assertTrue(boolean)', 'OpenIntCharHashMap:containsKey(int)', 'OpenIntCharHashMapTest:assertFalse(boolean)']
OpenIntCharHashMapTest:testCopy():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:copy()', 'OpenIntCharHashMap:clear()', 'OpenIntCharHashMap:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testEnsureCapacity():['OpenIntCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntCharHashMap:ensureCapacity(int)', 'OpenIntCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testEquals():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:removeKey(int)', 'OpenIntCharHashMap:copy()', 'OpenIntCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntCharHashMap:equals(java.lang.Object)', 'OpenIntCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntCharHashMapTest:assertFalse(boolean)', 'OpenIntCharHashMap:equals(java.lang.Object)', 'OpenIntCharHashMapTest:assertFalse(boolean)', 'OpenIntCharHashMap:removeKey(int)', 'OpenIntCharHashMap:equals(java.lang.Object)', 'OpenIntCharHashMapTest:assertFalse(boolean)', 'OpenIntCharHashMap:equals(java.lang.Object)', 'OpenIntCharHashMapTest:assertFalse(boolean)']
OpenIntCharHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:removeKey(int)', 'OpenIntCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntCharHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntCharHashMapTest:assertArrayEquals(int[],int[])']
OpenIntCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:removeKey(int)', 'OpenIntCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest,java.util.List)', 'OpenIntCharHashMap:forEachPair(org.apache.mahout.math.function.IntCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenIntCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest,java.util.List)', 'OpenIntCharHashMap:forEachPair(org.apache.mahout.math.function.IntCharProcedure)', 'List:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testGet():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMap:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testKeys():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'IntArrayList:<init>()', 'OpenIntCharHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'OpenIntCharHashMap:keys()', 'IntArrayList:sort()', 'OpenIntCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntCharHashMapTest:testKeysSortedByValue():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntCharHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntCharHashMapTest:assertArrayEquals(int[],int[])']
OpenIntCharHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'CharArrayList:<init>()', 'OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:removeKey(int)', 'OpenIntCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntCharHashMapTest)', 'OpenIntCharHashMap:pairsMatching(org.apache.mahout.math.function.IntCharProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', 'IntArrayList:sort()', 'CharArrayList:sort()', 'IntArrayList:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testPairsSortedByKey():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'IntArrayList:<init>()', 'CharArrayList:<init>()', 'OpenIntCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', 'IntArrayList:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:clear()', 'CharArrayList:clear()', 'OpenIntCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntCharHashMapTest:testValues():['OpenIntCharHashMap:<init>()', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:put(int,char)', 'OpenIntCharHashMap:removeKey(int)', 'CharArrayList:<init>(int)', 'OpenIntCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenIntCharHashMapTest:assertEquals(long,long)']
OpenIntDoubleHashMapTest:testAdjustOrPutValue():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:adjustOrPutValue(int,double,double)', 'OpenIntDoubleHashMap:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'OpenIntDoubleHashMap:adjustOrPutValue(int,double,double)', 'OpenIntDoubleHashMap:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
OpenIntDoubleHashMapTest:testClear():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'OpenIntDoubleHashMap:clear()', 'OpenIntDoubleHashMap:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'OpenIntDoubleHashMap:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
OpenIntDoubleHashMapTest:testClone():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:clone()', 'OpenIntDoubleHashMap:clear()', 'OpenIntDoubleHashMap:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)']
OpenIntDoubleHashMapTest:testConstructors():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntDoubleHashMap:<init>(int)', 'OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'OpenIntDoubleHashMap:<init>(int,double,double)', 'OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
OpenIntDoubleHashMapTest:testContainValue():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:containsValue(double)', 'OpenIntDoubleHashMapTest:assertTrue(boolean)', 'OpenIntDoubleHashMap:containsValue(double)', 'OpenIntDoubleHashMapTest:assertFalse(boolean)']
OpenIntDoubleHashMapTest:testContainsKey():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:containsKey(int)', 'OpenIntDoubleHashMapTest:assertTrue(boolean)', 'OpenIntDoubleHashMap:containsKey(int)', 'OpenIntDoubleHashMapTest:assertFalse(boolean)']
OpenIntDoubleHashMapTest:testCopy():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:copy()', 'OpenIntDoubleHashMap:clear()', 'OpenIntDoubleHashMap:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)']
OpenIntDoubleHashMapTest:testEnsureCapacity():['OpenIntDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntDoubleHashMap:ensureCapacity(int)', 'OpenIntDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntDoubleHashMapTest:assertEquals(long,long)']
OpenIntDoubleHashMapTest:testEquals():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:removeKey(int)', 'OpenIntDoubleHashMap:copy()', 'OpenIntDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntDoubleHashMap:equals(java.lang.Object)', 'OpenIntDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntDoubleHashMapTest:assertFalse(boolean)', 'OpenIntDoubleHashMap:equals(java.lang.Object)', 'OpenIntDoubleHashMapTest:assertFalse(boolean)', 'OpenIntDoubleHashMap:removeKey(int)', 'OpenIntDoubleHashMap:equals(java.lang.Object)', 'OpenIntDoubleHashMapTest:assertFalse(boolean)', 'OpenIntDoubleHashMap:equals(java.lang.Object)', 'OpenIntDoubleHashMapTest:assertFalse(boolean)']
OpenIntDoubleHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:removeKey(int)', 'OpenIntDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntDoubleHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntDoubleHashMapTest:assertArrayEquals(int[],int[])']
OpenIntDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:removeKey(int)', 'OpenIntDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest,java.util.List)', 'OpenIntDoubleHashMap:forEachPair(org.apache.mahout.math.function.IntDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'List:clear()', 'OpenIntDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest,java.util.List)', 'OpenIntDoubleHashMap:forEachPair(org.apache.mahout.math.function.IntDoubleProcedure)', 'List:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)']
OpenIntDoubleHashMapTest:testGet():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'OpenIntDoubleHashMap:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
OpenIntDoubleHashMapTest:testKeys():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'IntArrayList:<init>()', 'OpenIntDoubleHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'OpenIntDoubleHashMap:keys()', 'IntArrayList:sort()', 'OpenIntDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntDoubleHashMapTest:testKeysSortedByValue():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntDoubleHashMapTest:assertArrayEquals(int[],int[])']
OpenIntDoubleHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:removeKey(int)', 'OpenIntDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntDoubleHashMapTest)', 'OpenIntDoubleHashMap:pairsMatching(org.apache.mahout.math.function.IntDoubleProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'IntArrayList:sort()', 'DoubleArrayList:sort()', 'IntArrayList:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
OpenIntDoubleHashMapTest:testPairsSortedByKey():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'IntArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenIntDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'IntArrayList:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'IntArrayList:clear()', 'DoubleArrayList:clear()', 'OpenIntDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'IntArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
OpenIntDoubleHashMapTest:testValues():['OpenIntDoubleHashMap:<init>()', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:put(int,double)', 'OpenIntDoubleHashMap:removeKey(int)', 'DoubleArrayList:<init>(int)', 'OpenIntDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenIntDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenIntDoubleHashMapTest:assertEquals(double,double,double)']
OpenIntFloatHashMapTest:testAdjustOrPutValue():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:adjustOrPutValue(int,float,float)', 'OpenIntFloatHashMap:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'OpenIntFloatHashMap:adjustOrPutValue(int,float,float)', 'OpenIntFloatHashMap:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)']
OpenIntFloatHashMapTest:testClear():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'OpenIntFloatHashMap:clear()', 'OpenIntFloatHashMap:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'OpenIntFloatHashMap:get(int)', 'OpenIntFloatHashMapTest:assertEquals(double,double,double)']
OpenIntFloatHashMapTest:testClone():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:clone()', 'OpenIntFloatHashMap:clear()', 'OpenIntFloatHashMap:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)']
OpenIntFloatHashMapTest:testConstructors():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'OpenIntFloatHashMapTest:assertEquals(double,double,double)', 'OpenIntFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntFloatHashMap:<init>(int)', 'OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'OpenIntFloatHashMapTest:assertEquals(double,double,double)', 'OpenIntFloatHashMapTest:assertEquals(double,double,double)', 'OpenIntFloatHashMap:<init>(int,double,double)', 'OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'OpenIntFloatHashMapTest:assertEquals(double,double,double)', 'OpenIntFloatHashMapTest:assertEquals(double,double,double)']
OpenIntFloatHashMapTest:testContainValue():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:containsValue(float)', 'OpenIntFloatHashMapTest:assertTrue(boolean)', 'OpenIntFloatHashMap:containsValue(float)', 'OpenIntFloatHashMapTest:assertFalse(boolean)']
OpenIntFloatHashMapTest:testContainsKey():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:containsKey(int)', 'OpenIntFloatHashMapTest:assertTrue(boolean)', 'OpenIntFloatHashMap:containsKey(int)', 'OpenIntFloatHashMapTest:assertFalse(boolean)']
OpenIntFloatHashMapTest:testCopy():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:copy()', 'OpenIntFloatHashMap:clear()', 'OpenIntFloatHashMap:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)']
OpenIntFloatHashMapTest:testEnsureCapacity():['OpenIntFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntFloatHashMap:ensureCapacity(int)', 'OpenIntFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntFloatHashMapTest:assertEquals(long,long)']
OpenIntFloatHashMapTest:testEquals():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:removeKey(int)', 'OpenIntFloatHashMap:copy()', 'OpenIntFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntFloatHashMap:equals(java.lang.Object)', 'OpenIntFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntFloatHashMapTest:assertFalse(boolean)', 'OpenIntFloatHashMap:equals(java.lang.Object)', 'OpenIntFloatHashMapTest:assertFalse(boolean)', 'OpenIntFloatHashMap:removeKey(int)', 'OpenIntFloatHashMap:equals(java.lang.Object)', 'OpenIntFloatHashMapTest:assertFalse(boolean)', 'OpenIntFloatHashMap:equals(java.lang.Object)', 'OpenIntFloatHashMapTest:assertFalse(boolean)']
OpenIntFloatHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:removeKey(int)', 'OpenIntFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntFloatHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntFloatHashMapTest:assertArrayEquals(int[],int[])']
OpenIntFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:removeKey(int)', 'OpenIntFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest,java.util.List)', 'OpenIntFloatHashMap:forEachPair(org.apache.mahout.math.function.IntFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'List:clear()', 'OpenIntFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest,java.util.List)', 'OpenIntFloatHashMap:forEachPair(org.apache.mahout.math.function.IntFloatProcedure)', 'List:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)']
OpenIntFloatHashMapTest:testGet():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'OpenIntFloatHashMap:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)']
OpenIntFloatHashMapTest:testKeys():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'IntArrayList:<init>()', 'OpenIntFloatHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'OpenIntFloatHashMap:keys()', 'IntArrayList:sort()', 'OpenIntFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntFloatHashMapTest:testKeysSortedByValue():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntFloatHashMapTest:assertArrayEquals(int[],int[])']
OpenIntFloatHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:removeKey(int)', 'OpenIntFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntFloatHashMapTest)', 'OpenIntFloatHashMap:pairsMatching(org.apache.mahout.math.function.IntFloatProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', 'IntArrayList:sort()', 'FloatArrayList:sort()', 'IntArrayList:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)']
OpenIntFloatHashMapTest:testPairsSortedByKey():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'IntArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenIntFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', 'IntArrayList:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'IntArrayList:clear()', 'FloatArrayList:clear()', 'OpenIntFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'IntArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)']
OpenIntFloatHashMapTest:testValues():['OpenIntFloatHashMap:<init>()', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:put(int,float)', 'OpenIntFloatHashMap:removeKey(int)', 'FloatArrayList:<init>(int)', 'OpenIntFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenIntFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenIntFloatHashMapTest:assertEquals(float,float,float)']
OpenIntHashSetTest:testClear():['OpenIntHashSet:<init>()', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:size()', 'OpenIntHashSetTest:assertEquals(long,long)', 'OpenIntHashSet:clear()', 'OpenIntHashSet:size()', 'OpenIntHashSetTest:assertEquals(long,long)']
OpenIntHashSetTest:testClone():['OpenIntHashSet:<init>()', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:clone()', 'OpenIntHashSet:clear()', 'OpenIntHashSet:size()', 'OpenIntHashSetTest:assertEquals(long,long)']
OpenIntHashSetTest:testConstructors():['OpenIntHashSet:<init>()', 'OpenIntHashSet:getInternalFactors(int[],double[],double[])', 'OpenIntHashSetTest:assertEquals(long,long)', 'OpenIntHashSetTest:assertEquals(double,double,double)', 'OpenIntHashSetTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntHashSet:<init>(int)', 'OpenIntHashSet:getInternalFactors(int[],double[],double[])', 'OpenIntHashSetTest:assertEquals(long,long)', 'OpenIntHashSetTest:assertEquals(double,double,double)', 'OpenIntHashSetTest:assertEquals(double,double,double)', 'OpenIntHashSet:<init>(int,double,double)', 'OpenIntHashSet:getInternalFactors(int[],double[],double[])', 'OpenIntHashSetTest:assertEquals(long,long)', 'OpenIntHashSetTest:assertEquals(double,double,double)', 'OpenIntHashSetTest:assertEquals(double,double,double)']
OpenIntHashSetTest:testContains():['OpenIntHashSet:<init>()', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:contains(int)', 'OpenIntHashSetTest:assertTrue(boolean)', 'OpenIntHashSet:contains(int)', 'OpenIntHashSetTest:assertFalse(boolean)']
OpenIntHashSetTest:testCopy():['OpenIntHashSet:<init>()', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:copy()', 'OpenIntHashSet:clear()', 'OpenIntHashSet:size()', 'OpenIntHashSetTest:assertEquals(long,long)']
OpenIntHashSetTest:testEnsureCapacity():['OpenIntHashSet:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntHashSet:ensureCapacity(int)', 'OpenIntHashSet:getInternalFactors(int[],double[],double[])', 'OpenIntHashSetTest:assertEquals(long,long)']
OpenIntHashSetTest:testEquals():['OpenIntHashSet:<init>()', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:remove(int)', 'OpenIntHashSet:copy()', 'OpenIntHashSet:equals(java.lang.Object)', 'OpenIntHashSetTest:assertTrue(boolean)', 'OpenIntHashSet:hashCode()', 'OpenIntHashSet:hashCode()', 'OpenIntHashSetTest:assertTrue(boolean)', 'OpenIntHashSet:equals(java.lang.Object)', 'OpenIntHashSetTest:assertTrue(boolean)', 'OpenIntHashSet:hashCode()', 'OpenIntHashSet:hashCode()', 'OpenIntHashSetTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntHashSetTest:assertFalse(boolean)', 'OpenIntHashSet:equals(java.lang.Object)', 'OpenIntHashSetTest:assertFalse(boolean)', 'OpenIntHashSet:remove(int)', 'OpenIntHashSet:equals(java.lang.Object)', 'OpenIntHashSetTest:assertFalse(boolean)', 'OpenIntHashSet:equals(java.lang.Object)', 'OpenIntHashSetTest:assertFalse(boolean)', 'OpenIntHashSet:hashCode()', 'OpenIntHashSet:hashCode()', 'OpenIntHashSetTest:assertFalse(boolean)']
OpenIntHashSetTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntHashSet:<init>()', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:remove(int)', 'OpenIntHashSetTest$1:<init>(org.apache.mahout.math.set.OpenIntHashSetTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntHashSet:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntHashSetTest:assertArrayEquals(int[],int[])']
OpenIntHashSetTest:testKeys():['OpenIntHashSet:<init>()', 'OpenIntHashSet:add(int)', 'OpenIntHashSet:add(int)', 'IntArrayList:<init>()', 'OpenIntHashSet:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntHashSetTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntHashSetTest:assertEquals(long,long)', 'OpenIntHashSet:keys()', 'IntArrayList:sort()', 'OpenIntHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntIntHashMapTest:testAdjustOrPutValue():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:adjustOrPutValue(int,int,int)', 'OpenIntIntHashMap:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMap:adjustOrPutValue(int,int,int)', 'OpenIntIntHashMap:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testClear():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMap:clear()', 'OpenIntIntHashMap:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMap:get(int)', 'OpenIntIntHashMapTest:assertEquals(double,double,double)']
OpenIntIntHashMapTest:testClone():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:clone()', 'OpenIntIntHashMap:clear()', 'OpenIntIntHashMap:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testConstructors():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMapTest:assertEquals(double,double,double)', 'OpenIntIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntIntHashMap:<init>(int)', 'OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMapTest:assertEquals(double,double,double)', 'OpenIntIntHashMapTest:assertEquals(double,double,double)', 'OpenIntIntHashMap:<init>(int,double,double)', 'OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMapTest:assertEquals(double,double,double)', 'OpenIntIntHashMapTest:assertEquals(double,double,double)']
OpenIntIntHashMapTest:testContainValue():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:containsValue(int)', 'OpenIntIntHashMapTest:assertTrue(boolean)', 'OpenIntIntHashMap:containsValue(int)', 'OpenIntIntHashMapTest:assertFalse(boolean)']
OpenIntIntHashMapTest:testContainsKey():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:containsKey(int)', 'OpenIntIntHashMapTest:assertTrue(boolean)', 'OpenIntIntHashMap:containsKey(int)', 'OpenIntIntHashMapTest:assertFalse(boolean)']
OpenIntIntHashMapTest:testCopy():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:copy()', 'OpenIntIntHashMap:clear()', 'OpenIntIntHashMap:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testEnsureCapacity():['OpenIntIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntIntHashMap:ensureCapacity(int)', 'OpenIntIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testEquals():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:removeKey(int)', 'OpenIntIntHashMap:copy()', 'OpenIntIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntIntHashMap:equals(java.lang.Object)', 'OpenIntIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntIntHashMapTest:assertFalse(boolean)', 'OpenIntIntHashMap:equals(java.lang.Object)', 'OpenIntIntHashMapTest:assertFalse(boolean)', 'OpenIntIntHashMap:removeKey(int)', 'OpenIntIntHashMap:equals(java.lang.Object)', 'OpenIntIntHashMapTest:assertFalse(boolean)', 'OpenIntIntHashMap:equals(java.lang.Object)', 'OpenIntIntHashMapTest:assertFalse(boolean)']
OpenIntIntHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:removeKey(int)', 'OpenIntIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntIntHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntIntHashMapTest:assertArrayEquals(int[],int[])']
OpenIntIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:removeKey(int)', 'OpenIntIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest,java.util.List)', 'OpenIntIntHashMap:forEachPair(org.apache.mahout.math.function.IntIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenIntIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest,java.util.List)', 'OpenIntIntHashMap:forEachPair(org.apache.mahout.math.function.IntIntProcedure)', 'List:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testGet():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMap:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testKeys():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'IntArrayList:<init>()', 'OpenIntIntHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'OpenIntIntHashMap:keys()', 'IntArrayList:sort()', 'OpenIntIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntIntHashMapTest:testKeysSortedByValue():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntIntHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntIntHashMapTest:assertArrayEquals(int[],int[])']
OpenIntIntHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'IntArrayList:<init>()', 'OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:removeKey(int)', 'OpenIntIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntIntHashMapTest)', 'OpenIntIntHashMap:pairsMatching(org.apache.mahout.math.function.IntIntProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:sort()', 'IntArrayList:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testPairsSortedByKey():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'IntArrayList:<init>()', 'IntArrayList:<init>()', 'OpenIntIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:clear()', 'IntArrayList:clear()', 'OpenIntIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntIntHashMapTest:testValues():['OpenIntIntHashMap:<init>()', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:put(int,int)', 'OpenIntIntHashMap:removeKey(int)', 'IntArrayList:<init>(int)', 'OpenIntIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntIntHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testAdjustOrPutValue():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:adjustOrPutValue(int,long,long)', 'OpenIntLongHashMap:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMap:adjustOrPutValue(int,long,long)', 'OpenIntLongHashMap:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testClear():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMap:clear()', 'OpenIntLongHashMap:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMap:get(int)', 'OpenIntLongHashMapTest:assertEquals(double,double,double)']
OpenIntLongHashMapTest:testClone():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:clone()', 'OpenIntLongHashMap:clear()', 'OpenIntLongHashMap:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testConstructors():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMapTest:assertEquals(double,double,double)', 'OpenIntLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntLongHashMap:<init>(int)', 'OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMapTest:assertEquals(double,double,double)', 'OpenIntLongHashMapTest:assertEquals(double,double,double)', 'OpenIntLongHashMap:<init>(int,double,double)', 'OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMapTest:assertEquals(double,double,double)', 'OpenIntLongHashMapTest:assertEquals(double,double,double)']
OpenIntLongHashMapTest:testContainValue():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:containsValue(long)', 'OpenIntLongHashMapTest:assertTrue(boolean)', 'OpenIntLongHashMap:containsValue(long)', 'OpenIntLongHashMapTest:assertFalse(boolean)']
OpenIntLongHashMapTest:testContainsKey():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:containsKey(int)', 'OpenIntLongHashMapTest:assertTrue(boolean)', 'OpenIntLongHashMap:containsKey(int)', 'OpenIntLongHashMapTest:assertFalse(boolean)']
OpenIntLongHashMapTest:testCopy():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:copy()', 'OpenIntLongHashMap:clear()', 'OpenIntLongHashMap:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testEnsureCapacity():['OpenIntLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntLongHashMap:ensureCapacity(int)', 'OpenIntLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testEquals():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:removeKey(int)', 'OpenIntLongHashMap:copy()', 'OpenIntLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntLongHashMap:equals(java.lang.Object)', 'OpenIntLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntLongHashMapTest:assertFalse(boolean)', 'OpenIntLongHashMap:equals(java.lang.Object)', 'OpenIntLongHashMapTest:assertFalse(boolean)', 'OpenIntLongHashMap:removeKey(int)', 'OpenIntLongHashMap:equals(java.lang.Object)', 'OpenIntLongHashMapTest:assertFalse(boolean)', 'OpenIntLongHashMap:equals(java.lang.Object)', 'OpenIntLongHashMapTest:assertFalse(boolean)']
OpenIntLongHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:removeKey(int)', 'OpenIntLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntLongHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntLongHashMapTest:assertArrayEquals(int[],int[])']
OpenIntLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:removeKey(int)', 'OpenIntLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest,java.util.List)', 'OpenIntLongHashMap:forEachPair(org.apache.mahout.math.function.IntLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenIntLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest,java.util.List)', 'OpenIntLongHashMap:forEachPair(org.apache.mahout.math.function.IntLongProcedure)', 'List:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testGet():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMap:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testKeys():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'IntArrayList:<init>()', 'OpenIntLongHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'OpenIntLongHashMap:keys()', 'IntArrayList:sort()', 'OpenIntLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntLongHashMapTest:testKeysSortedByValue():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntLongHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntLongHashMapTest:assertArrayEquals(int[],int[])']
OpenIntLongHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'LongArrayList:<init>()', 'OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:removeKey(int)', 'OpenIntLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntLongHashMapTest)', 'OpenIntLongHashMap:pairsMatching(org.apache.mahout.math.function.IntLongProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', 'IntArrayList:sort()', 'LongArrayList:sort()', 'IntArrayList:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testPairsSortedByKey():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'IntArrayList:<init>()', 'LongArrayList:<init>()', 'OpenIntLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', 'IntArrayList:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:clear()', 'LongArrayList:clear()', 'OpenIntLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntLongHashMapTest:testValues():['OpenIntLongHashMap:<init>()', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:put(int,long)', 'OpenIntLongHashMap:removeKey(int)', 'LongArrayList:<init>(int)', 'OpenIntLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenIntLongHashMapTest:assertEquals(long,long)']
OpenIntObjectHashMapTest:testClear():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'OpenIntObjectHashMap:clear()', 'OpenIntObjectHashMap:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OpenIntObjectHashMap:containsKey(int)', 'OpenIntObjectHashMapTest:assertFalse(java.lang.String,boolean)', 'OpenIntObjectHashMap:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenIntObjectHashMapTest:testClone():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:clone()', 'OpenIntObjectHashMap:clear()', 'OpenIntObjectHashMap:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)']
OpenIntObjectHashMapTest:testConstructors():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'OpenIntObjectHashMapTest:assertEquals(double,double,double)', 'OpenIntObjectHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntObjectHashMap:<init>(int)', 'OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'OpenIntObjectHashMapTest:assertEquals(double,double,double)', 'OpenIntObjectHashMapTest:assertEquals(double,double,double)', 'OpenIntObjectHashMap:<init>(int,double,double)', 'OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'OpenIntObjectHashMapTest:assertEquals(double,double,double)', 'OpenIntObjectHashMapTest:assertEquals(double,double,double)']
OpenIntObjectHashMapTest:testContainValue():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:containsValue(java.lang.Object)', 'OpenIntObjectHashMapTest:assertTrue(boolean)', 'OpenIntObjectHashMap:containsValue(java.lang.Object)', 'OpenIntObjectHashMapTest:assertFalse(boolean)']
OpenIntObjectHashMapTest:testContainsKey():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:containsKey(int)', 'OpenIntObjectHashMapTest:assertTrue(boolean)', 'OpenIntObjectHashMap:containsKey(int)', 'OpenIntObjectHashMapTest:assertFalse(boolean)']
OpenIntObjectHashMapTest:testCopy():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:copy()', 'OpenIntObjectHashMap:clear()', 'OpenIntObjectHashMap:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)']
OpenIntObjectHashMapTest:testEnsureCapacity():['OpenIntObjectHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntObjectHashMap:ensureCapacity(int)', 'OpenIntObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntObjectHashMapTest:assertEquals(long,long)']
OpenIntObjectHashMapTest:testEquals():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:removeKey(int)', 'OpenIntObjectHashMap:copy()', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntObjectHashMap:equals(java.lang.Object)', 'OpenIntObjectHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntObjectHashMapTest:assertFalse(boolean)', 'OpenIntObjectHashMap:equals(java.lang.Object)', 'OpenIntObjectHashMapTest:assertFalse(boolean)', 'OpenIntObjectHashMap:removeKey(int)', 'OpenIntObjectHashMap:equals(java.lang.Object)', 'OpenIntObjectHashMapTest:assertFalse(boolean)', 'OpenIntObjectHashMap:equals(java.lang.Object)', 'OpenIntObjectHashMapTest:assertFalse(boolean)']
OpenIntObjectHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:removeKey(int)', 'OpenIntObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntObjectHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntObjectHashMapTest:assertArrayEquals(int[],int[])']
OpenIntObjectHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:removeKey(int)', 'OpenIntObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest,java.util.List)', 'OpenIntObjectHashMap:forEachPair(org.apache.mahout.math.function.IntObjectProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenIntObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest,java.util.List)', 'OpenIntObjectHashMap:forEachPair(org.apache.mahout.math.function.IntObjectProcedure)', 'List:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)']
OpenIntObjectHashMapTest:testGet():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenIntObjectHashMap:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenIntObjectHashMapTest:testKeys():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'IntArrayList:<init>()', 'OpenIntObjectHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'OpenIntObjectHashMap:keys()', 'IntArrayList:sort()', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntObjectHashMapTest:testKeysSortedByValue():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntObjectHashMapTest:assertArrayEquals(int[],int[])']
OpenIntObjectHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'ArrayList:<init>()', 'OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:removeKey(int)', 'OpenIntObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntObjectHashMapTest)', 'OpenIntObjectHashMap:pairsMatching(org.apache.mahout.math.function.IntObjectProcedure,org.apache.mahout.math.list.IntArrayList,java.util.List)', 'IntArrayList:sort()', 'Collections:sort(java.util.List)', 'IntArrayList:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenIntObjectHashMapTest:testPairsSortedByKey():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'IntArrayList:<init>()', 'ArrayList:<init>()', 'OpenIntObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,java.util.List)', 'IntArrayList:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenIntObjectHashMapTest:testPairsSortedByValue():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'IntArrayList:<init>()', 'ArrayList:<init>()', 'OpenIntObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,java.util.List)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntObjectHashMapTest:testValues():['OpenIntObjectHashMap:<init>()', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'OpenIntObjectHashMap:removeKey(int)', 'ArrayList:<init>(int)', 'OpenIntObjectHashMap:values(java.util.List)', 'List:size()', 'OpenIntObjectHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenIntObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntShortHashMapTest:testAdjustOrPutValue():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:adjustOrPutValue(int,short,short)', 'OpenIntShortHashMap:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMap:adjustOrPutValue(int,short,short)', 'OpenIntShortHashMap:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testClear():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMap:clear()', 'OpenIntShortHashMap:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMap:get(int)', 'OpenIntShortHashMapTest:assertEquals(double,double,double)']
OpenIntShortHashMapTest:testClone():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:clone()', 'OpenIntShortHashMap:clear()', 'OpenIntShortHashMap:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testConstructors():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMapTest:assertEquals(double,double,double)', 'OpenIntShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenIntShortHashMap:<init>(int)', 'OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMapTest:assertEquals(double,double,double)', 'OpenIntShortHashMapTest:assertEquals(double,double,double)', 'OpenIntShortHashMap:<init>(int,double,double)', 'OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMapTest:assertEquals(double,double,double)', 'OpenIntShortHashMapTest:assertEquals(double,double,double)']
OpenIntShortHashMapTest:testContainValue():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:containsValue(short)', 'OpenIntShortHashMapTest:assertTrue(boolean)', 'OpenIntShortHashMap:containsValue(short)', 'OpenIntShortHashMapTest:assertFalse(boolean)']
OpenIntShortHashMapTest:testContainsKey():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:containsKey(int)', 'OpenIntShortHashMapTest:assertTrue(boolean)', 'OpenIntShortHashMap:containsKey(int)', 'OpenIntShortHashMapTest:assertFalse(boolean)']
OpenIntShortHashMapTest:testCopy():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:copy()', 'OpenIntShortHashMap:clear()', 'OpenIntShortHashMap:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testEnsureCapacity():['OpenIntShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenIntShortHashMap:ensureCapacity(int)', 'OpenIntShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testEquals():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:removeKey(int)', 'OpenIntShortHashMap:copy()', 'OpenIntShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenIntShortHashMap:equals(java.lang.Object)', 'OpenIntShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenIntShortHashMapTest:assertFalse(boolean)', 'OpenIntShortHashMap:equals(java.lang.Object)', 'OpenIntShortHashMapTest:assertFalse(boolean)', 'OpenIntShortHashMap:removeKey(int)', 'OpenIntShortHashMap:equals(java.lang.Object)', 'OpenIntShortHashMapTest:assertFalse(boolean)', 'OpenIntShortHashMap:equals(java.lang.Object)', 'OpenIntShortHashMapTest:assertFalse(boolean)']
OpenIntShortHashMapTest:testForEachKey():['IntArrayList:<init>()', 'OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:removeKey(int)', 'OpenIntShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest,org.apache.mahout.math.list.IntArrayList)', 'OpenIntShortHashMap:forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'Arrays:sort(int[])', 'OpenIntShortHashMapTest:assertArrayEquals(int[],int[])']
OpenIntShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:removeKey(int)', 'OpenIntShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest,java.util.List)', 'OpenIntShortHashMap:forEachPair(org.apache.mahout.math.function.IntShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenIntShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest,java.util.List)', 'OpenIntShortHashMap:forEachPair(org.apache.mahout.math.function.IntShortProcedure)', 'List:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testGet():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMap:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testKeys():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'IntArrayList:<init>()', 'OpenIntShortHashMap:keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'OpenIntShortHashMap:keys()', 'IntArrayList:sort()', 'OpenIntShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenIntShortHashMapTest:testKeysSortedByValue():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:removeKey(int)', 'IntArrayList:<init>()', 'OpenIntShortHashMap:keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'IntArrayList:toArray(int[])', 'OpenIntShortHashMapTest:assertArrayEquals(int[],int[])']
OpenIntShortHashMapTest:testPairsMatching():['IntArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:removeKey(int)', 'OpenIntShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenIntShortHashMapTest)', 'OpenIntShortHashMap:pairsMatching(org.apache.mahout.math.function.IntShortProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', 'IntArrayList:sort()', 'ShortArrayList:sort()', 'IntArrayList:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testPairsSortedByKey():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'IntArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenIntShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', 'IntArrayList:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:clear()', 'ShortArrayList:clear()', 'OpenIntShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenIntShortHashMapTest:testValues():['OpenIntShortHashMap:<init>()', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:put(int,short)', 'OpenIntShortHashMap:removeKey(int)', 'ShortArrayList:<init>(int)', 'OpenIntShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenIntShortHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testAdjustOrPutValue():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:adjustOrPutValue(long,byte,byte)', 'OpenLongByteHashMap:get(long)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMap:adjustOrPutValue(long,byte,byte)', 'OpenLongByteHashMap:get(long)', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testClear():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMap:clear()', 'OpenLongByteHashMap:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMap:get(long)', 'OpenLongByteHashMapTest:assertEquals(double,double,double)']
OpenLongByteHashMapTest:testClone():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:clone()', 'OpenLongByteHashMap:clear()', 'OpenLongByteHashMap:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testConstructors():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMapTest:assertEquals(double,double,double)', 'OpenLongByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongByteHashMap:<init>(int)', 'OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMapTest:assertEquals(double,double,double)', 'OpenLongByteHashMapTest:assertEquals(double,double,double)', 'OpenLongByteHashMap:<init>(int,double,double)', 'OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMapTest:assertEquals(double,double,double)', 'OpenLongByteHashMapTest:assertEquals(double,double,double)']
OpenLongByteHashMapTest:testContainValue():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:containsValue(byte)', 'OpenLongByteHashMapTest:assertTrue(boolean)', 'OpenLongByteHashMap:containsValue(byte)', 'OpenLongByteHashMapTest:assertFalse(boolean)']
OpenLongByteHashMapTest:testContainsKey():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:containsKey(long)', 'OpenLongByteHashMapTest:assertTrue(boolean)', 'OpenLongByteHashMap:containsKey(long)', 'OpenLongByteHashMapTest:assertFalse(boolean)']
OpenLongByteHashMapTest:testCopy():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:copy()', 'OpenLongByteHashMap:clear()', 'OpenLongByteHashMap:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testEnsureCapacity():['OpenLongByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongByteHashMap:ensureCapacity(int)', 'OpenLongByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testEquals():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:removeKey(long)', 'OpenLongByteHashMap:copy()', 'OpenLongByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongByteHashMap:equals(java.lang.Object)', 'OpenLongByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongByteHashMapTest:assertFalse(boolean)', 'OpenLongByteHashMap:equals(java.lang.Object)', 'OpenLongByteHashMapTest:assertFalse(boolean)', 'OpenLongByteHashMap:removeKey(long)', 'OpenLongByteHashMap:equals(java.lang.Object)', 'OpenLongByteHashMapTest:assertFalse(boolean)', 'OpenLongByteHashMap:equals(java.lang.Object)', 'OpenLongByteHashMapTest:assertFalse(boolean)']
OpenLongByteHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:removeKey(long)', 'OpenLongByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongByteHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongByteHashMapTest:assertArrayEquals(long[],long[])']
OpenLongByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:removeKey(long)', 'OpenLongByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest,java.util.List)', 'OpenLongByteHashMap:forEachPair(org.apache.mahout.math.function.LongByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenLongByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest,java.util.List)', 'OpenLongByteHashMap:forEachPair(org.apache.mahout.math.function.LongByteProcedure)', 'List:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testGet():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:get(long)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMap:get(long)', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testKeys():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'LongArrayList:<init>()', 'OpenLongByteHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'OpenLongByteHashMap:keys()', 'LongArrayList:sort()', 'OpenLongByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongByteHashMapTest:testKeysSortedByValue():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongByteHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongByteHashMapTest:assertArrayEquals(long[],long[])']
OpenLongByteHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:removeKey(long)', 'OpenLongByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongByteHashMapTest)', 'OpenLongByteHashMap:pairsMatching(org.apache.mahout.math.function.LongByteProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', 'LongArrayList:sort()', 'ByteArrayList:sort()', 'LongArrayList:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testPairsSortedByKey():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'LongArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenLongByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', 'LongArrayList:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:clear()', 'ByteArrayList:clear()', 'OpenLongByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongByteHashMapTest:testValues():['OpenLongByteHashMap:<init>()', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:put(long,byte)', 'OpenLongByteHashMap:removeKey(long)', 'ByteArrayList:<init>(int)', 'OpenLongByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenLongByteHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testAdjustOrPutValue():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:adjustOrPutValue(long,char,char)', 'OpenLongCharHashMap:get(long)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMap:adjustOrPutValue(long,char,char)', 'OpenLongCharHashMap:get(long)', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testClear():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMap:clear()', 'OpenLongCharHashMap:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMap:get(long)', 'OpenLongCharHashMapTest:assertEquals(double,double,double)']
OpenLongCharHashMapTest:testClone():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:clone()', 'OpenLongCharHashMap:clear()', 'OpenLongCharHashMap:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testConstructors():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMapTest:assertEquals(double,double,double)', 'OpenLongCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongCharHashMap:<init>(int)', 'OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMapTest:assertEquals(double,double,double)', 'OpenLongCharHashMapTest:assertEquals(double,double,double)', 'OpenLongCharHashMap:<init>(int,double,double)', 'OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMapTest:assertEquals(double,double,double)', 'OpenLongCharHashMapTest:assertEquals(double,double,double)']
OpenLongCharHashMapTest:testContainValue():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:containsValue(char)', 'OpenLongCharHashMapTest:assertTrue(boolean)', 'OpenLongCharHashMap:containsValue(char)', 'OpenLongCharHashMapTest:assertFalse(boolean)']
OpenLongCharHashMapTest:testContainsKey():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:containsKey(long)', 'OpenLongCharHashMapTest:assertTrue(boolean)', 'OpenLongCharHashMap:containsKey(long)', 'OpenLongCharHashMapTest:assertFalse(boolean)']
OpenLongCharHashMapTest:testCopy():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:copy()', 'OpenLongCharHashMap:clear()', 'OpenLongCharHashMap:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testEnsureCapacity():['OpenLongCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongCharHashMap:ensureCapacity(int)', 'OpenLongCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testEquals():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:removeKey(long)', 'OpenLongCharHashMap:copy()', 'OpenLongCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongCharHashMap:equals(java.lang.Object)', 'OpenLongCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongCharHashMapTest:assertFalse(boolean)', 'OpenLongCharHashMap:equals(java.lang.Object)', 'OpenLongCharHashMapTest:assertFalse(boolean)', 'OpenLongCharHashMap:removeKey(long)', 'OpenLongCharHashMap:equals(java.lang.Object)', 'OpenLongCharHashMapTest:assertFalse(boolean)', 'OpenLongCharHashMap:equals(java.lang.Object)', 'OpenLongCharHashMapTest:assertFalse(boolean)']
OpenLongCharHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:removeKey(long)', 'OpenLongCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongCharHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongCharHashMapTest:assertArrayEquals(long[],long[])']
OpenLongCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:removeKey(long)', 'OpenLongCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest,java.util.List)', 'OpenLongCharHashMap:forEachPair(org.apache.mahout.math.function.LongCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenLongCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest,java.util.List)', 'OpenLongCharHashMap:forEachPair(org.apache.mahout.math.function.LongCharProcedure)', 'List:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testGet():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:get(long)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMap:get(long)', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testKeys():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'LongArrayList:<init>()', 'OpenLongCharHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'OpenLongCharHashMap:keys()', 'LongArrayList:sort()', 'OpenLongCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongCharHashMapTest:testKeysSortedByValue():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongCharHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongCharHashMapTest:assertArrayEquals(long[],long[])']
OpenLongCharHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'CharArrayList:<init>()', 'OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:removeKey(long)', 'OpenLongCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongCharHashMapTest)', 'OpenLongCharHashMap:pairsMatching(org.apache.mahout.math.function.LongCharProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', 'LongArrayList:sort()', 'CharArrayList:sort()', 'LongArrayList:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testPairsSortedByKey():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'LongArrayList:<init>()', 'CharArrayList:<init>()', 'OpenLongCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', 'LongArrayList:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:clear()', 'CharArrayList:clear()', 'OpenLongCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongCharHashMapTest:testValues():['OpenLongCharHashMap:<init>()', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:put(long,char)', 'OpenLongCharHashMap:removeKey(long)', 'CharArrayList:<init>(int)', 'OpenLongCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenLongCharHashMapTest:assertEquals(long,long)']
OpenLongDoubleHashMapTest:testAdjustOrPutValue():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:adjustOrPutValue(long,double,double)', 'OpenLongDoubleHashMap:get(long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'OpenLongDoubleHashMap:adjustOrPutValue(long,double,double)', 'OpenLongDoubleHashMap:get(long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
OpenLongDoubleHashMapTest:testClear():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'OpenLongDoubleHashMap:clear()', 'OpenLongDoubleHashMap:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'OpenLongDoubleHashMap:get(long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
OpenLongDoubleHashMapTest:testClone():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:clone()', 'OpenLongDoubleHashMap:clear()', 'OpenLongDoubleHashMap:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)']
OpenLongDoubleHashMapTest:testConstructors():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongDoubleHashMap:<init>(int)', 'OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'OpenLongDoubleHashMap:<init>(int,double,double)', 'OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
OpenLongDoubleHashMapTest:testContainValue():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:containsValue(double)', 'OpenLongDoubleHashMapTest:assertTrue(boolean)', 'OpenLongDoubleHashMap:containsValue(double)', 'OpenLongDoubleHashMapTest:assertFalse(boolean)']
OpenLongDoubleHashMapTest:testContainsKey():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:containsKey(long)', 'OpenLongDoubleHashMapTest:assertTrue(boolean)', 'OpenLongDoubleHashMap:containsKey(long)', 'OpenLongDoubleHashMapTest:assertFalse(boolean)']
OpenLongDoubleHashMapTest:testCopy():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:copy()', 'OpenLongDoubleHashMap:clear()', 'OpenLongDoubleHashMap:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)']
OpenLongDoubleHashMapTest:testEnsureCapacity():['OpenLongDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongDoubleHashMap:ensureCapacity(int)', 'OpenLongDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongDoubleHashMapTest:assertEquals(long,long)']
OpenLongDoubleHashMapTest:testEquals():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:removeKey(long)', 'OpenLongDoubleHashMap:copy()', 'OpenLongDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongDoubleHashMap:equals(java.lang.Object)', 'OpenLongDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongDoubleHashMapTest:assertFalse(boolean)', 'OpenLongDoubleHashMap:equals(java.lang.Object)', 'OpenLongDoubleHashMapTest:assertFalse(boolean)', 'OpenLongDoubleHashMap:removeKey(long)', 'OpenLongDoubleHashMap:equals(java.lang.Object)', 'OpenLongDoubleHashMapTest:assertFalse(boolean)', 'OpenLongDoubleHashMap:equals(java.lang.Object)', 'OpenLongDoubleHashMapTest:assertFalse(boolean)']
OpenLongDoubleHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:removeKey(long)', 'OpenLongDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongDoubleHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongDoubleHashMapTest:assertArrayEquals(long[],long[])']
OpenLongDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:removeKey(long)', 'OpenLongDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest,java.util.List)', 'OpenLongDoubleHashMap:forEachPair(org.apache.mahout.math.function.LongDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'List:clear()', 'OpenLongDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest,java.util.List)', 'OpenLongDoubleHashMap:forEachPair(org.apache.mahout.math.function.LongDoubleProcedure)', 'List:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)']
OpenLongDoubleHashMapTest:testGet():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:get(long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'OpenLongDoubleHashMap:get(long)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
OpenLongDoubleHashMapTest:testKeys():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'LongArrayList:<init>()', 'OpenLongDoubleHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'OpenLongDoubleHashMap:keys()', 'LongArrayList:sort()', 'OpenLongDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongDoubleHashMapTest:testKeysSortedByValue():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongDoubleHashMapTest:assertArrayEquals(long[],long[])']
OpenLongDoubleHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:removeKey(long)', 'OpenLongDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongDoubleHashMapTest)', 'OpenLongDoubleHashMap:pairsMatching(org.apache.mahout.math.function.LongDoubleProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'LongArrayList:sort()', 'DoubleArrayList:sort()', 'LongArrayList:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
OpenLongDoubleHashMapTest:testPairsSortedByKey():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'LongArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenLongDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'LongArrayList:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'LongArrayList:clear()', 'DoubleArrayList:clear()', 'OpenLongDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'LongArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
OpenLongDoubleHashMapTest:testValues():['OpenLongDoubleHashMap:<init>()', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:put(long,double)', 'OpenLongDoubleHashMap:removeKey(long)', 'DoubleArrayList:<init>(int)', 'OpenLongDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenLongDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenLongDoubleHashMapTest:assertEquals(double,double,double)']
OpenLongFloatHashMapTest:testAdjustOrPutValue():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:adjustOrPutValue(long,float,float)', 'OpenLongFloatHashMap:get(long)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'OpenLongFloatHashMap:adjustOrPutValue(long,float,float)', 'OpenLongFloatHashMap:get(long)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)']
OpenLongFloatHashMapTest:testClear():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'OpenLongFloatHashMap:clear()', 'OpenLongFloatHashMap:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'OpenLongFloatHashMap:get(long)', 'OpenLongFloatHashMapTest:assertEquals(double,double,double)']
OpenLongFloatHashMapTest:testClone():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:clone()', 'OpenLongFloatHashMap:clear()', 'OpenLongFloatHashMap:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)']
OpenLongFloatHashMapTest:testConstructors():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'OpenLongFloatHashMapTest:assertEquals(double,double,double)', 'OpenLongFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongFloatHashMap:<init>(int)', 'OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'OpenLongFloatHashMapTest:assertEquals(double,double,double)', 'OpenLongFloatHashMapTest:assertEquals(double,double,double)', 'OpenLongFloatHashMap:<init>(int,double,double)', 'OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'OpenLongFloatHashMapTest:assertEquals(double,double,double)', 'OpenLongFloatHashMapTest:assertEquals(double,double,double)']
OpenLongFloatHashMapTest:testContainValue():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:containsValue(float)', 'OpenLongFloatHashMapTest:assertTrue(boolean)', 'OpenLongFloatHashMap:containsValue(float)', 'OpenLongFloatHashMapTest:assertFalse(boolean)']
OpenLongFloatHashMapTest:testContainsKey():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:containsKey(long)', 'OpenLongFloatHashMapTest:assertTrue(boolean)', 'OpenLongFloatHashMap:containsKey(long)', 'OpenLongFloatHashMapTest:assertFalse(boolean)']
OpenLongFloatHashMapTest:testCopy():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:copy()', 'OpenLongFloatHashMap:clear()', 'OpenLongFloatHashMap:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)']
OpenLongFloatHashMapTest:testEnsureCapacity():['OpenLongFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongFloatHashMap:ensureCapacity(int)', 'OpenLongFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongFloatHashMapTest:assertEquals(long,long)']
OpenLongFloatHashMapTest:testEquals():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:removeKey(long)', 'OpenLongFloatHashMap:copy()', 'OpenLongFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongFloatHashMap:equals(java.lang.Object)', 'OpenLongFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongFloatHashMapTest:assertFalse(boolean)', 'OpenLongFloatHashMap:equals(java.lang.Object)', 'OpenLongFloatHashMapTest:assertFalse(boolean)', 'OpenLongFloatHashMap:removeKey(long)', 'OpenLongFloatHashMap:equals(java.lang.Object)', 'OpenLongFloatHashMapTest:assertFalse(boolean)', 'OpenLongFloatHashMap:equals(java.lang.Object)', 'OpenLongFloatHashMapTest:assertFalse(boolean)']
OpenLongFloatHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:removeKey(long)', 'OpenLongFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongFloatHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongFloatHashMapTest:assertArrayEquals(long[],long[])']
OpenLongFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:removeKey(long)', 'OpenLongFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest,java.util.List)', 'OpenLongFloatHashMap:forEachPair(org.apache.mahout.math.function.LongFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'List:clear()', 'OpenLongFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest,java.util.List)', 'OpenLongFloatHashMap:forEachPair(org.apache.mahout.math.function.LongFloatProcedure)', 'List:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)']
OpenLongFloatHashMapTest:testGet():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:get(long)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'OpenLongFloatHashMap:get(long)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)']
OpenLongFloatHashMapTest:testKeys():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'LongArrayList:<init>()', 'OpenLongFloatHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'OpenLongFloatHashMap:keys()', 'LongArrayList:sort()', 'OpenLongFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongFloatHashMapTest:testKeysSortedByValue():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongFloatHashMapTest:assertArrayEquals(long[],long[])']
OpenLongFloatHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:removeKey(long)', 'OpenLongFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongFloatHashMapTest)', 'OpenLongFloatHashMap:pairsMatching(org.apache.mahout.math.function.LongFloatProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', 'LongArrayList:sort()', 'FloatArrayList:sort()', 'LongArrayList:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)']
OpenLongFloatHashMapTest:testPairsSortedByKey():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'LongArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenLongFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', 'LongArrayList:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'LongArrayList:clear()', 'FloatArrayList:clear()', 'OpenLongFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'LongArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)']
OpenLongFloatHashMapTest:testValues():['OpenLongFloatHashMap:<init>()', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:put(long,float)', 'OpenLongFloatHashMap:removeKey(long)', 'FloatArrayList:<init>(int)', 'OpenLongFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenLongFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenLongFloatHashMapTest:assertEquals(float,float,float)']
OpenLongHashSetTest:testClear():['OpenLongHashSet:<init>()', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:size()', 'OpenLongHashSetTest:assertEquals(long,long)', 'OpenLongHashSet:clear()', 'OpenLongHashSet:size()', 'OpenLongHashSetTest:assertEquals(long,long)']
OpenLongHashSetTest:testClone():['OpenLongHashSet:<init>()', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:clone()', 'OpenLongHashSet:clear()', 'OpenLongHashSet:size()', 'OpenLongHashSetTest:assertEquals(long,long)']
OpenLongHashSetTest:testConstructors():['OpenLongHashSet:<init>()', 'OpenLongHashSet:getInternalFactors(int[],double[],double[])', 'OpenLongHashSetTest:assertEquals(long,long)', 'OpenLongHashSetTest:assertEquals(double,double,double)', 'OpenLongHashSetTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongHashSet:<init>(int)', 'OpenLongHashSet:getInternalFactors(int[],double[],double[])', 'OpenLongHashSetTest:assertEquals(long,long)', 'OpenLongHashSetTest:assertEquals(double,double,double)', 'OpenLongHashSetTest:assertEquals(double,double,double)', 'OpenLongHashSet:<init>(int,double,double)', 'OpenLongHashSet:getInternalFactors(int[],double[],double[])', 'OpenLongHashSetTest:assertEquals(long,long)', 'OpenLongHashSetTest:assertEquals(double,double,double)', 'OpenLongHashSetTest:assertEquals(double,double,double)']
OpenLongHashSetTest:testContains():['OpenLongHashSet:<init>()', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:contains(long)', 'OpenLongHashSetTest:assertTrue(boolean)', 'OpenLongHashSet:contains(long)', 'OpenLongHashSetTest:assertFalse(boolean)']
OpenLongHashSetTest:testCopy():['OpenLongHashSet:<init>()', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:copy()', 'OpenLongHashSet:clear()', 'OpenLongHashSet:size()', 'OpenLongHashSetTest:assertEquals(long,long)']
OpenLongHashSetTest:testEnsureCapacity():['OpenLongHashSet:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongHashSet:ensureCapacity(int)', 'OpenLongHashSet:getInternalFactors(int[],double[],double[])', 'OpenLongHashSetTest:assertEquals(long,long)']
OpenLongHashSetTest:testEquals():['OpenLongHashSet:<init>()', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:remove(long)', 'OpenLongHashSet:copy()', 'OpenLongHashSet:equals(java.lang.Object)', 'OpenLongHashSetTest:assertTrue(boolean)', 'OpenLongHashSet:hashCode()', 'OpenLongHashSet:hashCode()', 'OpenLongHashSetTest:assertTrue(boolean)', 'OpenLongHashSet:equals(java.lang.Object)', 'OpenLongHashSetTest:assertTrue(boolean)', 'OpenLongHashSet:hashCode()', 'OpenLongHashSet:hashCode()', 'OpenLongHashSetTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongHashSetTest:assertFalse(boolean)', 'OpenLongHashSet:equals(java.lang.Object)', 'OpenLongHashSetTest:assertFalse(boolean)', 'OpenLongHashSet:remove(long)', 'OpenLongHashSet:equals(java.lang.Object)', 'OpenLongHashSetTest:assertFalse(boolean)', 'OpenLongHashSet:equals(java.lang.Object)', 'OpenLongHashSetTest:assertFalse(boolean)', 'OpenLongHashSet:hashCode()', 'OpenLongHashSet:hashCode()', 'OpenLongHashSetTest:assertFalse(boolean)']
OpenLongHashSetTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongHashSet:<init>()', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:remove(long)', 'OpenLongHashSetTest$1:<init>(org.apache.mahout.math.set.OpenLongHashSetTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongHashSet:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongHashSetTest:assertArrayEquals(long[],long[])']
OpenLongHashSetTest:testKeys():['OpenLongHashSet:<init>()', 'OpenLongHashSet:add(long)', 'OpenLongHashSet:add(long)', 'LongArrayList:<init>()', 'OpenLongHashSet:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongHashSetTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongHashSetTest:assertEquals(long,long)', 'OpenLongHashSet:keys()', 'LongArrayList:sort()', 'OpenLongHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongIntHashMapTest:testAdjustOrPutValue():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:adjustOrPutValue(long,int,int)', 'OpenLongIntHashMap:get(long)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMap:adjustOrPutValue(long,int,int)', 'OpenLongIntHashMap:get(long)', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testClear():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMap:clear()', 'OpenLongIntHashMap:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMap:get(long)', 'OpenLongIntHashMapTest:assertEquals(double,double,double)']
OpenLongIntHashMapTest:testClone():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:clone()', 'OpenLongIntHashMap:clear()', 'OpenLongIntHashMap:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testConstructors():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMapTest:assertEquals(double,double,double)', 'OpenLongIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongIntHashMap:<init>(int)', 'OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMapTest:assertEquals(double,double,double)', 'OpenLongIntHashMapTest:assertEquals(double,double,double)', 'OpenLongIntHashMap:<init>(int,double,double)', 'OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMapTest:assertEquals(double,double,double)', 'OpenLongIntHashMapTest:assertEquals(double,double,double)']
OpenLongIntHashMapTest:testContainValue():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:containsValue(int)', 'OpenLongIntHashMapTest:assertTrue(boolean)', 'OpenLongIntHashMap:containsValue(int)', 'OpenLongIntHashMapTest:assertFalse(boolean)']
OpenLongIntHashMapTest:testContainsKey():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:containsKey(long)', 'OpenLongIntHashMapTest:assertTrue(boolean)', 'OpenLongIntHashMap:containsKey(long)', 'OpenLongIntHashMapTest:assertFalse(boolean)']
OpenLongIntHashMapTest:testCopy():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:copy()', 'OpenLongIntHashMap:clear()', 'OpenLongIntHashMap:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testEnsureCapacity():['OpenLongIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongIntHashMap:ensureCapacity(int)', 'OpenLongIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testEquals():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:removeKey(long)', 'OpenLongIntHashMap:copy()', 'OpenLongIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongIntHashMap:equals(java.lang.Object)', 'OpenLongIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongIntHashMapTest:assertFalse(boolean)', 'OpenLongIntHashMap:equals(java.lang.Object)', 'OpenLongIntHashMapTest:assertFalse(boolean)', 'OpenLongIntHashMap:removeKey(long)', 'OpenLongIntHashMap:equals(java.lang.Object)', 'OpenLongIntHashMapTest:assertFalse(boolean)', 'OpenLongIntHashMap:equals(java.lang.Object)', 'OpenLongIntHashMapTest:assertFalse(boolean)']
OpenLongIntHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:removeKey(long)', 'OpenLongIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongIntHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongIntHashMapTest:assertArrayEquals(long[],long[])']
OpenLongIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:removeKey(long)', 'OpenLongIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest,java.util.List)', 'OpenLongIntHashMap:forEachPair(org.apache.mahout.math.function.LongIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenLongIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest,java.util.List)', 'OpenLongIntHashMap:forEachPair(org.apache.mahout.math.function.LongIntProcedure)', 'List:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testGet():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:get(long)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMap:get(long)', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testKeys():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'LongArrayList:<init>()', 'OpenLongIntHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'OpenLongIntHashMap:keys()', 'LongArrayList:sort()', 'OpenLongIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongIntHashMapTest:testKeysSortedByValue():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongIntHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongIntHashMapTest:assertArrayEquals(long[],long[])']
OpenLongIntHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'IntArrayList:<init>()', 'OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:removeKey(long)', 'OpenLongIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongIntHashMapTest)', 'OpenLongIntHashMap:pairsMatching(org.apache.mahout.math.function.LongIntProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', 'LongArrayList:sort()', 'IntArrayList:sort()', 'LongArrayList:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testPairsSortedByKey():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'LongArrayList:<init>()', 'IntArrayList:<init>()', 'OpenLongIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', 'LongArrayList:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:clear()', 'IntArrayList:clear()', 'OpenLongIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongIntHashMapTest:testValues():['OpenLongIntHashMap:<init>()', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:put(long,int)', 'OpenLongIntHashMap:removeKey(long)', 'IntArrayList:<init>(int)', 'OpenLongIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenLongIntHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testAdjustOrPutValue():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:adjustOrPutValue(long,long,long)', 'OpenLongLongHashMap:get(long)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMap:adjustOrPutValue(long,long,long)', 'OpenLongLongHashMap:get(long)', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testClear():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMap:clear()', 'OpenLongLongHashMap:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMap:get(long)', 'OpenLongLongHashMapTest:assertEquals(double,double,double)']
OpenLongLongHashMapTest:testClone():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:clone()', 'OpenLongLongHashMap:clear()', 'OpenLongLongHashMap:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testConstructors():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMapTest:assertEquals(double,double,double)', 'OpenLongLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongLongHashMap:<init>(int)', 'OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMapTest:assertEquals(double,double,double)', 'OpenLongLongHashMapTest:assertEquals(double,double,double)', 'OpenLongLongHashMap:<init>(int,double,double)', 'OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMapTest:assertEquals(double,double,double)', 'OpenLongLongHashMapTest:assertEquals(double,double,double)']
OpenLongLongHashMapTest:testContainValue():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:containsValue(long)', 'OpenLongLongHashMapTest:assertTrue(boolean)', 'OpenLongLongHashMap:containsValue(long)', 'OpenLongLongHashMapTest:assertFalse(boolean)']
OpenLongLongHashMapTest:testContainsKey():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:containsKey(long)', 'OpenLongLongHashMapTest:assertTrue(boolean)', 'OpenLongLongHashMap:containsKey(long)', 'OpenLongLongHashMapTest:assertFalse(boolean)']
OpenLongLongHashMapTest:testCopy():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:copy()', 'OpenLongLongHashMap:clear()', 'OpenLongLongHashMap:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testEnsureCapacity():['OpenLongLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongLongHashMap:ensureCapacity(int)', 'OpenLongLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testEquals():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:removeKey(long)', 'OpenLongLongHashMap:copy()', 'OpenLongLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongLongHashMap:equals(java.lang.Object)', 'OpenLongLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongLongHashMapTest:assertFalse(boolean)', 'OpenLongLongHashMap:equals(java.lang.Object)', 'OpenLongLongHashMapTest:assertFalse(boolean)', 'OpenLongLongHashMap:removeKey(long)', 'OpenLongLongHashMap:equals(java.lang.Object)', 'OpenLongLongHashMapTest:assertFalse(boolean)', 'OpenLongLongHashMap:equals(java.lang.Object)', 'OpenLongLongHashMapTest:assertFalse(boolean)']
OpenLongLongHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:removeKey(long)', 'OpenLongLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongLongHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongLongHashMapTest:assertArrayEquals(long[],long[])']
OpenLongLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:removeKey(long)', 'OpenLongLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest,java.util.List)', 'OpenLongLongHashMap:forEachPair(org.apache.mahout.math.function.LongLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenLongLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest,java.util.List)', 'OpenLongLongHashMap:forEachPair(org.apache.mahout.math.function.LongLongProcedure)', 'List:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testGet():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:get(long)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMap:get(long)', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testKeys():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'LongArrayList:<init>()', 'OpenLongLongHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'OpenLongLongHashMap:keys()', 'LongArrayList:sort()', 'OpenLongLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongLongHashMapTest:testKeysSortedByValue():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongLongHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongLongHashMapTest:assertArrayEquals(long[],long[])']
OpenLongLongHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'LongArrayList:<init>()', 'OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:removeKey(long)', 'OpenLongLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongLongHashMapTest)', 'OpenLongLongHashMap:pairsMatching(org.apache.mahout.math.function.LongLongProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:sort()', 'LongArrayList:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testPairsSortedByKey():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'LongArrayList:<init>()', 'LongArrayList:<init>()', 'OpenLongLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:clear()', 'LongArrayList:clear()', 'OpenLongLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongLongHashMapTest:testValues():['OpenLongLongHashMap:<init>()', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:put(long,long)', 'OpenLongLongHashMap:removeKey(long)', 'LongArrayList:<init>(int)', 'OpenLongLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongLongHashMapTest:assertEquals(long,long)']
OpenLongObjectHashMapTest:testClear():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'OpenLongObjectHashMap:clear()', 'OpenLongObjectHashMap:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OpenLongObjectHashMap:containsKey(long)', 'OpenLongObjectHashMapTest:assertFalse(java.lang.String,boolean)', 'OpenLongObjectHashMap:get(long)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenLongObjectHashMapTest:testClone():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:clone()', 'OpenLongObjectHashMap:clear()', 'OpenLongObjectHashMap:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)']
OpenLongObjectHashMapTest:testConstructors():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'OpenLongObjectHashMapTest:assertEquals(double,double,double)', 'OpenLongObjectHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongObjectHashMap:<init>(int)', 'OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'OpenLongObjectHashMapTest:assertEquals(double,double,double)', 'OpenLongObjectHashMapTest:assertEquals(double,double,double)', 'OpenLongObjectHashMap:<init>(int,double,double)', 'OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'OpenLongObjectHashMapTest:assertEquals(double,double,double)', 'OpenLongObjectHashMapTest:assertEquals(double,double,double)']
OpenLongObjectHashMapTest:testContainValue():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:containsValue(java.lang.Object)', 'OpenLongObjectHashMapTest:assertTrue(boolean)', 'OpenLongObjectHashMap:containsValue(java.lang.Object)', 'OpenLongObjectHashMapTest:assertFalse(boolean)']
OpenLongObjectHashMapTest:testContainsKey():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:containsKey(long)', 'OpenLongObjectHashMapTest:assertTrue(boolean)', 'OpenLongObjectHashMap:containsKey(long)', 'OpenLongObjectHashMapTest:assertFalse(boolean)']
OpenLongObjectHashMapTest:testCopy():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:copy()', 'OpenLongObjectHashMap:clear()', 'OpenLongObjectHashMap:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)']
OpenLongObjectHashMapTest:testEnsureCapacity():['OpenLongObjectHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongObjectHashMap:ensureCapacity(int)', 'OpenLongObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongObjectHashMapTest:assertEquals(long,long)']
OpenLongObjectHashMapTest:testEquals():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:removeKey(long)', 'OpenLongObjectHashMap:copy()', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongObjectHashMap:equals(java.lang.Object)', 'OpenLongObjectHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongObjectHashMapTest:assertFalse(boolean)', 'OpenLongObjectHashMap:equals(java.lang.Object)', 'OpenLongObjectHashMapTest:assertFalse(boolean)', 'OpenLongObjectHashMap:removeKey(long)', 'OpenLongObjectHashMap:equals(java.lang.Object)', 'OpenLongObjectHashMapTest:assertFalse(boolean)', 'OpenLongObjectHashMap:equals(java.lang.Object)', 'OpenLongObjectHashMapTest:assertFalse(boolean)']
OpenLongObjectHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:removeKey(long)', 'OpenLongObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongObjectHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongObjectHashMapTest:assertArrayEquals(long[],long[])']
OpenLongObjectHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:removeKey(long)', 'OpenLongObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest,java.util.List)', 'OpenLongObjectHashMap:forEachPair(org.apache.mahout.math.function.LongObjectProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenLongObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest,java.util.List)', 'OpenLongObjectHashMap:forEachPair(org.apache.mahout.math.function.LongObjectProcedure)', 'List:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)']
OpenLongObjectHashMapTest:testGet():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:get(long)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenLongObjectHashMap:get(long)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenLongObjectHashMapTest:testKeys():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'LongArrayList:<init>()', 'OpenLongObjectHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'OpenLongObjectHashMap:keys()', 'LongArrayList:sort()', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongObjectHashMapTest:testKeysSortedByValue():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongObjectHashMapTest:assertArrayEquals(long[],long[])']
OpenLongObjectHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'ArrayList:<init>()', 'OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:removeKey(long)', 'OpenLongObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongObjectHashMapTest)', 'OpenLongObjectHashMap:pairsMatching(org.apache.mahout.math.function.LongObjectProcedure,org.apache.mahout.math.list.LongArrayList,java.util.List)', 'LongArrayList:sort()', 'Collections:sort(java.util.List)', 'LongArrayList:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenLongObjectHashMapTest:testPairsSortedByKey():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'LongArrayList:<init>()', 'ArrayList:<init>()', 'OpenLongObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,java.util.List)', 'LongArrayList:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenLongObjectHashMapTest:testPairsSortedByValue():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'LongArrayList:<init>()', 'ArrayList:<init>()', 'OpenLongObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,java.util.List)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongObjectHashMapTest:testValues():['OpenLongObjectHashMap:<init>()', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:put(long,java.lang.Object)', 'OpenLongObjectHashMap:removeKey(long)', 'ArrayList:<init>(int)', 'OpenLongObjectHashMap:values(java.util.List)', 'List:size()', 'OpenLongObjectHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenLongObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongShortHashMapTest:testAdjustOrPutValue():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:adjustOrPutValue(long,short,short)', 'OpenLongShortHashMap:get(long)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMap:adjustOrPutValue(long,short,short)', 'OpenLongShortHashMap:get(long)', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testClear():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMap:clear()', 'OpenLongShortHashMap:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMap:get(long)', 'OpenLongShortHashMapTest:assertEquals(double,double,double)']
OpenLongShortHashMapTest:testClone():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:clone()', 'OpenLongShortHashMap:clear()', 'OpenLongShortHashMap:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testConstructors():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMapTest:assertEquals(double,double,double)', 'OpenLongShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenLongShortHashMap:<init>(int)', 'OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMapTest:assertEquals(double,double,double)', 'OpenLongShortHashMapTest:assertEquals(double,double,double)', 'OpenLongShortHashMap:<init>(int,double,double)', 'OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMapTest:assertEquals(double,double,double)', 'OpenLongShortHashMapTest:assertEquals(double,double,double)']
OpenLongShortHashMapTest:testContainValue():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:containsValue(short)', 'OpenLongShortHashMapTest:assertTrue(boolean)', 'OpenLongShortHashMap:containsValue(short)', 'OpenLongShortHashMapTest:assertFalse(boolean)']
OpenLongShortHashMapTest:testContainsKey():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:containsKey(long)', 'OpenLongShortHashMapTest:assertTrue(boolean)', 'OpenLongShortHashMap:containsKey(long)', 'OpenLongShortHashMapTest:assertFalse(boolean)']
OpenLongShortHashMapTest:testCopy():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:copy()', 'OpenLongShortHashMap:clear()', 'OpenLongShortHashMap:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testEnsureCapacity():['OpenLongShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenLongShortHashMap:ensureCapacity(int)', 'OpenLongShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testEquals():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:removeKey(long)', 'OpenLongShortHashMap:copy()', 'OpenLongShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenLongShortHashMap:equals(java.lang.Object)', 'OpenLongShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenLongShortHashMapTest:assertFalse(boolean)', 'OpenLongShortHashMap:equals(java.lang.Object)', 'OpenLongShortHashMapTest:assertFalse(boolean)', 'OpenLongShortHashMap:removeKey(long)', 'OpenLongShortHashMap:equals(java.lang.Object)', 'OpenLongShortHashMapTest:assertFalse(boolean)', 'OpenLongShortHashMap:equals(java.lang.Object)', 'OpenLongShortHashMapTest:assertFalse(boolean)']
OpenLongShortHashMapTest:testForEachKey():['LongArrayList:<init>()', 'OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:removeKey(long)', 'OpenLongShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest,org.apache.mahout.math.list.LongArrayList)', 'OpenLongShortHashMap:forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'Arrays:sort(long[])', 'OpenLongShortHashMapTest:assertArrayEquals(long[],long[])']
OpenLongShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:removeKey(long)', 'OpenLongShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest,java.util.List)', 'OpenLongShortHashMap:forEachPair(org.apache.mahout.math.function.LongShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenLongShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest,java.util.List)', 'OpenLongShortHashMap:forEachPair(org.apache.mahout.math.function.LongShortProcedure)', 'List:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testGet():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:get(long)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMap:get(long)', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testKeys():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'LongArrayList:<init>()', 'OpenLongShortHashMap:keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'OpenLongShortHashMap:keys()', 'LongArrayList:sort()', 'OpenLongShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenLongShortHashMapTest:testKeysSortedByValue():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:removeKey(long)', 'LongArrayList:<init>()', 'OpenLongShortHashMap:keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'LongArrayList:toArray(long[])', 'OpenLongShortHashMapTest:assertArrayEquals(long[],long[])']
OpenLongShortHashMapTest:testPairsMatching():['LongArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:removeKey(long)', 'OpenLongShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenLongShortHashMapTest)', 'OpenLongShortHashMap:pairsMatching(org.apache.mahout.math.function.LongShortProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', 'LongArrayList:sort()', 'ShortArrayList:sort()', 'LongArrayList:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testPairsSortedByKey():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'LongArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenLongShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', 'LongArrayList:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:clear()', 'ShortArrayList:clear()', 'OpenLongShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenLongShortHashMapTest:testValues():['OpenLongShortHashMap:<init>()', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:put(long,short)', 'OpenLongShortHashMap:removeKey(long)', 'ShortArrayList:<init>(int)', 'OpenLongShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenLongShortHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testAdjustOrPutValue():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:adjustOrPutValue(java.lang.Object,byte,byte)', 'OpenObjectByteHashMap:get(java.lang.Object)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'OpenObjectByteHashMap:adjustOrPutValue(java.lang.Object,byte,byte)', 'OpenObjectByteHashMap:get(java.lang.Object)', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testClear():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'OpenObjectByteHashMap:clear()', 'OpenObjectByteHashMap:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testClone():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:clone()', 'OpenObjectByteHashMap:clear()', 'OpenObjectByteHashMap:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testConstructors():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'OpenObjectByteHashMapTest:assertEquals(double,double,double)', 'OpenObjectByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenObjectByteHashMap:<init>(int)', 'OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'OpenObjectByteHashMapTest:assertEquals(double,double,double)', 'OpenObjectByteHashMapTest:assertEquals(double,double,double)', 'OpenObjectByteHashMap:<init>(int,double,double)', 'OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'OpenObjectByteHashMapTest:assertEquals(double,double,double)', 'OpenObjectByteHashMapTest:assertEquals(double,double,double)']
OpenObjectByteHashMapTest:testContainValue():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:containsValue(byte)', 'OpenObjectByteHashMapTest:assertTrue(boolean)', 'OpenObjectByteHashMap:containsValue(byte)', 'OpenObjectByteHashMapTest:assertFalse(boolean)']
OpenObjectByteHashMapTest:testContainsKey():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:containsKey(java.lang.Object)', 'OpenObjectByteHashMapTest:assertTrue(boolean)', 'OpenObjectByteHashMap:containsKey(java.lang.Object)', 'OpenObjectByteHashMapTest:assertTrue(boolean)', 'OpenObjectByteHashMap:containsKey(java.lang.Object)', 'OpenObjectByteHashMapTest:assertFalse(boolean)']
OpenObjectByteHashMapTest:testCopy():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:copy()', 'OpenObjectByteHashMap:clear()', 'OpenObjectByteHashMap:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testEnsureCapacity():['OpenObjectByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenObjectByteHashMap:ensureCapacity(int)', 'OpenObjectByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testEquals():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:removeKey(java.lang.Object)', 'OpenObjectByteHashMap:copy()', 'OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap:equals(java.lang.Object)', 'OpenObjectByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenObjectByteHashMapTest:assertFalse(boolean)', 'OpenObjectByteHashMap:equals(java.lang.Object)', 'OpenObjectByteHashMapTest:assertFalse(boolean)', 'OpenObjectByteHashMap:removeKey(java.lang.Object)', 'OpenObjectByteHashMap:equals(java.lang.Object)', 'OpenObjectByteHashMapTest:assertFalse(boolean)', 'OpenObjectByteHashMap:equals(java.lang.Object)', 'OpenObjectByteHashMapTest:assertFalse(boolean)']
OpenObjectByteHashMapTest:testForEachKey():['ArrayList:<init>()', 'OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:removeKey(java.lang.Object)', 'OpenObjectByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest,java.util.List)', 'OpenObjectByteHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'List:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:removeKey(java.lang.Object)', 'OpenObjectByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest,java.util.List)', 'OpenObjectByteHashMap:forEachPair(org.apache.mahout.math.function.ObjectByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenObjectByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest,java.util.List)', 'OpenObjectByteHashMap:forEachPair(org.apache.mahout.math.function.ObjectByteProcedure)', 'List:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testGet():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:get(java.lang.Object)', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testKeys():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'ArrayList:<init>()', 'OpenObjectByteHashMap:keys(java.util.List)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap:keys()', 'Collections:sort(java.util.List)', 'OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectByteHashMapTest:testKeysSortedByValue():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:removeKey(java.lang.Object)', 'ArrayList:<init>()', 'OpenObjectByteHashMap:keysSortedByValue(java.util.List)', 'List:size()', 'List:toArray(java.lang.Object[])', 'OpenObjectByteHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
OpenObjectByteHashMapTest:testPairsMatching():['ArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:removeKey(java.lang.Object)', 'OpenObjectByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectByteHashMapTest)', 'OpenObjectByteHashMap:pairsMatching(org.apache.mahout.math.function.ObjectByteProcedure,java.util.List,org.apache.mahout.math.list.ByteArrayList)', 'Collections:sort(java.util.List)', 'ByteArrayList:sort()', 'List:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectByteHashMapTest:testPairsSortedByKey():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'ByteArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectByteHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ByteArrayList)', 'List:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectByteHashMapTest:testPairsSortedByKeyNotComparable():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'ByteArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectByteHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ByteArrayList)']
OpenObjectByteHashMapTest:testPairsSortedByValue():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'ArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenObjectByteHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectByteHashMapTest:testValues():['OpenObjectByteHashMap:<init>()', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:put(java.lang.Object,byte)', 'OpenObjectByteHashMap:removeKey(java.lang.Object)', 'ByteArrayList:<init>(int)', 'OpenObjectByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenObjectByteHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testAdjustOrPutValue():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:adjustOrPutValue(java.lang.Object,char,char)', 'OpenObjectCharHashMap:get(java.lang.Object)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'OpenObjectCharHashMap:adjustOrPutValue(java.lang.Object,char,char)', 'OpenObjectCharHashMap:get(java.lang.Object)', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testClear():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'OpenObjectCharHashMap:clear()', 'OpenObjectCharHashMap:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testClone():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:clone()', 'OpenObjectCharHashMap:clear()', 'OpenObjectCharHashMap:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testConstructors():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'OpenObjectCharHashMapTest:assertEquals(double,double,double)', 'OpenObjectCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenObjectCharHashMap:<init>(int)', 'OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'OpenObjectCharHashMapTest:assertEquals(double,double,double)', 'OpenObjectCharHashMapTest:assertEquals(double,double,double)', 'OpenObjectCharHashMap:<init>(int,double,double)', 'OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'OpenObjectCharHashMapTest:assertEquals(double,double,double)', 'OpenObjectCharHashMapTest:assertEquals(double,double,double)']
OpenObjectCharHashMapTest:testContainValue():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:containsValue(char)', 'OpenObjectCharHashMapTest:assertTrue(boolean)', 'OpenObjectCharHashMap:containsValue(char)', 'OpenObjectCharHashMapTest:assertFalse(boolean)']
OpenObjectCharHashMapTest:testContainsKey():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:containsKey(java.lang.Object)', 'OpenObjectCharHashMapTest:assertTrue(boolean)', 'OpenObjectCharHashMap:containsKey(java.lang.Object)', 'OpenObjectCharHashMapTest:assertTrue(boolean)', 'OpenObjectCharHashMap:containsKey(java.lang.Object)', 'OpenObjectCharHashMapTest:assertFalse(boolean)']
OpenObjectCharHashMapTest:testCopy():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:copy()', 'OpenObjectCharHashMap:clear()', 'OpenObjectCharHashMap:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testEnsureCapacity():['OpenObjectCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenObjectCharHashMap:ensureCapacity(int)', 'OpenObjectCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testEquals():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:removeKey(java.lang.Object)', 'OpenObjectCharHashMap:copy()', 'OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap:equals(java.lang.Object)', 'OpenObjectCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenObjectCharHashMapTest:assertFalse(boolean)', 'OpenObjectCharHashMap:equals(java.lang.Object)', 'OpenObjectCharHashMapTest:assertFalse(boolean)', 'OpenObjectCharHashMap:removeKey(java.lang.Object)', 'OpenObjectCharHashMap:equals(java.lang.Object)', 'OpenObjectCharHashMapTest:assertFalse(boolean)', 'OpenObjectCharHashMap:equals(java.lang.Object)', 'OpenObjectCharHashMapTest:assertFalse(boolean)']
OpenObjectCharHashMapTest:testForEachKey():['ArrayList:<init>()', 'OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:removeKey(java.lang.Object)', 'OpenObjectCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest,java.util.List)', 'OpenObjectCharHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'List:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:removeKey(java.lang.Object)', 'OpenObjectCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest,java.util.List)', 'OpenObjectCharHashMap:forEachPair(org.apache.mahout.math.function.ObjectCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenObjectCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest,java.util.List)', 'OpenObjectCharHashMap:forEachPair(org.apache.mahout.math.function.ObjectCharProcedure)', 'List:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testGet():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:get(java.lang.Object)', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testKeys():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'ArrayList:<init>()', 'OpenObjectCharHashMap:keys(java.util.List)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap:keys()', 'Collections:sort(java.util.List)', 'OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectCharHashMapTest:testKeysSortedByValue():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:removeKey(java.lang.Object)', 'ArrayList:<init>()', 'OpenObjectCharHashMap:keysSortedByValue(java.util.List)', 'List:size()', 'List:toArray(java.lang.Object[])', 'OpenObjectCharHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
OpenObjectCharHashMapTest:testPairsMatching():['ArrayList:<init>()', 'CharArrayList:<init>()', 'OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:removeKey(java.lang.Object)', 'OpenObjectCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectCharHashMapTest)', 'OpenObjectCharHashMap:pairsMatching(org.apache.mahout.math.function.ObjectCharProcedure,java.util.List,org.apache.mahout.math.list.CharArrayList)', 'Collections:sort(java.util.List)', 'CharArrayList:sort()', 'List:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectCharHashMapTest:testPairsSortedByKey():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'CharArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectCharHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.CharArrayList)', 'List:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectCharHashMapTest:testPairsSortedByKeyNotComparable():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'CharArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectCharHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.CharArrayList)']
OpenObjectCharHashMapTest:testPairsSortedByValue():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'ArrayList:<init>()', 'CharArrayList:<init>()', 'OpenObjectCharHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectCharHashMapTest:testValues():['OpenObjectCharHashMap:<init>()', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:put(java.lang.Object,char)', 'OpenObjectCharHashMap:removeKey(java.lang.Object)', 'CharArrayList:<init>(int)', 'OpenObjectCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenObjectCharHashMapTest:assertEquals(long,long)']
OpenObjectDoubleHashMapTest:testAdjustOrPutValue():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:adjustOrPutValue(java.lang.Object,double,double)', 'OpenObjectDoubleHashMap:get(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'OpenObjectDoubleHashMap:adjustOrPutValue(java.lang.Object,double,double)', 'OpenObjectDoubleHashMap:get(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
OpenObjectDoubleHashMapTest:testClear():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'OpenObjectDoubleHashMap:clear()', 'OpenObjectDoubleHashMap:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)']
OpenObjectDoubleHashMapTest:testClone():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:clone()', 'OpenObjectDoubleHashMap:clear()', 'OpenObjectDoubleHashMap:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)']
OpenObjectDoubleHashMapTest:testConstructors():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenObjectDoubleHashMap:<init>(int)', 'OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'OpenObjectDoubleHashMap:<init>(int,double,double)', 'OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
OpenObjectDoubleHashMapTest:testContainValue():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:containsValue(double)', 'OpenObjectDoubleHashMapTest:assertTrue(boolean)', 'OpenObjectDoubleHashMap:containsValue(double)', 'OpenObjectDoubleHashMapTest:assertFalse(boolean)']
OpenObjectDoubleHashMapTest:testContainsKey():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:containsKey(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertTrue(boolean)', 'OpenObjectDoubleHashMap:containsKey(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertTrue(boolean)', 'OpenObjectDoubleHashMap:containsKey(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertFalse(boolean)']
OpenObjectDoubleHashMapTest:testCopy():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:copy()', 'OpenObjectDoubleHashMap:clear()', 'OpenObjectDoubleHashMap:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)']
OpenObjectDoubleHashMapTest:testEnsureCapacity():['OpenObjectDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenObjectDoubleHashMap:ensureCapacity(int)', 'OpenObjectDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)']
OpenObjectDoubleHashMapTest:testEquals():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap:copy()', 'OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap:equals(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertFalse(boolean)', 'OpenObjectDoubleHashMap:equals(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertFalse(boolean)', 'OpenObjectDoubleHashMap:removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap:equals(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertFalse(boolean)', 'OpenObjectDoubleHashMap:equals(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertFalse(boolean)']
OpenObjectDoubleHashMapTest:testForEachKey():['ArrayList:<init>()', 'OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:removeKey(java.lang.Object)', 'OpenObjectDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest,java.util.List)', 'OpenObjectDoubleHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'List:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:removeKey(java.lang.Object)', 'OpenObjectDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest,java.util.List)', 'OpenObjectDoubleHashMap:forEachPair(org.apache.mahout.math.function.ObjectDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenObjectDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest,java.util.List)', 'OpenObjectDoubleHashMap:forEachPair(org.apache.mahout.math.function.ObjectDoubleProcedure)', 'List:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)']
OpenObjectDoubleHashMapTest:testGet():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:get(java.lang.Object)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
OpenObjectDoubleHashMapTest:testKeys():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'ArrayList:<init>()', 'OpenObjectDoubleHashMap:keys(java.util.List)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap:keys()', 'Collections:sort(java.util.List)', 'OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectDoubleHashMapTest:testKeysSortedByValue():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:removeKey(java.lang.Object)', 'ArrayList:<init>()', 'OpenObjectDoubleHashMap:keysSortedByValue(java.util.List)', 'List:size()', 'List:toArray(java.lang.Object[])', 'OpenObjectDoubleHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
OpenObjectDoubleHashMapTest:testPairsMatching():['ArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:removeKey(java.lang.Object)', 'OpenObjectDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectDoubleHashMapTest)', 'OpenObjectDoubleHashMap:pairsMatching(org.apache.mahout.math.function.ObjectDoubleProcedure,java.util.List,org.apache.mahout.math.list.DoubleArrayList)', 'Collections:sort(java.util.List)', 'DoubleArrayList:sort()', 'List:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
OpenObjectDoubleHashMapTest:testPairsSortedByKey():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'DoubleArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectDoubleHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.DoubleArrayList)', 'List:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectDoubleHashMapTest:testPairsSortedByKeyNotComparable():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'DoubleArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectDoubleHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.DoubleArrayList)']
OpenObjectDoubleHashMapTest:testPairsSortedByValue():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'ArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenObjectDoubleHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectDoubleHashMapTest:testValues():['OpenObjectDoubleHashMap:<init>()', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:put(java.lang.Object,double)', 'OpenObjectDoubleHashMap:removeKey(java.lang.Object)', 'DoubleArrayList:<init>(int)', 'OpenObjectDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenObjectDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenObjectDoubleHashMapTest:assertEquals(double,double,double)']
OpenObjectFloatHashMapTest:testAdjustOrPutValue():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:adjustOrPutValue(java.lang.Object,float,float)', 'OpenObjectFloatHashMap:get(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'OpenObjectFloatHashMap:adjustOrPutValue(java.lang.Object,float,float)', 'OpenObjectFloatHashMap:get(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
OpenObjectFloatHashMapTest:testClear():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'OpenObjectFloatHashMap:clear()', 'OpenObjectFloatHashMap:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)']
OpenObjectFloatHashMapTest:testClone():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:clone()', 'OpenObjectFloatHashMap:clear()', 'OpenObjectFloatHashMap:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)']
OpenObjectFloatHashMapTest:testConstructors():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'OpenObjectFloatHashMapTest:assertEquals(double,double,double)', 'OpenObjectFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenObjectFloatHashMap:<init>(int)', 'OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'OpenObjectFloatHashMapTest:assertEquals(double,double,double)', 'OpenObjectFloatHashMapTest:assertEquals(double,double,double)', 'OpenObjectFloatHashMap:<init>(int,double,double)', 'OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'OpenObjectFloatHashMapTest:assertEquals(double,double,double)', 'OpenObjectFloatHashMapTest:assertEquals(double,double,double)']
OpenObjectFloatHashMapTest:testContainValue():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:containsValue(float)', 'OpenObjectFloatHashMapTest:assertTrue(boolean)', 'OpenObjectFloatHashMap:containsValue(float)', 'OpenObjectFloatHashMapTest:assertFalse(boolean)']
OpenObjectFloatHashMapTest:testContainsKey():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:containsKey(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertTrue(boolean)', 'OpenObjectFloatHashMap:containsKey(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertTrue(boolean)', 'OpenObjectFloatHashMap:containsKey(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertFalse(boolean)']
OpenObjectFloatHashMapTest:testCopy():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:copy()', 'OpenObjectFloatHashMap:clear()', 'OpenObjectFloatHashMap:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)']
OpenObjectFloatHashMapTest:testEnsureCapacity():['OpenObjectFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenObjectFloatHashMap:ensureCapacity(int)', 'OpenObjectFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectFloatHashMapTest:assertEquals(long,long)']
OpenObjectFloatHashMapTest:testEquals():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:removeKey(java.lang.Object)', 'OpenObjectFloatHashMap:copy()', 'OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap:equals(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertFalse(boolean)', 'OpenObjectFloatHashMap:equals(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertFalse(boolean)', 'OpenObjectFloatHashMap:removeKey(java.lang.Object)', 'OpenObjectFloatHashMap:equals(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertFalse(boolean)', 'OpenObjectFloatHashMap:equals(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertFalse(boolean)']
OpenObjectFloatHashMapTest:testForEachKey():['ArrayList:<init>()', 'OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:removeKey(java.lang.Object)', 'OpenObjectFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest,java.util.List)', 'OpenObjectFloatHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'List:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:removeKey(java.lang.Object)', 'OpenObjectFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest,java.util.List)', 'OpenObjectFloatHashMap:forEachPair(org.apache.mahout.math.function.ObjectFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenObjectFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest,java.util.List)', 'OpenObjectFloatHashMap:forEachPair(org.apache.mahout.math.function.ObjectFloatProcedure)', 'List:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)']
OpenObjectFloatHashMapTest:testGet():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:get(java.lang.Object)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
OpenObjectFloatHashMapTest:testKeys():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'ArrayList:<init>()', 'OpenObjectFloatHashMap:keys(java.util.List)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap:keys()', 'Collections:sort(java.util.List)', 'OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectFloatHashMapTest:testKeysSortedByValue():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:removeKey(java.lang.Object)', 'ArrayList:<init>()', 'OpenObjectFloatHashMap:keysSortedByValue(java.util.List)', 'List:size()', 'List:toArray(java.lang.Object[])', 'OpenObjectFloatHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
OpenObjectFloatHashMapTest:testPairsMatching():['ArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:removeKey(java.lang.Object)', 'OpenObjectFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectFloatHashMapTest)', 'OpenObjectFloatHashMap:pairsMatching(org.apache.mahout.math.function.ObjectFloatProcedure,java.util.List,org.apache.mahout.math.list.FloatArrayList)', 'Collections:sort(java.util.List)', 'FloatArrayList:sort()', 'List:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
OpenObjectFloatHashMapTest:testPairsSortedByKey():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'FloatArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectFloatHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.FloatArrayList)', 'List:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectFloatHashMapTest:testPairsSortedByKeyNotComparable():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'FloatArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectFloatHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.FloatArrayList)']
OpenObjectFloatHashMapTest:testPairsSortedByValue():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'ArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenObjectFloatHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectFloatHashMapTest:testValues():['OpenObjectFloatHashMap:<init>()', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:put(java.lang.Object,float)', 'OpenObjectFloatHashMap:removeKey(java.lang.Object)', 'FloatArrayList:<init>(int)', 'OpenObjectFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenObjectFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenObjectFloatHashMapTest:assertEquals(float,float,float)']
OpenObjectIntHashMapTest:testAdjustOrPutValue():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:adjustOrPutValue(java.lang.Object,int,int)', 'OpenObjectIntHashMap:get(java.lang.Object)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'OpenObjectIntHashMap:adjustOrPutValue(java.lang.Object,int,int)', 'OpenObjectIntHashMap:get(java.lang.Object)', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testClear():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'OpenObjectIntHashMap:clear()', 'OpenObjectIntHashMap:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testClone():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:clone()', 'OpenObjectIntHashMap:clear()', 'OpenObjectIntHashMap:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testConstructors():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'OpenObjectIntHashMapTest:assertEquals(double,double,double)', 'OpenObjectIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenObjectIntHashMap:<init>(int)', 'OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'OpenObjectIntHashMapTest:assertEquals(double,double,double)', 'OpenObjectIntHashMapTest:assertEquals(double,double,double)', 'OpenObjectIntHashMap:<init>(int,double,double)', 'OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'OpenObjectIntHashMapTest:assertEquals(double,double,double)', 'OpenObjectIntHashMapTest:assertEquals(double,double,double)']
OpenObjectIntHashMapTest:testContainValue():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:containsValue(int)', 'OpenObjectIntHashMapTest:assertTrue(boolean)', 'OpenObjectIntHashMap:containsValue(int)', 'OpenObjectIntHashMapTest:assertFalse(boolean)']
OpenObjectIntHashMapTest:testContainsKey():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:containsKey(java.lang.Object)', 'OpenObjectIntHashMapTest:assertTrue(boolean)', 'OpenObjectIntHashMap:containsKey(java.lang.Object)', 'OpenObjectIntHashMapTest:assertTrue(boolean)', 'OpenObjectIntHashMap:containsKey(java.lang.Object)', 'OpenObjectIntHashMapTest:assertFalse(boolean)']
OpenObjectIntHashMapTest:testCopy():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:copy()', 'OpenObjectIntHashMap:clear()', 'OpenObjectIntHashMap:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testEnsureCapacity():['OpenObjectIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenObjectIntHashMap:ensureCapacity(int)', 'OpenObjectIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testEquals():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'OpenObjectIntHashMap:copy()', 'OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap:equals(java.lang.Object)', 'OpenObjectIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenObjectIntHashMapTest:assertFalse(boolean)', 'OpenObjectIntHashMap:equals(java.lang.Object)', 'OpenObjectIntHashMapTest:assertFalse(boolean)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'OpenObjectIntHashMap:equals(java.lang.Object)', 'OpenObjectIntHashMapTest:assertFalse(boolean)', 'OpenObjectIntHashMap:equals(java.lang.Object)', 'OpenObjectIntHashMapTest:assertFalse(boolean)']
OpenObjectIntHashMapTest:testForEachKey():['ArrayList:<init>()', 'OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'OpenObjectIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest,java.util.List)', 'OpenObjectIntHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'List:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'OpenObjectIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest,java.util.List)', 'OpenObjectIntHashMap:forEachPair(org.apache.mahout.math.function.ObjectIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenObjectIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest,java.util.List)', 'OpenObjectIntHashMap:forEachPair(org.apache.mahout.math.function.ObjectIntProcedure)', 'List:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testGet():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:get(java.lang.Object)', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testKeys():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'ArrayList:<init>()', 'OpenObjectIntHashMap:keys(java.util.List)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap:keys()', 'Collections:sort(java.util.List)', 'OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectIntHashMapTest:testKeysSortedByValue():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'ArrayList:<init>()', 'OpenObjectIntHashMap:keysSortedByValue(java.util.List)', 'List:size()', 'List:toArray(java.lang.Object[])', 'OpenObjectIntHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
OpenObjectIntHashMapTest:testPairsMatching():['ArrayList:<init>()', 'IntArrayList:<init>()', 'OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'OpenObjectIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectIntHashMapTest)', 'OpenObjectIntHashMap:pairsMatching(org.apache.mahout.math.function.ObjectIntProcedure,java.util.List,org.apache.mahout.math.list.IntArrayList)', 'Collections:sort(java.util.List)', 'IntArrayList:sort()', 'List:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectIntHashMapTest:testPairsSortedByKey():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'IntArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectIntHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.IntArrayList)', 'List:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectIntHashMapTest:testPairsSortedByKeyNotComparable():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'IntArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectIntHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.IntArrayList)']
OpenObjectIntHashMapTest:testPairsSortedByValue():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'ArrayList:<init>()', 'IntArrayList:<init>()', 'OpenObjectIntHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectIntHashMapTest:testValues():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'IntArrayList:<init>(int)', 'OpenObjectIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenObjectIntHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testAdjustOrPutValue():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:adjustOrPutValue(java.lang.Object,long,long)', 'OpenObjectLongHashMap:get(java.lang.Object)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'OpenObjectLongHashMap:adjustOrPutValue(java.lang.Object,long,long)', 'OpenObjectLongHashMap:get(java.lang.Object)', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testClear():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'OpenObjectLongHashMap:clear()', 'OpenObjectLongHashMap:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testClone():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:clone()', 'OpenObjectLongHashMap:clear()', 'OpenObjectLongHashMap:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testConstructors():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'OpenObjectLongHashMapTest:assertEquals(double,double,double)', 'OpenObjectLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenObjectLongHashMap:<init>(int)', 'OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'OpenObjectLongHashMapTest:assertEquals(double,double,double)', 'OpenObjectLongHashMapTest:assertEquals(double,double,double)', 'OpenObjectLongHashMap:<init>(int,double,double)', 'OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'OpenObjectLongHashMapTest:assertEquals(double,double,double)', 'OpenObjectLongHashMapTest:assertEquals(double,double,double)']
OpenObjectLongHashMapTest:testContainValue():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:containsValue(long)', 'OpenObjectLongHashMapTest:assertTrue(boolean)', 'OpenObjectLongHashMap:containsValue(long)', 'OpenObjectLongHashMapTest:assertFalse(boolean)']
OpenObjectLongHashMapTest:testContainsKey():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:containsKey(java.lang.Object)', 'OpenObjectLongHashMapTest:assertTrue(boolean)', 'OpenObjectLongHashMap:containsKey(java.lang.Object)', 'OpenObjectLongHashMapTest:assertTrue(boolean)', 'OpenObjectLongHashMap:containsKey(java.lang.Object)', 'OpenObjectLongHashMapTest:assertFalse(boolean)']
OpenObjectLongHashMapTest:testCopy():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:copy()', 'OpenObjectLongHashMap:clear()', 'OpenObjectLongHashMap:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testEnsureCapacity():['OpenObjectLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenObjectLongHashMap:ensureCapacity(int)', 'OpenObjectLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testEquals():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:removeKey(java.lang.Object)', 'OpenObjectLongHashMap:copy()', 'OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap:equals(java.lang.Object)', 'OpenObjectLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenObjectLongHashMapTest:assertFalse(boolean)', 'OpenObjectLongHashMap:equals(java.lang.Object)', 'OpenObjectLongHashMapTest:assertFalse(boolean)', 'OpenObjectLongHashMap:removeKey(java.lang.Object)', 'OpenObjectLongHashMap:equals(java.lang.Object)', 'OpenObjectLongHashMapTest:assertFalse(boolean)', 'OpenObjectLongHashMap:equals(java.lang.Object)', 'OpenObjectLongHashMapTest:assertFalse(boolean)']
OpenObjectLongHashMapTest:testForEachKey():['ArrayList:<init>()', 'OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:removeKey(java.lang.Object)', 'OpenObjectLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest,java.util.List)', 'OpenObjectLongHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'List:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:removeKey(java.lang.Object)', 'OpenObjectLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest,java.util.List)', 'OpenObjectLongHashMap:forEachPair(org.apache.mahout.math.function.ObjectLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenObjectLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest,java.util.List)', 'OpenObjectLongHashMap:forEachPair(org.apache.mahout.math.function.ObjectLongProcedure)', 'List:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testGet():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:get(java.lang.Object)', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testKeys():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'ArrayList:<init>()', 'OpenObjectLongHashMap:keys(java.util.List)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap:keys()', 'Collections:sort(java.util.List)', 'OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectLongHashMapTest:testKeysSortedByValue():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:removeKey(java.lang.Object)', 'ArrayList:<init>()', 'OpenObjectLongHashMap:keysSortedByValue(java.util.List)', 'List:size()', 'List:toArray(java.lang.Object[])', 'OpenObjectLongHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
OpenObjectLongHashMapTest:testPairsMatching():['ArrayList:<init>()', 'LongArrayList:<init>()', 'OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:removeKey(java.lang.Object)', 'OpenObjectLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectLongHashMapTest)', 'OpenObjectLongHashMap:pairsMatching(org.apache.mahout.math.function.ObjectLongProcedure,java.util.List,org.apache.mahout.math.list.LongArrayList)', 'Collections:sort(java.util.List)', 'LongArrayList:sort()', 'List:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectLongHashMapTest:testPairsSortedByKey():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'LongArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectLongHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.LongArrayList)', 'List:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectLongHashMapTest:testPairsSortedByKeyNotComparable():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'LongArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectLongHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.LongArrayList)']
OpenObjectLongHashMapTest:testPairsSortedByValue():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'ArrayList:<init>()', 'LongArrayList:<init>()', 'OpenObjectLongHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectLongHashMapTest:testValues():['OpenObjectLongHashMap:<init>()', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:put(java.lang.Object,long)', 'OpenObjectLongHashMap:removeKey(java.lang.Object)', 'LongArrayList:<init>(int)', 'OpenObjectLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenObjectLongHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testAdjustOrPutValue():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:adjustOrPutValue(java.lang.Object,short,short)', 'OpenObjectShortHashMap:get(java.lang.Object)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'OpenObjectShortHashMap:adjustOrPutValue(java.lang.Object,short,short)', 'OpenObjectShortHashMap:get(java.lang.Object)', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testClear():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'OpenObjectShortHashMap:clear()', 'OpenObjectShortHashMap:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testClone():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:clone()', 'OpenObjectShortHashMap:clear()', 'OpenObjectShortHashMap:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testConstructors():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'OpenObjectShortHashMapTest:assertEquals(double,double,double)', 'OpenObjectShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenObjectShortHashMap:<init>(int)', 'OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'OpenObjectShortHashMapTest:assertEquals(double,double,double)', 'OpenObjectShortHashMapTest:assertEquals(double,double,double)', 'OpenObjectShortHashMap:<init>(int,double,double)', 'OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'OpenObjectShortHashMapTest:assertEquals(double,double,double)', 'OpenObjectShortHashMapTest:assertEquals(double,double,double)']
OpenObjectShortHashMapTest:testContainValue():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:containsValue(short)', 'OpenObjectShortHashMapTest:assertTrue(boolean)', 'OpenObjectShortHashMap:containsValue(short)', 'OpenObjectShortHashMapTest:assertFalse(boolean)']
OpenObjectShortHashMapTest:testContainsKey():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:containsKey(java.lang.Object)', 'OpenObjectShortHashMapTest:assertTrue(boolean)', 'OpenObjectShortHashMap:containsKey(java.lang.Object)', 'OpenObjectShortHashMapTest:assertTrue(boolean)', 'OpenObjectShortHashMap:containsKey(java.lang.Object)', 'OpenObjectShortHashMapTest:assertFalse(boolean)']
OpenObjectShortHashMapTest:testCopy():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:copy()', 'OpenObjectShortHashMap:clear()', 'OpenObjectShortHashMap:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testEnsureCapacity():['OpenObjectShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenObjectShortHashMap:ensureCapacity(int)', 'OpenObjectShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testEquals():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:removeKey(java.lang.Object)', 'OpenObjectShortHashMap:copy()', 'OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap:equals(java.lang.Object)', 'OpenObjectShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenObjectShortHashMapTest:assertFalse(boolean)', 'OpenObjectShortHashMap:equals(java.lang.Object)', 'OpenObjectShortHashMapTest:assertFalse(boolean)', 'OpenObjectShortHashMap:removeKey(java.lang.Object)', 'OpenObjectShortHashMap:equals(java.lang.Object)', 'OpenObjectShortHashMapTest:assertFalse(boolean)', 'OpenObjectShortHashMap:equals(java.lang.Object)', 'OpenObjectShortHashMapTest:assertFalse(boolean)']
OpenObjectShortHashMapTest:testForEachKey():['ArrayList:<init>()', 'OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:removeKey(java.lang.Object)', 'OpenObjectShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest,java.util.List)', 'OpenObjectShortHashMap:forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'List:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:removeKey(java.lang.Object)', 'OpenObjectShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest,java.util.List)', 'OpenObjectShortHashMap:forEachPair(org.apache.mahout.math.function.ObjectShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenObjectShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest,java.util.List)', 'OpenObjectShortHashMap:forEachPair(org.apache.mahout.math.function.ObjectShortProcedure)', 'List:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testGet():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:get(java.lang.Object)', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testKeys():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'ArrayList:<init>()', 'OpenObjectShortHashMap:keys(java.util.List)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap:keys()', 'Collections:sort(java.util.List)', 'OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectShortHashMapTest:testKeysSortedByValue():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:removeKey(java.lang.Object)', 'ArrayList:<init>()', 'OpenObjectShortHashMap:keysSortedByValue(java.util.List)', 'List:size()', 'List:toArray(java.lang.Object[])', 'OpenObjectShortHashMapTest:assertArrayEquals(java.lang.Object[],java.lang.Object[])']
OpenObjectShortHashMapTest:testPairsMatching():['ArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:removeKey(java.lang.Object)', 'OpenObjectShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenObjectShortHashMapTest)', 'OpenObjectShortHashMap:pairsMatching(org.apache.mahout.math.function.ObjectShortProcedure,java.util.List,org.apache.mahout.math.list.ShortArrayList)', 'Collections:sort(java.util.List)', 'ShortArrayList:sort()', 'List:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenObjectShortHashMapTest:testPairsSortedByKey():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'ShortArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectShortHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ShortArrayList)', 'List:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenObjectShortHashMapTest:testPairsSortedByKeyNotComparable():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'ShortArrayList:<init>()', 'ArrayList:<init>()', 'OpenObjectShortHashMap:pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ShortArrayList)']
OpenObjectShortHashMapTest:testPairsSortedByValue():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'ArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenObjectShortHashMap:pairsSortedByValue(java.util.List,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenObjectShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenObjectShortHashMapTest:testValues():['OpenObjectShortHashMap:<init>()', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:put(java.lang.Object,short)', 'OpenObjectShortHashMap:removeKey(java.lang.Object)', 'ShortArrayList:<init>(int)', 'OpenObjectShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenObjectShortHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testAdjustOrPutValue():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:adjustOrPutValue(short,byte,byte)', 'OpenShortByteHashMap:get(short)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMap:adjustOrPutValue(short,byte,byte)', 'OpenShortByteHashMap:get(short)', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testClear():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMap:clear()', 'OpenShortByteHashMap:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMap:get(short)', 'OpenShortByteHashMapTest:assertEquals(double,double,double)']
OpenShortByteHashMapTest:testClone():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:clone()', 'OpenShortByteHashMap:clear()', 'OpenShortByteHashMap:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testConstructors():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMapTest:assertEquals(double,double,double)', 'OpenShortByteHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortByteHashMap:<init>(int)', 'OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMapTest:assertEquals(double,double,double)', 'OpenShortByteHashMapTest:assertEquals(double,double,double)', 'OpenShortByteHashMap:<init>(int,double,double)', 'OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMapTest:assertEquals(double,double,double)', 'OpenShortByteHashMapTest:assertEquals(double,double,double)']
OpenShortByteHashMapTest:testContainValue():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:containsValue(byte)', 'OpenShortByteHashMapTest:assertTrue(boolean)', 'OpenShortByteHashMap:containsValue(byte)', 'OpenShortByteHashMapTest:assertFalse(boolean)']
OpenShortByteHashMapTest:testContainsKey():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:containsKey(short)', 'OpenShortByteHashMapTest:assertTrue(boolean)', 'OpenShortByteHashMap:containsKey(short)', 'OpenShortByteHashMapTest:assertFalse(boolean)']
OpenShortByteHashMapTest:testCopy():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:copy()', 'OpenShortByteHashMap:clear()', 'OpenShortByteHashMap:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testEnsureCapacity():['OpenShortByteHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortByteHashMap:ensureCapacity(int)', 'OpenShortByteHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testEquals():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:removeKey(short)', 'OpenShortByteHashMap:copy()', 'OpenShortByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortByteHashMap:equals(java.lang.Object)', 'OpenShortByteHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortByteHashMapTest:assertFalse(boolean)', 'OpenShortByteHashMap:equals(java.lang.Object)', 'OpenShortByteHashMapTest:assertFalse(boolean)', 'OpenShortByteHashMap:removeKey(short)', 'OpenShortByteHashMap:equals(java.lang.Object)', 'OpenShortByteHashMapTest:assertFalse(boolean)', 'OpenShortByteHashMap:equals(java.lang.Object)', 'OpenShortByteHashMapTest:assertFalse(boolean)']
OpenShortByteHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:removeKey(short)', 'OpenShortByteHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortByteHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortByteHashMapTest:assertArrayEquals(short[],short[])']
OpenShortByteHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:removeKey(short)', 'OpenShortByteHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest,java.util.List)', 'OpenShortByteHashMap:forEachPair(org.apache.mahout.math.function.ShortByteProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenShortByteHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest,java.util.List)', 'OpenShortByteHashMap:forEachPair(org.apache.mahout.math.function.ShortByteProcedure)', 'List:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testGet():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:get(short)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMap:get(short)', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testKeys():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'ShortArrayList:<init>()', 'OpenShortByteHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'OpenShortByteHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortByteHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortByteHashMapTest:testKeysSortedByValue():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortByteHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortByteHashMapTest:assertArrayEquals(short[],short[])']
OpenShortByteHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:removeKey(short)', 'OpenShortByteHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortByteHashMapTest)', 'OpenShortByteHashMap:pairsMatching(org.apache.mahout.math.function.ShortByteProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ShortArrayList:sort()', 'ByteArrayList:sort()', 'ShortArrayList:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testPairsSortedByKey():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'ShortArrayList:<init>()', 'ByteArrayList:<init>()', 'OpenShortByteHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ShortArrayList:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:clear()', 'ByteArrayList:clear()', 'OpenShortByteHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortByteHashMapTest:testValues():['OpenShortByteHashMap:<init>()', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:put(short,byte)', 'OpenShortByteHashMap:removeKey(short)', 'ByteArrayList:<init>(int)', 'OpenShortByteHashMap:values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList:size()', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:sort()', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)', 'ByteArrayList:get(int)', 'OpenShortByteHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testAdjustOrPutValue():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:adjustOrPutValue(short,char,char)', 'OpenShortCharHashMap:get(short)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMap:adjustOrPutValue(short,char,char)', 'OpenShortCharHashMap:get(short)', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testClear():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMap:clear()', 'OpenShortCharHashMap:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMap:get(short)', 'OpenShortCharHashMapTest:assertEquals(double,double,double)']
OpenShortCharHashMapTest:testClone():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:clone()', 'OpenShortCharHashMap:clear()', 'OpenShortCharHashMap:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testConstructors():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMapTest:assertEquals(double,double,double)', 'OpenShortCharHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortCharHashMap:<init>(int)', 'OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMapTest:assertEquals(double,double,double)', 'OpenShortCharHashMapTest:assertEquals(double,double,double)', 'OpenShortCharHashMap:<init>(int,double,double)', 'OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMapTest:assertEquals(double,double,double)', 'OpenShortCharHashMapTest:assertEquals(double,double,double)']
OpenShortCharHashMapTest:testContainValue():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:containsValue(char)', 'OpenShortCharHashMapTest:assertTrue(boolean)', 'OpenShortCharHashMap:containsValue(char)', 'OpenShortCharHashMapTest:assertFalse(boolean)']
OpenShortCharHashMapTest:testContainsKey():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:containsKey(short)', 'OpenShortCharHashMapTest:assertTrue(boolean)', 'OpenShortCharHashMap:containsKey(short)', 'OpenShortCharHashMapTest:assertFalse(boolean)']
OpenShortCharHashMapTest:testCopy():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:copy()', 'OpenShortCharHashMap:clear()', 'OpenShortCharHashMap:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testEnsureCapacity():['OpenShortCharHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortCharHashMap:ensureCapacity(int)', 'OpenShortCharHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testEquals():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:removeKey(short)', 'OpenShortCharHashMap:copy()', 'OpenShortCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortCharHashMap:equals(java.lang.Object)', 'OpenShortCharHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortCharHashMapTest:assertFalse(boolean)', 'OpenShortCharHashMap:equals(java.lang.Object)', 'OpenShortCharHashMapTest:assertFalse(boolean)', 'OpenShortCharHashMap:removeKey(short)', 'OpenShortCharHashMap:equals(java.lang.Object)', 'OpenShortCharHashMapTest:assertFalse(boolean)', 'OpenShortCharHashMap:equals(java.lang.Object)', 'OpenShortCharHashMapTest:assertFalse(boolean)']
OpenShortCharHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:removeKey(short)', 'OpenShortCharHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortCharHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortCharHashMapTest:assertArrayEquals(short[],short[])']
OpenShortCharHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:removeKey(short)', 'OpenShortCharHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest,java.util.List)', 'OpenShortCharHashMap:forEachPair(org.apache.mahout.math.function.ShortCharProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenShortCharHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest,java.util.List)', 'OpenShortCharHashMap:forEachPair(org.apache.mahout.math.function.ShortCharProcedure)', 'List:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testGet():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:get(short)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMap:get(short)', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testKeys():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'ShortArrayList:<init>()', 'OpenShortCharHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'OpenShortCharHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortCharHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortCharHashMapTest:testKeysSortedByValue():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortCharHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortCharHashMapTest:assertArrayEquals(short[],short[])']
OpenShortCharHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'CharArrayList:<init>()', 'OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:removeKey(short)', 'OpenShortCharHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortCharHashMapTest)', 'OpenShortCharHashMap:pairsMatching(org.apache.mahout.math.function.ShortCharProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', 'ShortArrayList:sort()', 'CharArrayList:sort()', 'ShortArrayList:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testPairsSortedByKey():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'ShortArrayList:<init>()', 'CharArrayList:<init>()', 'OpenShortCharHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', 'ShortArrayList:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:clear()', 'CharArrayList:clear()', 'OpenShortCharHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortCharHashMapTest:testValues():['OpenShortCharHashMap:<init>()', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:put(short,char)', 'OpenShortCharHashMap:removeKey(short)', 'CharArrayList:<init>(int)', 'OpenShortCharHashMap:values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList:size()', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:sort()', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)', 'CharArrayList:get(int)', 'OpenShortCharHashMapTest:assertEquals(long,long)']
OpenShortDoubleHashMapTest:testAdjustOrPutValue():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:adjustOrPutValue(short,double,double)', 'OpenShortDoubleHashMap:get(short)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'OpenShortDoubleHashMap:adjustOrPutValue(short,double,double)', 'OpenShortDoubleHashMap:get(short)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
OpenShortDoubleHashMapTest:testClear():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'OpenShortDoubleHashMap:clear()', 'OpenShortDoubleHashMap:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'OpenShortDoubleHashMap:get(short)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
OpenShortDoubleHashMapTest:testClone():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:clone()', 'OpenShortDoubleHashMap:clear()', 'OpenShortDoubleHashMap:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)']
OpenShortDoubleHashMapTest:testConstructors():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortDoubleHashMap:<init>(int)', 'OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'OpenShortDoubleHashMap:<init>(int,double,double)', 'OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
OpenShortDoubleHashMapTest:testContainValue():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:containsValue(double)', 'OpenShortDoubleHashMapTest:assertTrue(boolean)', 'OpenShortDoubleHashMap:containsValue(double)', 'OpenShortDoubleHashMapTest:assertFalse(boolean)']
OpenShortDoubleHashMapTest:testContainsKey():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:containsKey(short)', 'OpenShortDoubleHashMapTest:assertTrue(boolean)', 'OpenShortDoubleHashMap:containsKey(short)', 'OpenShortDoubleHashMapTest:assertFalse(boolean)']
OpenShortDoubleHashMapTest:testCopy():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:copy()', 'OpenShortDoubleHashMap:clear()', 'OpenShortDoubleHashMap:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)']
OpenShortDoubleHashMapTest:testEnsureCapacity():['OpenShortDoubleHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortDoubleHashMap:ensureCapacity(int)', 'OpenShortDoubleHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortDoubleHashMapTest:assertEquals(long,long)']
OpenShortDoubleHashMapTest:testEquals():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:removeKey(short)', 'OpenShortDoubleHashMap:copy()', 'OpenShortDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortDoubleHashMap:equals(java.lang.Object)', 'OpenShortDoubleHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortDoubleHashMapTest:assertFalse(boolean)', 'OpenShortDoubleHashMap:equals(java.lang.Object)', 'OpenShortDoubleHashMapTest:assertFalse(boolean)', 'OpenShortDoubleHashMap:removeKey(short)', 'OpenShortDoubleHashMap:equals(java.lang.Object)', 'OpenShortDoubleHashMapTest:assertFalse(boolean)', 'OpenShortDoubleHashMap:equals(java.lang.Object)', 'OpenShortDoubleHashMapTest:assertFalse(boolean)']
OpenShortDoubleHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:removeKey(short)', 'OpenShortDoubleHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortDoubleHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortDoubleHashMapTest:assertArrayEquals(short[],short[])']
OpenShortDoubleHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:removeKey(short)', 'OpenShortDoubleHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest,java.util.List)', 'OpenShortDoubleHashMap:forEachPair(org.apache.mahout.math.function.ShortDoubleProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'List:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'List:clear()', 'OpenShortDoubleHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest,java.util.List)', 'OpenShortDoubleHashMap:forEachPair(org.apache.mahout.math.function.ShortDoubleProcedure)', 'List:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)']
OpenShortDoubleHashMapTest:testGet():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:get(short)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'OpenShortDoubleHashMap:get(short)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
OpenShortDoubleHashMapTest:testKeys():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'ShortArrayList:<init>()', 'OpenShortDoubleHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'OpenShortDoubleHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortDoubleHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortDoubleHashMapTest:testKeysSortedByValue():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortDoubleHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortDoubleHashMapTest:assertArrayEquals(short[],short[])']
OpenShortDoubleHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:removeKey(short)', 'OpenShortDoubleHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortDoubleHashMapTest)', 'OpenShortDoubleHashMap:pairsMatching(org.apache.mahout.math.function.ShortDoubleProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ShortArrayList:sort()', 'DoubleArrayList:sort()', 'ShortArrayList:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
OpenShortDoubleHashMapTest:testPairsSortedByKey():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'ShortArrayList:<init>()', 'DoubleArrayList:<init>()', 'OpenShortDoubleHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ShortArrayList:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:clear()', 'DoubleArrayList:clear()', 'OpenShortDoubleHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'ShortArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
OpenShortDoubleHashMapTest:testValues():['OpenShortDoubleHashMap:<init>()', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:put(short,double)', 'OpenShortDoubleHashMap:removeKey(short)', 'DoubleArrayList:<init>(int)', 'OpenShortDoubleHashMap:values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList:size()', 'OpenShortDoubleHashMapTest:assertEquals(long,long)', 'DoubleArrayList:sort()', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)', 'DoubleArrayList:get(int)', 'OpenShortDoubleHashMapTest:assertEquals(double,double,double)']
OpenShortFloatHashMapTest:testAdjustOrPutValue():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:adjustOrPutValue(short,float,float)', 'OpenShortFloatHashMap:get(short)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'OpenShortFloatHashMap:adjustOrPutValue(short,float,float)', 'OpenShortFloatHashMap:get(short)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)']
OpenShortFloatHashMapTest:testClear():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'OpenShortFloatHashMap:clear()', 'OpenShortFloatHashMap:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'OpenShortFloatHashMap:get(short)', 'OpenShortFloatHashMapTest:assertEquals(double,double,double)']
OpenShortFloatHashMapTest:testClone():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:clone()', 'OpenShortFloatHashMap:clear()', 'OpenShortFloatHashMap:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)']
OpenShortFloatHashMapTest:testConstructors():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'OpenShortFloatHashMapTest:assertEquals(double,double,double)', 'OpenShortFloatHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortFloatHashMap:<init>(int)', 'OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'OpenShortFloatHashMapTest:assertEquals(double,double,double)', 'OpenShortFloatHashMapTest:assertEquals(double,double,double)', 'OpenShortFloatHashMap:<init>(int,double,double)', 'OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'OpenShortFloatHashMapTest:assertEquals(double,double,double)', 'OpenShortFloatHashMapTest:assertEquals(double,double,double)']
OpenShortFloatHashMapTest:testContainValue():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:containsValue(float)', 'OpenShortFloatHashMapTest:assertTrue(boolean)', 'OpenShortFloatHashMap:containsValue(float)', 'OpenShortFloatHashMapTest:assertFalse(boolean)']
OpenShortFloatHashMapTest:testContainsKey():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:containsKey(short)', 'OpenShortFloatHashMapTest:assertTrue(boolean)', 'OpenShortFloatHashMap:containsKey(short)', 'OpenShortFloatHashMapTest:assertFalse(boolean)']
OpenShortFloatHashMapTest:testCopy():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:copy()', 'OpenShortFloatHashMap:clear()', 'OpenShortFloatHashMap:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)']
OpenShortFloatHashMapTest:testEnsureCapacity():['OpenShortFloatHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortFloatHashMap:ensureCapacity(int)', 'OpenShortFloatHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortFloatHashMapTest:assertEquals(long,long)']
OpenShortFloatHashMapTest:testEquals():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:removeKey(short)', 'OpenShortFloatHashMap:copy()', 'OpenShortFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortFloatHashMap:equals(java.lang.Object)', 'OpenShortFloatHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortFloatHashMapTest:assertFalse(boolean)', 'OpenShortFloatHashMap:equals(java.lang.Object)', 'OpenShortFloatHashMapTest:assertFalse(boolean)', 'OpenShortFloatHashMap:removeKey(short)', 'OpenShortFloatHashMap:equals(java.lang.Object)', 'OpenShortFloatHashMapTest:assertFalse(boolean)', 'OpenShortFloatHashMap:equals(java.lang.Object)', 'OpenShortFloatHashMapTest:assertFalse(boolean)']
OpenShortFloatHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:removeKey(short)', 'OpenShortFloatHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortFloatHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortFloatHashMapTest:assertArrayEquals(short[],short[])']
OpenShortFloatHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:removeKey(short)', 'OpenShortFloatHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest,java.util.List)', 'OpenShortFloatHashMap:forEachPair(org.apache.mahout.math.function.ShortFloatProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'List:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'List:clear()', 'OpenShortFloatHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest,java.util.List)', 'OpenShortFloatHashMap:forEachPair(org.apache.mahout.math.function.ShortFloatProcedure)', 'List:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)']
OpenShortFloatHashMapTest:testGet():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:get(short)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'OpenShortFloatHashMap:get(short)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)']
OpenShortFloatHashMapTest:testKeys():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'ShortArrayList:<init>()', 'OpenShortFloatHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'OpenShortFloatHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortFloatHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortFloatHashMapTest:testKeysSortedByValue():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortFloatHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortFloatHashMapTest:assertArrayEquals(short[],short[])']
OpenShortFloatHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:removeKey(short)', 'OpenShortFloatHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortFloatHashMapTest)', 'OpenShortFloatHashMap:pairsMatching(org.apache.mahout.math.function.ShortFloatProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ShortArrayList:sort()', 'FloatArrayList:sort()', 'ShortArrayList:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)']
OpenShortFloatHashMapTest:testPairsSortedByKey():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'ShortArrayList:<init>()', 'FloatArrayList:<init>()', 'OpenShortFloatHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ShortArrayList:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:clear()', 'FloatArrayList:clear()', 'OpenShortFloatHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'ShortArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)']
OpenShortFloatHashMapTest:testValues():['OpenShortFloatHashMap:<init>()', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:put(short,float)', 'OpenShortFloatHashMap:removeKey(short)', 'FloatArrayList:<init>(int)', 'OpenShortFloatHashMap:values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList:size()', 'OpenShortFloatHashMapTest:assertEquals(long,long)', 'FloatArrayList:sort()', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)', 'FloatArrayList:get(int)', 'OpenShortFloatHashMapTest:assertEquals(float,float,float)']
OpenShortHashSetTest:testClear():['OpenShortHashSet:<init>()', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:size()', 'OpenShortHashSetTest:assertEquals(long,long)', 'OpenShortHashSet:clear()', 'OpenShortHashSet:size()', 'OpenShortHashSetTest:assertEquals(long,long)']
OpenShortHashSetTest:testClone():['OpenShortHashSet:<init>()', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:clone()', 'OpenShortHashSet:clear()', 'OpenShortHashSet:size()', 'OpenShortHashSetTest:assertEquals(long,long)']
OpenShortHashSetTest:testConstructors():['OpenShortHashSet:<init>()', 'OpenShortHashSet:getInternalFactors(int[],double[],double[])', 'OpenShortHashSetTest:assertEquals(long,long)', 'OpenShortHashSetTest:assertEquals(double,double,double)', 'OpenShortHashSetTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortHashSet:<init>(int)', 'OpenShortHashSet:getInternalFactors(int[],double[],double[])', 'OpenShortHashSetTest:assertEquals(long,long)', 'OpenShortHashSetTest:assertEquals(double,double,double)', 'OpenShortHashSetTest:assertEquals(double,double,double)', 'OpenShortHashSet:<init>(int,double,double)', 'OpenShortHashSet:getInternalFactors(int[],double[],double[])', 'OpenShortHashSetTest:assertEquals(long,long)', 'OpenShortHashSetTest:assertEquals(double,double,double)', 'OpenShortHashSetTest:assertEquals(double,double,double)']
OpenShortHashSetTest:testContains():['OpenShortHashSet:<init>()', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:contains(short)', 'OpenShortHashSetTest:assertTrue(boolean)', 'OpenShortHashSet:contains(short)', 'OpenShortHashSetTest:assertFalse(boolean)']
OpenShortHashSetTest:testCopy():['OpenShortHashSet:<init>()', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:copy()', 'OpenShortHashSet:clear()', 'OpenShortHashSet:size()', 'OpenShortHashSetTest:assertEquals(long,long)']
OpenShortHashSetTest:testEnsureCapacity():['OpenShortHashSet:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortHashSet:ensureCapacity(int)', 'OpenShortHashSet:getInternalFactors(int[],double[],double[])', 'OpenShortHashSetTest:assertEquals(long,long)']
OpenShortHashSetTest:testEquals():['OpenShortHashSet:<init>()', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:remove(short)', 'OpenShortHashSet:copy()', 'OpenShortHashSet:equals(java.lang.Object)', 'OpenShortHashSetTest:assertTrue(boolean)', 'OpenShortHashSet:hashCode()', 'OpenShortHashSet:hashCode()', 'OpenShortHashSetTest:assertTrue(boolean)', 'OpenShortHashSet:equals(java.lang.Object)', 'OpenShortHashSetTest:assertTrue(boolean)', 'OpenShortHashSet:hashCode()', 'OpenShortHashSet:hashCode()', 'OpenShortHashSetTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortHashSetTest:assertFalse(boolean)', 'OpenShortHashSet:equals(java.lang.Object)', 'OpenShortHashSetTest:assertFalse(boolean)', 'OpenShortHashSet:remove(short)', 'OpenShortHashSet:equals(java.lang.Object)', 'OpenShortHashSetTest:assertFalse(boolean)', 'OpenShortHashSet:equals(java.lang.Object)', 'OpenShortHashSetTest:assertFalse(boolean)', 'OpenShortHashSet:hashCode()', 'OpenShortHashSet:hashCode()', 'OpenShortHashSetTest:assertFalse(boolean)']
OpenShortHashSetTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortHashSet:<init>()', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:remove(short)', 'OpenShortHashSetTest$1:<init>(org.apache.mahout.math.set.OpenShortHashSetTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortHashSet:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortHashSetTest:assertArrayEquals(short[],short[])']
OpenShortHashSetTest:testKeys():['OpenShortHashSet:<init>()', 'OpenShortHashSet:add(short)', 'OpenShortHashSet:add(short)', 'ShortArrayList:<init>()', 'OpenShortHashSet:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortHashSetTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortHashSetTest:assertEquals(long,long)', 'OpenShortHashSet:keys()', 'ShortArrayList:sort()', 'OpenShortHashSetTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortIntHashMapTest:testAdjustOrPutValue():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:adjustOrPutValue(short,int,int)', 'OpenShortIntHashMap:get(short)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMap:adjustOrPutValue(short,int,int)', 'OpenShortIntHashMap:get(short)', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testClear():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMap:clear()', 'OpenShortIntHashMap:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMap:get(short)', 'OpenShortIntHashMapTest:assertEquals(double,double,double)']
OpenShortIntHashMapTest:testClone():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:clone()', 'OpenShortIntHashMap:clear()', 'OpenShortIntHashMap:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testConstructors():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMapTest:assertEquals(double,double,double)', 'OpenShortIntHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortIntHashMap:<init>(int)', 'OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMapTest:assertEquals(double,double,double)', 'OpenShortIntHashMapTest:assertEquals(double,double,double)', 'OpenShortIntHashMap:<init>(int,double,double)', 'OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMapTest:assertEquals(double,double,double)', 'OpenShortIntHashMapTest:assertEquals(double,double,double)']
OpenShortIntHashMapTest:testContainValue():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:containsValue(int)', 'OpenShortIntHashMapTest:assertTrue(boolean)', 'OpenShortIntHashMap:containsValue(int)', 'OpenShortIntHashMapTest:assertFalse(boolean)']
OpenShortIntHashMapTest:testContainsKey():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:containsKey(short)', 'OpenShortIntHashMapTest:assertTrue(boolean)', 'OpenShortIntHashMap:containsKey(short)', 'OpenShortIntHashMapTest:assertFalse(boolean)']
OpenShortIntHashMapTest:testCopy():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:copy()', 'OpenShortIntHashMap:clear()', 'OpenShortIntHashMap:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testEnsureCapacity():['OpenShortIntHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortIntHashMap:ensureCapacity(int)', 'OpenShortIntHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testEquals():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:removeKey(short)', 'OpenShortIntHashMap:copy()', 'OpenShortIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortIntHashMap:equals(java.lang.Object)', 'OpenShortIntHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortIntHashMapTest:assertFalse(boolean)', 'OpenShortIntHashMap:equals(java.lang.Object)', 'OpenShortIntHashMapTest:assertFalse(boolean)', 'OpenShortIntHashMap:removeKey(short)', 'OpenShortIntHashMap:equals(java.lang.Object)', 'OpenShortIntHashMapTest:assertFalse(boolean)', 'OpenShortIntHashMap:equals(java.lang.Object)', 'OpenShortIntHashMapTest:assertFalse(boolean)']
OpenShortIntHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:removeKey(short)', 'OpenShortIntHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortIntHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortIntHashMapTest:assertArrayEquals(short[],short[])']
OpenShortIntHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:removeKey(short)', 'OpenShortIntHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest,java.util.List)', 'OpenShortIntHashMap:forEachPair(org.apache.mahout.math.function.ShortIntProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenShortIntHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest,java.util.List)', 'OpenShortIntHashMap:forEachPair(org.apache.mahout.math.function.ShortIntProcedure)', 'List:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testGet():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:get(short)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMap:get(short)', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testKeys():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'ShortArrayList:<init>()', 'OpenShortIntHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'OpenShortIntHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortIntHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortIntHashMapTest:testKeysSortedByValue():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortIntHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortIntHashMapTest:assertArrayEquals(short[],short[])']
OpenShortIntHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'IntArrayList:<init>()', 'OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:removeKey(short)', 'OpenShortIntHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortIntHashMapTest)', 'OpenShortIntHashMap:pairsMatching(org.apache.mahout.math.function.ShortIntProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', 'ShortArrayList:sort()', 'IntArrayList:sort()', 'ShortArrayList:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testPairsSortedByKey():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'ShortArrayList:<init>()', 'IntArrayList:<init>()', 'OpenShortIntHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', 'ShortArrayList:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:clear()', 'IntArrayList:clear()', 'OpenShortIntHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortIntHashMapTest:testValues():['OpenShortIntHashMap:<init>()', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:put(short,int)', 'OpenShortIntHashMap:removeKey(short)', 'IntArrayList:<init>(int)', 'OpenShortIntHashMap:values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList:size()', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:sort()', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)', 'IntArrayList:get(int)', 'OpenShortIntHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testAdjustOrPutValue():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:adjustOrPutValue(short,long,long)', 'OpenShortLongHashMap:get(short)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMap:adjustOrPutValue(short,long,long)', 'OpenShortLongHashMap:get(short)', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testClear():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMap:clear()', 'OpenShortLongHashMap:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMap:get(short)', 'OpenShortLongHashMapTest:assertEquals(double,double,double)']
OpenShortLongHashMapTest:testClone():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:clone()', 'OpenShortLongHashMap:clear()', 'OpenShortLongHashMap:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testConstructors():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMapTest:assertEquals(double,double,double)', 'OpenShortLongHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortLongHashMap:<init>(int)', 'OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMapTest:assertEquals(double,double,double)', 'OpenShortLongHashMapTest:assertEquals(double,double,double)', 'OpenShortLongHashMap:<init>(int,double,double)', 'OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMapTest:assertEquals(double,double,double)', 'OpenShortLongHashMapTest:assertEquals(double,double,double)']
OpenShortLongHashMapTest:testContainValue():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:containsValue(long)', 'OpenShortLongHashMapTest:assertTrue(boolean)', 'OpenShortLongHashMap:containsValue(long)', 'OpenShortLongHashMapTest:assertFalse(boolean)']
OpenShortLongHashMapTest:testContainsKey():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:containsKey(short)', 'OpenShortLongHashMapTest:assertTrue(boolean)', 'OpenShortLongHashMap:containsKey(short)', 'OpenShortLongHashMapTest:assertFalse(boolean)']
OpenShortLongHashMapTest:testCopy():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:copy()', 'OpenShortLongHashMap:clear()', 'OpenShortLongHashMap:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testEnsureCapacity():['OpenShortLongHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortLongHashMap:ensureCapacity(int)', 'OpenShortLongHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testEquals():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:removeKey(short)', 'OpenShortLongHashMap:copy()', 'OpenShortLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortLongHashMap:equals(java.lang.Object)', 'OpenShortLongHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortLongHashMapTest:assertFalse(boolean)', 'OpenShortLongHashMap:equals(java.lang.Object)', 'OpenShortLongHashMapTest:assertFalse(boolean)', 'OpenShortLongHashMap:removeKey(short)', 'OpenShortLongHashMap:equals(java.lang.Object)', 'OpenShortLongHashMapTest:assertFalse(boolean)', 'OpenShortLongHashMap:equals(java.lang.Object)', 'OpenShortLongHashMapTest:assertFalse(boolean)']
OpenShortLongHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:removeKey(short)', 'OpenShortLongHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortLongHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortLongHashMapTest:assertArrayEquals(short[],short[])']
OpenShortLongHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:removeKey(short)', 'OpenShortLongHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest,java.util.List)', 'OpenShortLongHashMap:forEachPair(org.apache.mahout.math.function.ShortLongProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenShortLongHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest,java.util.List)', 'OpenShortLongHashMap:forEachPair(org.apache.mahout.math.function.ShortLongProcedure)', 'List:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testGet():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:get(short)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMap:get(short)', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testKeys():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'ShortArrayList:<init>()', 'OpenShortLongHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'OpenShortLongHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortLongHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortLongHashMapTest:testKeysSortedByValue():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortLongHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortLongHashMapTest:assertArrayEquals(short[],short[])']
OpenShortLongHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'LongArrayList:<init>()', 'OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:removeKey(short)', 'OpenShortLongHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortLongHashMapTest)', 'OpenShortLongHashMap:pairsMatching(org.apache.mahout.math.function.ShortLongProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', 'ShortArrayList:sort()', 'LongArrayList:sort()', 'ShortArrayList:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testPairsSortedByKey():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'ShortArrayList:<init>()', 'LongArrayList:<init>()', 'OpenShortLongHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', 'ShortArrayList:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:clear()', 'LongArrayList:clear()', 'OpenShortLongHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortLongHashMapTest:testValues():['OpenShortLongHashMap:<init>()', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:put(short,long)', 'OpenShortLongHashMap:removeKey(short)', 'LongArrayList:<init>(int)', 'OpenShortLongHashMap:values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList:size()', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:sort()', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)', 'LongArrayList:get(int)', 'OpenShortLongHashMapTest:assertEquals(long,long)']
OpenShortObjectHashMapTest:testClear():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'OpenShortObjectHashMap:clear()', 'OpenShortObjectHashMap:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'OpenShortObjectHashMap:containsKey(short)', 'OpenShortObjectHashMapTest:assertFalse(java.lang.String,boolean)', 'OpenShortObjectHashMap:get(short)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenShortObjectHashMapTest:testClone():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:clone()', 'OpenShortObjectHashMap:clear()', 'OpenShortObjectHashMap:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)']
OpenShortObjectHashMapTest:testConstructors():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'OpenShortObjectHashMapTest:assertEquals(double,double,double)', 'OpenShortObjectHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortObjectHashMap:<init>(int)', 'OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'OpenShortObjectHashMapTest:assertEquals(double,double,double)', 'OpenShortObjectHashMapTest:assertEquals(double,double,double)', 'OpenShortObjectHashMap:<init>(int,double,double)', 'OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'OpenShortObjectHashMapTest:assertEquals(double,double,double)', 'OpenShortObjectHashMapTest:assertEquals(double,double,double)']
OpenShortObjectHashMapTest:testContainValue():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:containsValue(java.lang.Object)', 'OpenShortObjectHashMapTest:assertTrue(boolean)', 'OpenShortObjectHashMap:containsValue(java.lang.Object)', 'OpenShortObjectHashMapTest:assertFalse(boolean)']
OpenShortObjectHashMapTest:testContainsKey():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:containsKey(short)', 'OpenShortObjectHashMapTest:assertTrue(boolean)', 'OpenShortObjectHashMap:containsKey(short)', 'OpenShortObjectHashMapTest:assertFalse(boolean)']
OpenShortObjectHashMapTest:testCopy():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:copy()', 'OpenShortObjectHashMap:clear()', 'OpenShortObjectHashMap:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)']
OpenShortObjectHashMapTest:testEnsureCapacity():['OpenShortObjectHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortObjectHashMap:ensureCapacity(int)', 'OpenShortObjectHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortObjectHashMapTest:assertEquals(long,long)']
OpenShortObjectHashMapTest:testEquals():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:removeKey(short)', 'OpenShortObjectHashMap:copy()', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortObjectHashMap:equals(java.lang.Object)', 'OpenShortObjectHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortObjectHashMapTest:assertFalse(boolean)', 'OpenShortObjectHashMap:equals(java.lang.Object)', 'OpenShortObjectHashMapTest:assertFalse(boolean)', 'OpenShortObjectHashMap:removeKey(short)', 'OpenShortObjectHashMap:equals(java.lang.Object)', 'OpenShortObjectHashMapTest:assertFalse(boolean)', 'OpenShortObjectHashMap:equals(java.lang.Object)', 'OpenShortObjectHashMapTest:assertFalse(boolean)']
OpenShortObjectHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:removeKey(short)', 'OpenShortObjectHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortObjectHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortObjectHashMapTest:assertArrayEquals(short[],short[])']
OpenShortObjectHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:removeKey(short)', 'OpenShortObjectHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest,java.util.List)', 'OpenShortObjectHashMap:forEachPair(org.apache.mahout.math.function.ShortObjectProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:clear()', 'OpenShortObjectHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest,java.util.List)', 'OpenShortObjectHashMap:forEachPair(org.apache.mahout.math.function.ShortObjectProcedure)', 'List:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)']
OpenShortObjectHashMapTest:testGet():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:get(short)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'OpenShortObjectHashMap:get(short)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenShortObjectHashMapTest:testKeys():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'ShortArrayList:<init>()', 'OpenShortObjectHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'OpenShortObjectHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortObjectHashMapTest:testKeysSortedByValue():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortObjectHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortObjectHashMapTest:assertArrayEquals(short[],short[])']
OpenShortObjectHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'ArrayList:<init>()', 'OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:removeKey(short)', 'OpenShortObjectHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortObjectHashMapTest)', 'OpenShortObjectHashMap:pairsMatching(org.apache.mahout.math.function.ShortObjectProcedure,org.apache.mahout.math.list.ShortArrayList,java.util.List)', 'ShortArrayList:sort()', 'Collections:sort(java.util.List)', 'ShortArrayList:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenShortObjectHashMapTest:testPairsSortedByKey():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'ShortArrayList:<init>()', 'ArrayList:<init>()', 'OpenShortObjectHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,java.util.List)', 'ShortArrayList:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertSame(java.lang.Object,java.lang.Object)']
OpenShortObjectHashMapTest:testPairsSortedByValue():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'ShortArrayList:<init>()', 'ArrayList:<init>()', 'OpenShortObjectHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,java.util.List)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'ShortArrayList:get(int)', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortObjectHashMapTest:testValues():['OpenShortObjectHashMap:<init>()', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:put(short,java.lang.Object)', 'OpenShortObjectHashMap:removeKey(short)', 'ArrayList:<init>(int)', 'OpenShortObjectHashMap:values(java.util.List)', 'List:size()', 'OpenShortObjectHashMapTest:assertEquals(long,long)', 'Collections:sort(java.util.List)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'List:get(int)', 'OpenShortObjectHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortShortHashMapTest:testAdjustOrPutValue():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:adjustOrPutValue(short,short,short)', 'OpenShortShortHashMap:get(short)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMap:adjustOrPutValue(short,short,short)', 'OpenShortShortHashMap:get(short)', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testClear():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMap:clear()', 'OpenShortShortHashMap:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMap:get(short)', 'OpenShortShortHashMapTest:assertEquals(double,double,double)']
OpenShortShortHashMapTest:testClone():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:clone()', 'OpenShortShortHashMap:clear()', 'OpenShortShortHashMap:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testConstructors():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMapTest:assertEquals(double,double,double)', 'OpenShortShortHashMapTest:assertEquals(double,double,double)', 'PrimeFinder:nextPrime(int)', 'OpenShortShortHashMap:<init>(int)', 'OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMapTest:assertEquals(double,double,double)', 'OpenShortShortHashMapTest:assertEquals(double,double,double)', 'OpenShortShortHashMap:<init>(int,double,double)', 'OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMapTest:assertEquals(double,double,double)', 'OpenShortShortHashMapTest:assertEquals(double,double,double)']
OpenShortShortHashMapTest:testContainValue():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:containsValue(short)', 'OpenShortShortHashMapTest:assertTrue(boolean)', 'OpenShortShortHashMap:containsValue(short)', 'OpenShortShortHashMapTest:assertFalse(boolean)']
OpenShortShortHashMapTest:testContainsKey():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:containsKey(short)', 'OpenShortShortHashMapTest:assertTrue(boolean)', 'OpenShortShortHashMap:containsKey(short)', 'OpenShortShortHashMapTest:assertFalse(boolean)']
OpenShortShortHashMapTest:testCopy():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:copy()', 'OpenShortShortHashMap:clear()', 'OpenShortShortHashMap:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testEnsureCapacity():['OpenShortShortHashMap:<init>()', 'PrimeFinder:nextPrime(int)', 'OpenShortShortHashMap:ensureCapacity(int)', 'OpenShortShortHashMap:getInternalFactors(int[],double[],double[])', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testEquals():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:removeKey(short)', 'OpenShortShortHashMap:copy()', 'OpenShortShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)', 'OpenShortShortHashMap:equals(java.lang.Object)', 'OpenShortShortHashMapTest:assertTrue(boolean)', 'String:equals(java.lang.Object)', 'OpenShortShortHashMapTest:assertFalse(boolean)', 'OpenShortShortHashMap:equals(java.lang.Object)', 'OpenShortShortHashMapTest:assertFalse(boolean)', 'OpenShortShortHashMap:removeKey(short)', 'OpenShortShortHashMap:equals(java.lang.Object)', 'OpenShortShortHashMapTest:assertFalse(boolean)', 'OpenShortShortHashMap:equals(java.lang.Object)', 'OpenShortShortHashMapTest:assertFalse(boolean)']
OpenShortShortHashMapTest:testForEachKey():['ShortArrayList:<init>()', 'OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:removeKey(short)', 'OpenShortShortHashMapTest$1:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortShortHashMap:forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'Arrays:sort(short[])', 'OpenShortShortHashMapTest:assertArrayEquals(short[],short[])']
OpenShortShortHashMapTest:testForEachPair():['ArrayList:<init>()', 'OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:removeKey(short)', 'OpenShortShortHashMapTest$2:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest,java.util.List)', 'OpenShortShortHashMap:forEachPair(org.apache.mahout.math.function.ShortShortProcedure)', 'Collections:sort(java.util.List)', 'List:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'List:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'List:clear()', 'OpenShortShortHashMapTest$3:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest,java.util.List)', 'OpenShortShortHashMap:forEachPair(org.apache.mahout.math.function.ShortShortProcedure)', 'List:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testGet():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:get(short)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMap:get(short)', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testKeys():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'ShortArrayList:<init>()', 'OpenShortShortHashMap:keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'OpenShortShortHashMap:keys()', 'ShortArrayList:sort()', 'OpenShortShortHashMapTest:assertEquals(java.lang.Object,java.lang.Object)']
OpenShortShortHashMapTest:testKeysSortedByValue():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:removeKey(short)', 'ShortArrayList:<init>()', 'OpenShortShortHashMap:keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'ShortArrayList:toArray(short[])', 'OpenShortShortHashMapTest:assertArrayEquals(short[],short[])']
OpenShortShortHashMapTest:testPairsMatching():['ShortArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:removeKey(short)', 'OpenShortShortHashMapTest$4:<init>(org.apache.mahout.math.map.OpenShortShortHashMapTest)', 'OpenShortShortHashMap:pairsMatching(org.apache.mahout.math.function.ShortShortProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:sort()', 'ShortArrayList:sort()', 'ShortArrayList:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testPairsSortedByKey():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'ShortArrayList:<init>()', 'ShortArrayList:<init>()', 'OpenShortShortHashMap:pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:clear()', 'ShortArrayList:clear()', 'OpenShortShortHashMap:pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)']
OpenShortShortHashMapTest:testValues():['OpenShortShortHashMap:<init>()', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:put(short,short)', 'OpenShortShortHashMap:removeKey(short)', 'ShortArrayList:<init>(int)', 'OpenShortShortHashMap:values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:size()', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:sort()', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'OpenShortShortHashMapTest:assertEquals(long,long)']
PermutedVectorViewTest:testIterators():['PermutedVectorViewTest:pivot()', 'PermutedVectorViewTest:unpivot()', 'PermutedVectorViewTest:randomVector()', 'PermutedVectorView:<init>(org.apache.mahout.math.Vector,int[])', 'Vector:zSum()', 'PermutedVectorView:zSum()', 'PermutedVectorViewTest:assertEquals(double,double,double)', 'Vector:getNumNondefaultElements()', 'PermutedVectorView:getNumNondefaultElements()', 'PermutedVectorViewTest:assertEquals(long,long)', 'Vector:set(int,double)', 'Vector:getNumNondefaultElements()', 'PermutedVectorView:getNumNondefaultElements()', 'PermutedVectorViewTest:assertEquals(long,long)', 'PermutedVectorView:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Vector$Element:index()', 'PermutedVectorViewTest:assertEquals(java.lang.String,long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Vector$Element:index()', 'PermutedVectorViewTest:assertEquals(java.lang.String,long,long)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Vector$Element:get()', 'Vector$Element:index()', 'PermutedVectorView:get(int)', 'PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Vector:get(int)', 'Vector$Element:get()', 'PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)']
PermutedVectorViewTest:testViewBasics():['PermutedVectorViewTest:randomVector()', 'PermutedVectorViewTest:pivot()', 'PermutedVectorView:<init>(org.apache.mahout.math.Vector,int[])', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Vector:get(int)', 'Vector:get(int)', 'PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:toString()', 'Vector:get(int)', 'Vector:get(int)', 'PermutedVectorViewTest:assertEquals(java.lang.String,double,double,double)']
PivotedMatrixTest:testSwap():['DenseMatrix:<init>(int,int)', 'Matrix:set(int,int,double)', 'PivotedMatrix:<init>(org.apache.mahout.math.Matrix)', 'PivotedMatrix:swap(int,int)', 'PivotedMatrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'PivotedMatrixTest:assertEquals(double,double,double)', 'PivotedMatrix:swap(int,int)', 'PivotedMatrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'PivotedMatrixTest:assertEquals(double,double,double)', 'PivotedMatrix:swap(int,int)', 'PivotedMatrix:viewColumn(int)', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'PivotedMatrixTest:assertEquals(double,double,double)', 'PivotedMatrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'PivotedMatrixTest:assertEquals(double,double,double)']
PoissonSamplerTest:testBasics():['PoissonSampler:<init>(double)', 'PoissonSamplerTest:checkDistribution(org.apache.mahout.math.random.Sampler,double)']
ProbabilityTest:testBetaCdf():['Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'String:format(java.util.Locale,java.lang.String,java.lang.Object[])', 'Probability:beta(double,double,double)', 'ProbabilityTest:assertEquals(java.lang.String,double,double,double)']
ProbabilityTest:testLogGamma():['Gamma:logGamma(double)', 'ProbabilityTest:assertEquals(double,double,double)']
ProbabilityTest:testNormalCdf():['Probability:normal(double)', 'ProbabilityTest:assertEquals(double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(double)', 'StringBuilder:toString()', 'Probability:normal(double)', 'ProbabilityTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(double)', 'StringBuilder:toString()', 'Probability:normal(double,double,double)', 'ProbabilityTest:assertEquals(java.lang.String,double,double,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(double)', 'StringBuilder:toString()', 'Probability:normal(double,double,double)', 'ProbabilityTest:assertEquals(java.lang.String,double,double,double)']
RandomBlasting:<init>():['RandomizedTest:<init>()']
RandomBlasting:testAgainstReferenceOpenHashSet():['OpenHashSet:<init>()', 'Sets:newHashSet()', 'Lists:newArrayList()', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomFrom(java.util.List)', 'RandomBlasting$Operation:ordinal()', 'Integer:valueOf(int)', 'Set:contains(java.lang.Object)', 'Boolean:valueOf(boolean)', 'Integer:valueOf(int)', 'Set:contains(java.lang.Object)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Set:remove(java.lang.Object)', 'Boolean:valueOf(boolean)', 'Integer:valueOf(int)', 'Set:remove(java.lang.Object)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Set:contains(java.lang.Object)', 'Boolean:valueOf(boolean)', 'Integer:valueOf(int)', 'Set:contains(java.lang.Object)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Set:clear()', 'Set:clear()', 'Set:isEmpty()', 'Boolean:valueOf(boolean)', 'Set:isEmpty()', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Set:size()', 'Set:size()', 'RandomBlasting:assertEquals(long,long)', 'RuntimeException:<init>()']
RandomBlasting:testAgainstReferenceOpenIntHashSet():['OpenIntHashSet:<init>()', 'Sets:newHashSet()', 'Lists:newArrayList()', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomFrom(java.util.List)', 'RandomBlasting$Operation:ordinal()', 'Integer:valueOf(int)', 'HashSet:add(java.lang.Object)', 'Boolean:valueOf(boolean)', 'AbstractIntSet:add(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'HashSet:remove(java.lang.Object)', 'Boolean:valueOf(boolean)', 'AbstractIntSet:remove(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'HashSet:contains(java.lang.Object)', 'Boolean:valueOf(boolean)', 'AbstractIntSet:contains(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'HashSet:clear()', 'AbstractIntSet:clear()', 'HashSet:isEmpty()', 'Boolean:valueOf(boolean)', 'AbstractIntSet:isEmpty()', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'HashSet:size()', 'AbstractIntSet:size()', 'RandomBlasting:assertEquals(long,long)', 'RuntimeException:<init>()']
RandomBlasting:testAgainstReferenceOpenIntIntHashMap():['OpenIntIntHashMap:<init>()', 'HashMap:<init>()', 'Lists:newArrayList()', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomInt()', 'RandomBlasting:randomFrom(java.util.List)', 'RandomBlasting$Operation:ordinal()', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'HashMap:put(java.lang.Object,java.lang.Object)', 'Boolean:valueOf(boolean)', 'OpenIntIntHashMap:put(int,int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:intValue()', 'OpenIntIntHashMap:get(int)', 'RandomBlasting:assertEquals(long,long)', 'Boolean:valueOf(boolean)', 'OpenIntIntHashMap:put(int,int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'HashMap:containsKey(java.lang.Object)', 'Boolean:valueOf(boolean)', 'OpenIntIntHashMap:containsKey(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'HashMap:remove(java.lang.Object)', 'Boolean:valueOf(boolean)', 'OpenIntIntHashMap:removeKey(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:intValue()', 'OpenIntIntHashMap:get(int)', 'RandomBlasting:assertEquals(long,long)', 'Boolean:valueOf(boolean)', 'OpenIntIntHashMap:removeKey(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'HashMap:containsKey(java.lang.Object)', 'Boolean:valueOf(boolean)', 'OpenIntIntHashMap:containsKey(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'HashMap:clear()', 'OpenIntIntHashMap:clear()', 'HashMap:isEmpty()', 'Boolean:valueOf(boolean)', 'OpenIntIntHashMap:isEmpty()', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'HashMap:size()', 'OpenIntIntHashMap:size()', 'RandomBlasting:assertEquals(long,long)', 'RuntimeException:<init>()']
RandomBlasting:testAgainstReferenceOpenIntObjectHashMap():['OpenIntObjectHashMap:<init>()', 'HashMap:<init>()', 'Lists:newArrayList()', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomInt()', 'RandomBlasting:randomFrom(java.util.List)', 'RandomBlasting$Operation:ordinal()', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Boolean:valueOf(boolean)', 'Integer:valueOf(int)', 'OpenIntObjectHashMap:put(int,java.lang.Object)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:remove(java.lang.Object)', 'Boolean:valueOf(boolean)', 'OpenIntObjectHashMap:removeKey(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:containsKey(java.lang.Object)', 'Boolean:valueOf(boolean)', 'OpenIntObjectHashMap:containsKey(int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Map:clear()', 'OpenIntObjectHashMap:clear()', 'Map:isEmpty()', 'Boolean:valueOf(boolean)', 'OpenIntObjectHashMap:isEmpty()', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Map:size()', 'OpenIntObjectHashMap:size()', 'RandomBlasting:assertEquals(long,long)', 'RuntimeException:<init>()']
RandomBlasting:testAgainstReferenceOpenObjectIntHashMap():['OpenObjectIntHashMap:<init>()', 'HashMap:<init>()', 'Lists:newArrayList()', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:addOp(java.util.List,org.apache.mahout.math.randomized.RandomBlasting$Operation,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomIntBetween(int,int)', 'RandomBlasting:randomInt()', 'RandomBlasting:randomFrom(java.util.List)', 'RandomBlasting$Operation:ordinal()', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Boolean:valueOf(boolean)', 'Integer:valueOf(int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:remove(java.lang.Object)', 'Boolean:valueOf(boolean)', 'Integer:valueOf(int)', 'OpenObjectIntHashMap:removeKey(java.lang.Object)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:containsKey(java.lang.Object)', 'Boolean:valueOf(boolean)', 'Integer:valueOf(int)', 'OpenObjectIntHashMap:containsKey(java.lang.Object)', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Map:clear()', 'OpenObjectIntHashMap:clear()', 'Map:isEmpty()', 'Boolean:valueOf(boolean)', 'OpenObjectIntHashMap:isEmpty()', 'Boolean:valueOf(boolean)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)', 'Map:size()', 'OpenObjectIntHashMap:size()', 'RandomBlasting:assertEquals(long,long)', 'RuntimeException:<init>()']
RandomBlasting:testClearTable():['OpenObjectIntHashMap:<init>()', 'OpenObjectIntHashMap:clear()', 'Integer:valueOf(int)', 'OpenObjectIntHashMap:put(java.lang.Object,int)', 'OpenObjectIntHashMap:clear()', 'Object:getClass()', 'Class:getDeclaredField(java.lang.String)', 'Field:setAccessible(boolean)', 'Field:get(java.lang.Object)', 'Arrays:asList(java.lang.Object[])', 'Sets:newHashSet(java.lang.Iterable)', 'Arrays:asList(java.lang.Object[])', 'Sets:newHashSet(java.lang.Iterable)', 'RandomBlasting:assertEquals(java.lang.Object,java.lang.Object)']
RandomBlasting:testMahout1225():['OpenIntHashSet:<init>()', 'AbstractIntSet:clear()', 'AbstractIntSet:add(int)', 'AbstractIntSet:add(int)', 'AbstractIntSet:clear()', 'AbstractIntSet:add(int)', 'AbstractIntSet:add(int)', 'AbstractIntSet:contains(int)']
RandomUtilsTest:testHashDouble():['Double:<init>(double)', 'Double:hashCode()', 'RandomUtils:hashDouble(double)', 'RandomUtilsTest:assertEquals(long,long)', 'Double:<init>(double)', 'Double:hashCode()', 'RandomUtils:hashDouble(double)', 'RandomUtilsTest:assertEquals(long,long)', 'Double:<init>(double)', 'Double:hashCode()', 'RandomUtils:hashDouble(double)', 'RandomUtilsTest:assertEquals(long,long)', 'Double:<init>(double)', 'Double:hashCode()', 'RandomUtils:hashDouble(double)', 'RandomUtilsTest:assertEquals(long,long)']
RandomUtilsTest:testHashFloat():['Float:<init>(float)', 'Float:hashCode()', 'RandomUtils:hashFloat(float)', 'RandomUtilsTest:assertEquals(long,long)', 'Float:<init>(float)', 'Float:hashCode()', 'RandomUtils:hashFloat(float)', 'RandomUtilsTest:assertEquals(long,long)', 'Float:<init>(float)', 'Float:hashCode()', 'RandomUtils:hashFloat(float)', 'RandomUtilsTest:assertEquals(long,long)', 'Float:<init>(float)', 'Float:hashCode()', 'RandomUtils:hashFloat(float)', 'RandomUtilsTest:assertEquals(long,long)']
RandomUtilsTest:testNextTwinPrime():['RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:assertEquals(long,long)', 'RandomUtils:nextTwinPrime(int)', 'RandomUtilsTest:fail()']
RandomUtilsTest:testSetSeed():['RandomUtils:getRandom()', 'RandomUtils:getRandom()', 'RandomUtils:getRandom(long)', 'RandomUtils:getRandom(long)', 'Random:nextLong()', 'Random:nextLong()', 'Random:nextLong()', 'Random:nextLong()', 'RandomUtilsTest:assertEquals(java.lang.String,long,long)', 'RandomUtilsTest:assertTrue(java.lang.String,boolean)', 'RandomUtilsTest:assertTrue(java.lang.String,boolean)']
SequentialBigSvdTest:testLeftVectors():['SequentialBigSvdTest:lowRankMatrix()', 'SequentialBigSvd:<init>(org.apache.mahout.math.Matrix,int)', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getU()', 'Matrix:viewPart(int,int,int,int)', 'Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'SequentialBigSvd:getU()', 'Matrix:viewPart(int,int,int,int)', 'Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'SequentialBigSvdTest:assertEquals(double,double,double)']
SequentialBigSvdTest:testRightVectors():['SequentialBigSvdTest:lowRankMatrix()', 'SequentialBigSvd:<init>(org.apache.mahout.math.Matrix,int)', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getV()', 'Matrix:viewPart(int,int,int,int)', 'Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'SequentialBigSvd:getV()', 'Matrix:viewPart(int,int,int,int)', 'Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'SequentialBigSvdTest:assertEquals(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
SequentialBigSvdTest:testSingularValues():['SequentialBigSvdTest:lowRankMatrix()', 'SequentialBigSvd:<init>(org.apache.mahout.math.Matrix,int)', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getSingularValues()', 'DenseVector:<init>(double[])', 'DenseVector:viewPart(int,int)', 'SequentialBigSvd:getSingularValues()', 'SequentialBigSvdTest:assertEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'SequentialBigSvd:getU()', 'SequentialBigSvd:getSingularValues()', 'DiagonalMatrix:<init>(org.apache.mahout.math.Vector)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'SequentialBigSvd:getV()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'SequentialBigSvdTest:assertEquals(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)']
ShortArrayListTest:testAdd():['ShortArrayList:add(short)', 'ShortArrayList:size()', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:add(short)', 'ShortArrayList:size()', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testBinarySearch():['ShortArrayList:binarySearchFromTo(short,int,int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:binarySearchFromTo(short,int,int)', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testClone():['ShortArrayList:copy()', 'ShortArrayListTest:assertNotSame(java.lang.Object,java.lang.Object)', 'ShortArrayListTest:assertEquals(java.lang.Object,java.lang.Object)']
ShortArrayListTest:testElements():['ShortArrayList:<init>(short[])', 'ShortArrayList:size()', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:elements()', 'ShortArrayListTest:assertSame(java.lang.Object,java.lang.Object)', 'ShortArrayList:elements(short[])', 'ShortArrayList:elements()', 'ShortArrayListTest:assertSame(java.lang.Object,java.lang.Object)']
ShortArrayListTest:testEquals():['ShortArrayList:<init>(short[])', 'ShortArrayList:<init>()', 'ShortArrayList:size()', 'ShortArrayList:get(int)', 'ShortArrayList:add(short)', 'ShortArrayListTest:assertEquals(java.lang.Object,java.lang.Object)', 'ShortArrayList:equals(java.lang.Object)', 'ShortArrayListTest:assertFalse(boolean)', 'ShortArrayList:add(short)', 'ShortArrayList:equals(java.lang.Object)', 'ShortArrayListTest:assertFalse(boolean)']
ShortArrayListTest:testForEach():['ShortArrayListTest$1:<init>(org.apache.mahout.math.list.ShortArrayListTest)', 'ShortArrayList:forEach(org.apache.mahout.math.function.ShortProcedure)']
ShortArrayListTest:testGetEmpty():['ShortArrayList:get(int)']
ShortArrayListTest:testGetQuick():['ShortArrayList:<init>(int)', 'ShortArrayList:getQuick(int)']
ShortArrayListTest:testIndexOfFromTo():['ShortArrayList:indexOfFromTo(short,int,int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:indexOfFromTo(short,int,int)', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testLastIndexOfFromTo():['ShortArrayList:<init>(int)', 'ShortArrayList:add(short)', 'ShortArrayList:add(short)', 'ShortArrayList:add(short)', 'ShortArrayList:add(short)', 'ShortArrayList:add(short)', 'ShortArrayList:lastIndexOf(short)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:lastIndexOfFromTo(short,int,int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:lastIndexOf(short)', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testPartFromTo():['ShortArrayList:partFromTo(int,int)', 'AbstractShortList:size()', 'ShortArrayListTest:assertEquals(long,long)', 'AbstractShortList:get(int)', 'ShortArrayListTest:assertEquals(long,long)', 'AbstractShortList:get(int)', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testPartFromToOOB():['ShortArrayList:partFromTo(int,int)']
ShortArrayListTest:testRemoveAll():['ShortArrayList:<init>(int)', 'ShortArrayList:add(short)', 'ShortArrayList:<init>(int)', 'ShortArrayList:add(short)', 'ShortArrayList:removeAll(org.apache.mahout.math.list.AbstractShortList)', 'ShortArrayList:size()', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:size()', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testReplaceFromToWith():['ShortArrayList:add(short)', 'ShortArrayList:<init>()', 'ShortArrayList:add(short)', 'ShortArrayList:add(short)', 'ShortArrayList:replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractShortList,int,int)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testRetainAllSmall():['ShortArrayList:<init>()', 'ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:<init>()', 'ShortArrayList:add(short)', 'ShortArrayList:add(short)', 'ShortArrayList:retainAll(org.apache.mahout.math.list.AbstractShortList)', 'ShortArrayListTest:assertTrue(boolean)', 'ShortArrayList:size()', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertTrue(boolean)', 'ShortArrayList:size()', 'ShortArrayListTest:assertEquals(long,long)']
ShortArrayListTest:testRetainAllSmaller():['ShortArrayList:<init>()', 'ShortArrayList:addAllOf(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList:<init>()', 'ShortArrayList:add(short)', 'ShortArrayList:add(short)', 'ShortArrayList:retainAll(org.apache.mahout.math.list.AbstractShortList)', 'ShortArrayListTest:assertTrue(boolean)', 'ShortArrayList:size()', 'ShortArrayList:get(int)', 'ShortArrayListTest:assertTrue(boolean)']
TestConjugateGradientSolver:testConditionedConjugateGradientSolver():['TestConjugateGradientSolver:getIllConditionedMatrix()', 'TestConjugateGradientSolver:getB()', 'JacobiConditioner:<init>(org.apache.mahout.math.Matrix)', 'ConjugateGradientSolver:<init>()', 'ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', 'Matrix:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Math:sqrt(double)', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getResidualNorm()', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getIterations()', 'TestConjugateGradientSolver:assertEquals(long,long)', 'ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', 'Matrix:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Math:sqrt(double)', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getResidualNorm()', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getIterations()', 'TestConjugateGradientSolver:assertEquals(long,long)']
TestConjugateGradientSolver:testConjugateGradientSolver():['TestConjugateGradientSolver:getA()', 'TestConjugateGradientSolver:getB()', 'ConjugateGradientSolver:<init>()', 'ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector)', 'Matrix:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Math:sqrt(double)', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getResidualNorm()', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getIterations()', 'TestConjugateGradientSolver:assertEquals(long,long)']
TestConjugateGradientSolver:testEarlyStop():['TestConjugateGradientSolver:getA()', 'TestConjugateGradientSolver:getB()', 'ConjugateGradientSolver:<init>()', 'ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', 'Matrix:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Math:sqrt(double)', 'TestConjugateGradientSolver:assertTrue(boolean)', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getIterations()', 'TestConjugateGradientSolver:assertEquals(long,long)', 'ConjugateGradientSolver:solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)', 'Matrix:times(org.apache.mahout.math.Vector)', 'Vector:getDistanceSquared(org.apache.mahout.math.Vector)', 'Math:sqrt(double)', 'TestConjugateGradientSolver:assertTrue(boolean)', 'TestConjugateGradientSolver:assertEquals(double,double,double)', 'ConjugateGradientSolver:getIterations()', 'TestConjugateGradientSolver:assertEquals(long,long)']
TestDenseMatrix:testGetValues():['DenseMatrix:<init>(int,int)', 'DenseMatrix:set(int,int,double)', 'DenseMatrix:getBackingStructure()', 'Assert:assertEquals(long,long)', 'Assert:assertEquals(long,long)', 'Assert:assertEquals(double,double,double)']
TestDenseVector:testSize():['TestDenseVector:getTestVector()', 'Vector:getNumNonZeroElements()', 'TestDenseVector:assertEquals(java.lang.String,long,long)']
TestDenseVector:testToString():['AbstractVectorTest:testToString()']
TestHebbianSolver:testHebbianSolver():['TestHebbianSolver:randomSequentialAccessSparseMatrix(int,int,int,int,double)', 'DenseMatrix:<init>(int,int)', 'TrainingState:<init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)', 'TestHebbianSolver:timeSolver(org.apache.mahout.math.Matrix,double,int,int,org.apache.mahout.math.decomposer.hebbian.TrainingState)', 'TrainingState:getCurrentEigens()', 'TestHebbianSolver:assertEigen(org.apache.mahout.math.Matrix,org.apache.mahout.math.VectorIterable,double,boolean)', 'TestHebbianSolver:assertOrthonormal(org.apache.mahout.math.Matrix,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(long)', 'StringBuilder:toString()', 'PrintStream:println(java.lang.String)']
TestLanczosSolver:testEigenvalueCheck():['TestLanczosSolver:randomHierarchicalSymmetricMatrix(int)', 'DenseVector:<init>(int)', 'Math:sqrt(double)', 'Vector:assign(double)', 'LanczosSolver:<init>()', 'LanczosState:<init>(org.apache.mahout.math.VectorIterable,int,org.apache.mahout.math.Vector)', 'LanczosSolver:solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)', 'EigenDecomposition:<init>(org.apache.mahout.math.Matrix)', 'EigenDecomposition:getRealEigenvalues()', 'LanczosState:getSingularValue(int)', 'Double:doubleValue()', 'Vector:get(int)', 'Integer:valueOf(int)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Logger:info(java.lang.String,java.lang.Object[])', 'Math:abs(double)', 'TestLanczosSolver:assertTrue(java.lang.String,boolean)', 'LanczosState:getRightSingularVector(int)', 'EigenDecomposition:getV()', 'Matrix:viewColumn(int)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'Vector:norm(double)', 'Math:abs(double)', 'Double:valueOf(double)', 'Logger:info(java.lang.String,java.lang.Object)', 'StringBuilder:<init>()', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(double)', 'StringBuilder:toString()', 'TestLanczosSolver:assertTrue(java.lang.String,boolean)']
TestLanczosSolver:testLanczosSolver():['TestLanczosSolver:randomHierarchicalMatrix(int,int,boolean)', 'DenseVector:<init>(int)', 'Math:sqrt(double)', 'Vector:assign(double)', 'LanczosState:<init>(org.apache.mahout.math.VectorIterable,int,org.apache.mahout.math.Vector)', 'LanczosSolver:<init>()', 'LanczosSolver:solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)', 'TestLanczosSolver:assertOrthonormal(org.apache.mahout.math.decomposer.lanczos.LanczosState)', 'LanczosState:getRightSingularVector(int)', 'TestLanczosSolver:assertEigen(int,org.apache.mahout.math.Vector,org.apache.mahout.math.VectorIterable,double,boolean)']
TestLanczosSolver:testLanczosSolverSymmetric():['TestLanczosSolver:randomHierarchicalSymmetricMatrix(int)', 'DenseVector:<init>(int)', 'Math:sqrt(double)', 'Vector:assign(double)', 'LanczosState:<init>(org.apache.mahout.math.VectorIterable,int,org.apache.mahout.math.Vector)', 'LanczosSolver:<init>()', 'LanczosSolver:solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)']
TestMatrixView:testAssignColumn():['DenseVector:<init>(double[])', 'Matrix:assignColumn(int,org.apache.mahout.math.Vector)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testAssignColumnCardinality():['DenseVector:<init>(double[])', 'Matrix:assignColumn(int,org.apache.mahout.math.Vector)']
TestMatrixView:testAssignDouble():['Matrix:assign(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testAssignDoubleArrayArray():['Matrix:assign(double[][])', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testAssignDoubleArrayArrayCardinality():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:assign(double[][])']
TestMatrixView:testAssignMatrix():['Matrix:like()', 'Matrix:assign(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testAssignMatrixBinaryFunction():['Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testAssignMatrixBinaryFunctionCardinality():['Matrix:transpose()', 'Matrix:assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)']
TestMatrixView:testAssignMatrixCardinality():['Matrix:transpose()', 'Matrix:assign(org.apache.mahout.math.Matrix)']
TestMatrixView:testAssignRow():['DenseVector:<init>(double[])', 'Matrix:assignRow(int,org.apache.mahout.math.Vector)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testAssignRowCardinality():['DenseVector:<init>(double[])', 'Matrix:assignRow(int,org.apache.mahout.math.Vector)']
TestMatrixView:testAssignUnaryFunction():['Matrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testCardinality():['Matrix:rowSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:columnSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)']
TestMatrixView:testCopy():['Matrix:clone()', 'TestMatrixView:assertTrue(java.lang.String,boolean)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testDivide():['Matrix:divide(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testGet():['Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:get(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testGetIndexOver():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:get(int,int)']
TestMatrixView:testGetIndexUnder():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:get(int,int)']
TestMatrixView:testGetQuick():['Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testLabelBindingSerialization():['Matrix:getRowLabelBindings()', 'TestMatrixView:assertNull(java.lang.String,java.lang.Object)', 'Matrix:getColumnLabelBindings()', 'TestMatrixView:assertNull(java.lang.String,java.lang.Object)', 'Maps:newHashMap()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setRowLabelBindings(java.util.Map)', 'Matrix:getRowLabelBindings()', 'TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', 'Maps:newHashMap()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setColumnLabelBindings(java.util.Map)', 'Matrix:getColumnLabelBindings()', 'TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)']
TestMatrixView:testLabelBindings():['Matrix:getRowLabelBindings()', 'TestMatrixView:assertNull(java.lang.String,java.lang.Object)', 'Matrix:getColumnLabelBindings()', 'TestMatrixView:assertNull(java.lang.String,java.lang.Object)', 'Maps:newHashMap()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setRowLabelBindings(java.util.Map)', 'Matrix:getRowLabelBindings()', 'TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', 'Maps:newHashMap()', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Integer:valueOf(int)', 'Map:put(java.lang.Object,java.lang.Object)', 'Matrix:setColumnLabelBindings(java.util.Map)', 'Matrix:getRowLabelBindings()', 'TestMatrixView:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', 'Matrix:get(int,int)', 'Matrix:get(java.lang.String,java.lang.String)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)', 'Matrix:set(java.lang.String,double[])', 'Matrix:get(int,int)', 'Matrix:get(java.lang.String,java.lang.String)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testLike():['Matrix:like()', 'TestMatrixView:assertTrue(java.lang.String,boolean)', 'Matrix:rowSize()', 'Matrix:rowSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:columnSize()', 'Matrix:columnSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)']
TestMatrixView:testLikeIntInt():['Matrix:like(int,int)', 'TestMatrixView:assertTrue(java.lang.String,boolean)', 'Matrix:rowSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:columnSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)']
TestMatrixView:testMinus():['Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testMinusCardinality():['Matrix:transpose()', 'Matrix:minus(org.apache.mahout.math.Matrix)']
TestMatrixView:testPlusDouble():['Matrix:plus(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testPlusMatrix():['Matrix:plus(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testPlusMatrixCardinality():['Matrix:transpose()', 'Matrix:plus(org.apache.mahout.math.Matrix)']
TestMatrixView:testSetOver():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:set(int,int,double)']
TestMatrixView:testSetQuick():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:setQuick(int,int,double)', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testSetUnder():['Matrix:rowSize()', 'Matrix:columnSize()', 'Matrix:set(int,int,double)']
TestMatrixView:testSettingLabelBindings():['Matrix:getRowLabelBindings()', 'TestMatrixView:assertNull(java.lang.String,java.lang.Object)', 'Matrix:getColumnLabelBindings()', 'TestMatrixView:assertNull(java.lang.String,java.lang.Object)', 'Matrix:set(java.lang.String,java.lang.String,int,int,double)', 'Matrix:getRowLabelBindings()', 'TestMatrixView:assertNotNull(java.lang.String,java.lang.Object)', 'Matrix:getRowLabelBindings()', 'TestMatrixView:assertNotNull(java.lang.String,java.lang.Object)', 'Matrix:getRowLabelBindings()', 'Map:get(java.lang.Object)', 'Integer:intValue()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:getColumnLabelBindings()', 'Map:get(java.lang.Object)', 'Integer:intValue()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:get(int,int)', 'Matrix:get(java.lang.String,java.lang.String)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)', 'Matrix:get(java.lang.String,java.lang.String)']
TestMatrixView:testSize():['Matrix:rowSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:columnSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)']
TestMatrixView:testTimesDouble():['Matrix:times(double)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testTimesMatrix():['Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:rowSize()', 'Matrix:rowSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)']
TestMatrixView:testTimesMatrixCardinality():['Matrix:like(int,int)', 'Matrix:times(org.apache.mahout.math.Matrix)']
TestMatrixView:testTranspose():['Matrix:transpose()', 'Matrix:columnSize()', 'Matrix:rowSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testViewColumn():['Matrix:viewColumn(int)', 'Vector:getNumNondefaultElements()', 'TestMatrixView:assertEquals(java.lang.String,long,long)', 'Vector:get(int)', 'TestMatrixView:assertEquals(double,double,double)']
TestMatrixView:testViewColumnIndexOver():['Matrix:viewColumn(int)']
TestMatrixView:testViewColumnIndexUnder():['Matrix:viewColumn(int)']
TestMatrixView:testViewPart():['Matrix:viewPart(int[],int[])', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Matrix:getQuick(int,int)', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestMatrixView:testViewPartCardinality():['Matrix:viewPart(int[],int[])']
TestMatrixView:testViewPartIndexOver():['Matrix:viewPart(int[],int[])']
TestMatrixView:testViewPartIndexUnder():['Matrix:viewPart(int[],int[])']
TestMatrixView:testViewRow():['Matrix:viewRow(int)', 'Vector:getNumNondefaultElements()', 'TestMatrixView:assertEquals(java.lang.String,long,long)']
TestMatrixView:testViewRowIndexOver():['Matrix:viewRow(int)']
TestMatrixView:testViewRowIndexUnder():['Matrix:viewRow(int)']
TestMatrixView:testZSum():['Matrix:zSum()', 'TestMatrixView:assertEquals(java.lang.String,double,double,double)']
TestOrderedIntDoubleMapping:testAddDefaultElements():['OrderedIntDoubleMapping:<init>(boolean)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)']
TestOrderedIntDoubleMapping:testClone():['OrderedIntDoubleMapping:<init>(int)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:clone()', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)']
TestOrderedIntDoubleMapping:testGetSet():['OrderedIntDoubleMapping:<init>(int)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)']
TestOrderedIntDoubleMapping:testMerge():['OrderedIntDoubleMapping:<init>(boolean)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:<init>()', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:set(int,double)', 'OrderedIntDoubleMapping:merge(org.apache.mahout.math.OrderedIntDoubleMapping)', 'OrderedIntDoubleMapping:getNumMappings()', 'TestOrderedIntDoubleMapping:assertEquals(long,long)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)', 'OrderedIntDoubleMapping:get(int)', 'TestOrderedIntDoubleMapping:assertEquals(double,double,double)']
TestRandomAccessSparseVector:testToString():['TestRandomAccessSparseVector:generateTestVector(int)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Splitter:on(char)', 'Object:toString()', 'Object:toString()', 'String:length()', 'String:substring(int,int)', 'Splitter:split(java.lang.CharSequence)', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'String:split(java.lang.String)', 'Double:parseDouble(java.lang.String)', 'Integer:parseInt(java.lang.String)', 'Vector:get(int)', 'TestRandomAccessSparseVector:assertEquals(double,double,double)', 'TestRandomAccessSparseVector:generateTestVector(int)', 'Vector:set(int,double)', 'Object:toString()', 'TestRandomAccessSparseVector:assertEquals(java.lang.Object,java.lang.Object)', 'TestRandomAccessSparseVector:generateTestVector(int)', 'Object:toString()', 'TestRandomAccessSparseVector:assertEquals(java.lang.Object,java.lang.Object)']
TestSequentialAccessSparseVector:testDotSuperBig():['SequentialAccessSparseVector:<init>(int,int)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'SequentialAccessSparseVector:<init>(int,int)', 'Vector:set(int,double)', 'Vector:dot(org.apache.mahout.math.Vector)', 'TestSequentialAccessSparseVector:assertEquals(java.lang.String,double,double,double)']
TestSequentialAccessSparseVector:testToString():['AbstractVectorTest:testToString()']
TestSingularValueDecomposition:testAEqualUSVt():['DenseMatrix:<init>(double[][])', 'TestSingularValueDecomposition:checkAEqualUSVt(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(double[][])', 'TestSingularValueDecomposition:checkAEqualUSVt(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(double[][])', 'DenseMatrix:transpose()', 'TestSingularValueDecomposition:checkAEqualUSVt(org.apache.mahout.math.Matrix)']
TestSingularValueDecomposition:testConditionNumber():['DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:cond()', 'TestSingularValueDecomposition:assertEquals(double,double,double)']
TestSingularValueDecomposition:testDimensions():['DenseMatrix:<init>(double[][])', 'Matrix:numRows()', 'Matrix:numCols()', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getU()', 'Matrix:numRows()', 'TestSingularValueDecomposition:assertEquals(long,long)', 'SingularValueDecomposition:getU()', 'Matrix:numCols()', 'TestSingularValueDecomposition:assertEquals(long,long)', 'SingularValueDecomposition:getS()', 'Matrix:numCols()', 'TestSingularValueDecomposition:assertEquals(long,long)', 'SingularValueDecomposition:getS()', 'Matrix:numCols()', 'TestSingularValueDecomposition:assertEquals(long,long)', 'SingularValueDecomposition:getV()', 'Matrix:numRows()', 'TestSingularValueDecomposition:assertEquals(long,long)', 'SingularValueDecomposition:getV()', 'Matrix:numCols()', 'TestSingularValueDecomposition:assertEquals(long,long)']
TestSingularValueDecomposition:testHadamard():['DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getSingularValues()', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'SingularValueDecomposition:getSingularValues()', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'SingularValueDecomposition:getSingularValues()', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'SingularValueDecomposition:getSingularValues()', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:getCovariance(double)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Algebra:getNorm(org.apache.mahout.math.Matrix)', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:getCovariance(double)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Algebra:getNorm(org.apache.mahout.math.Matrix)', 'TestSingularValueDecomposition:assertEquals(double,double,double)']
TestSingularValueDecomposition:testMatricesValues1():['DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(double[][])', 'DenseMatrix:<init>(double[][])', 'DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:getU()', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Algebra:getNorm(org.apache.mahout.math.Matrix)', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'SingularValueDecomposition:getS()', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Algebra:getNorm(org.apache.mahout.math.Matrix)', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'SingularValueDecomposition:getV()', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Algebra:getNorm(org.apache.mahout.math.Matrix)', 'TestSingularValueDecomposition:assertEquals(double,double,double)']
TestSingularValueDecomposition:testMoreColumns():['RandomUtils:getRandom()', 'TestSingularValueDecomposition:createTestMatrix(java.util.Random,int,int,double[])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getSingularValues()', 'TestSingularValueDecomposition:assertEquals(long,long)', 'TestSingularValueDecomposition:assertEquals(double,double,double)']
TestSingularValueDecomposition:testMoreRows():['RandomUtils:getRandom()', 'TestSingularValueDecomposition:createTestMatrix(java.util.Random,int,int,double[])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getSingularValues()', 'TestSingularValueDecomposition:assertEquals(long,long)', 'TestSingularValueDecomposition:assertEquals(double,double,double)']
TestSingularValueDecomposition:testSvdHang():['PrintStream:printf(java.lang.String,java.lang.Object[])', 'TestSingularValueDecomposition:readTsv(java.lang.String)', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getU()', 'SingularValueDecomposition:getS()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getV()', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'TestSingularValueDecomposition:assertEquals(double,double,double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])']
TestSingularValueDecomposition:testUOrthogonal():['DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getU()', 'TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getU()', 'TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(double[][])', 'DenseMatrix:transpose()', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getU()', 'TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)']
TestSingularValueDecomposition:testVOrthogonal():['DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getV()', 'TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(double[][])', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getV()', 'TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(double[][])', 'DenseMatrix:transpose()', 'SingularValueDecomposition:<init>(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition:getV()', 'TestSingularValueDecomposition:checkOrthogonal(org.apache.mahout.math.Matrix)']
TestSparseMatrix:testSparseCopy():['TestSparseMatrix:createSparseMatrixWithEmptyRow()', 'SparseMatrix:clone()', 'Object:getClass()', 'Object:getClass()', 'TestSparseMatrix:assertSame(java.lang.String,java.lang.Object,java.lang.Object)', 'SparseMatrix:iterator()', 'SparseMatrix:iterator()', 'Iterator:hasNext()', 'Iterator:hasNext()', 'Iterator:next()', 'Iterator:next()', 'MatrixSlice:index()', 'MatrixSlice:index()', 'TestSparseMatrix:assertEquals(java.lang.String,long,long)', 'TestSparseMatrix:assertEquals(java.lang.String,java.lang.Object,java.lang.Object)', 'Iterator:hasNext()', 'Boolean:valueOf(boolean)', 'Iterator:hasNext()', 'Boolean:valueOf(boolean)', 'TestSparseMatrix:assertSame(java.lang.String,java.lang.Object,java.lang.Object)']
TestSparseRowMatrix:testTimesCorrect():['RandomUtils:getRandom()', 'SparseRowMatrix:<init>(int,int,boolean)', 'Functions:random()', 'SparseRowMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'SparseRowMatrix:<init>(int,int,boolean)', 'Functions:random()', 'SparseRowMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'DenseMatrix:<init>(int,int)', 'DenseMatrix:assign(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(int,int)', 'DenseMatrix:assign(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'TestSparseRowMatrix:assertEquals(double,double,double)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'TestSparseRowMatrix:assertEquals(double,double,double)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'TestSparseRowMatrix:assertEquals(double,double,double)']
TestSparseRowMatrix:testTimesDenseEfficiency():['RandomUtils:getRandom()', 'Gamma:<init>(double,double,java.util.Random)', 'SparseRowMatrix:<init>(int,int,boolean)', 'Gamma:nextDouble()', 'Math:min(double,double)', 'Matrix:set(int,int,double)', 'DenseMatrix:<init>(int,int)', 'Random:nextDouble()', 'Matrix:set(int,int,double)', 'System:nanoTime()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'System:nanoTime()', 'Double:valueOf(double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'Matrix:viewRow(int)', 'Matrix:viewColumn(int)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Matrix:get(int,int)', 'Assert:assertEquals(double,double,double)']
TestSparseRowMatrix:testTimesOtherSparseEfficiency():['RandomUtils:getRandom()', 'Gamma:<init>(double,double,java.util.Random)', 'SparseRowMatrix:<init>(int,int,boolean)', 'Gamma:nextDouble()', 'Math:min(double,double)', 'Matrix:set(int,int,double)', 'DenseVector:<init>(int)', 'Functions:random()', 'DenseVector:assign(org.apache.mahout.math.function.DoubleFunction)', 'DiagonalMatrix:<init>(org.apache.mahout.math.Vector)', 'System:nanoTime()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'System:nanoTime()', 'Double:valueOf(double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'Matrix:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'MatrixSlice:index()', 'Vector$Element:index()', 'Matrix:get(int,int)', 'Vector$Element:index()', 'Vector:get(int)', 'Vector$Element:get()', 'TestSparseRowMatrix:assertEquals(double,double,double)']
TestSparseRowMatrix:testTimesSparseEfficiency():['RandomUtils:getRandom()', 'Gamma:<init>(double,double,java.util.Random)', 'SparseRowMatrix:<init>(int,int,boolean)', 'Gamma:nextDouble()', 'Math:min(double,double)', 'Matrix:set(int,int,double)', 'SparseRowMatrix:<init>(int,int,boolean)', 'Gamma:nextDouble()', 'Math:min(double,double)', 'Matrix:set(int,int,double)', 'System:nanoTime()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'System:nanoTime()', 'Double:valueOf(double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'Random:nextDouble()', 'Math:log(double)', 'Random:nextDouble()', 'Math:log(double)', 'Matrix:viewRow(int)', 'Matrix:viewColumn(int)', 'Vector:dot(org.apache.mahout.math.Vector)', 'Matrix:get(int,int)', 'Assert:assertEquals(double,double,double)']
TestVectorView:testAssignBinaryFunction():['Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testAssignBinaryFunction2():['Vector:assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testAssignBinaryFunction3():['TimesFunction:<init>()', 'Vector:assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testAssignDouble():['Vector:assign(double)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testAssignDoubleArray():['Vector:size()', 'Vector:assign(double[])', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testAssignDoubleArrayCardinality():['Vector:size()', 'Vector:assign(double[])']
TestVectorView:testAssignUnaryFunction():['Vector:assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testAssignVector():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:assign(org.apache.mahout.math.Vector)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testAssignVectorCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:assign(org.apache.mahout.math.Vector)']
TestVectorView:testCardinality():['Vector:size()', 'TestVectorView:assertEquals(java.lang.String,long,long)']
TestVectorView:testCopy():['Vector:clone()', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testCrossProduct():['Vector:cross(org.apache.mahout.math.Vector)', 'Vector:size()', 'Matrix:rowSize()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'Matrix:columnSize()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Matrix:rowSize()', 'Matrix:columnSize()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:getQuick(int)', 'Vector:getQuick(int)', 'Matrix:getQuick(int,int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testDivideDouble():['Vector:divide(double)', 'Vector:size()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testDot():['Vector:dot(org.apache.mahout.math.Vector)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testDotCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:dot(org.apache.mahout.math.Vector)']
TestVectorView:testGet():['Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testGetOver():['Vector:size()', 'Vector:get(int)']
TestVectorView:testGetUnder():['Vector:get(int)']
TestVectorView:testIterator():['DenseVector:<init>(double[])', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorView:iterator()', 'TestVectorView:checkIterator(java.util.Iterator,double[])', 'VectorView:iterateNonZero()', 'TestVectorView:checkIterator(java.util.Iterator,double[])', 'DenseVector:<init>(double[])', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorView:iterator()', 'TestVectorView:checkIterator(java.util.Iterator,double[])', 'VectorView:iterateNonZero()', 'TestVectorView:checkIterator(java.util.Iterator,double[])']
TestVectorView:testLike():['Vector:like()', 'TestVectorView:assertTrue(java.lang.String,boolean)']
TestVectorView:testMinus():['Vector:minus(org.apache.mahout.math.Vector)', 'Vector:size()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testNormalize():['Vector:normalize()', 'Math:sqrt(double)', 'Vector:size()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testPlusDouble():['Vector:plus(double)', 'Vector:size()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testPlusVector():['Vector:plus(org.apache.mahout.math.Vector)', 'Vector:size()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testPlusVectorCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:plus(org.apache.mahout.math.Vector)']
TestVectorView:testSet():['Vector:set(int,double)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testSize():['Vector:getNumNondefaultElements()', 'TestVectorView:assertEquals(java.lang.String,long,long)']
TestVectorView:testTimesDouble():['Vector:times(double)', 'Vector:size()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testTimesVector():['Vector:times(org.apache.mahout.math.Vector)', 'Vector:size()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testTimesVectorCardinality():['Vector:size()', 'DenseVector:<init>(int)', 'Vector:times(org.apache.mahout.math.Vector)']
TestVectorView:testViewPart():['Vector:viewPart(int,int)', 'Vector:getNumNondefaultElements()', 'TestVectorView:assertEquals(java.lang.String,long,long)', 'Vector:size()', 'StringBuilder:<init>()', 'StringBuilder:append(java.lang.String)', 'StringBuilder:append(int)', 'StringBuilder:append(char)', 'StringBuilder:toString()', 'Vector:get(int)', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
TestVectorView:testViewPartCardinality():['Vector:viewPart(int,int)']
TestVectorView:testViewPartOver():['Vector:viewPart(int,int)']
TestVectorView:testViewPartUnder():['Vector:viewPart(int,int)']
TestVectorView:testZSum():['Vector:zSum()', 'TestVectorView:assertEquals(java.lang.String,double,double,double)']
UpperTriangularTest:testBasics():['UpperTriangular:<init>(double[],boolean)', 'Matrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'UpperTriangularTest:assertEquals(double,double,double)', 'Matrix:viewPart(int,int,int,int)', 'Matrix:viewDiagonal()', 'DenseVector:<init>(double[])', 'Vector:minus(org.apache.mahout.math.Vector)', 'Vector:norm(double)', 'UpperTriangularTest:assertEquals(double,double,double)', 'Matrix:get(int,int)', 'UpperTriangularTest:assertEquals(double,double,double)', 'UpperTriangularTest:print(org.apache.mahout.math.Matrix)', 'DenseMatrix:<init>(int,int)', 'DenseMatrix:assign(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'UpperTriangularTest:assertEquals(double,double,double)', 'UpperTriangularTest:print(org.apache.mahout.math.Matrix)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:transpose()', 'Matrix:times(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'UpperTriangularTest:assertEquals(double,double,double)', 'Matrix:plus(org.apache.mahout.math.Matrix)', 'Matrix:plus(org.apache.mahout.math.Matrix)', 'Matrix:minus(org.apache.mahout.math.Matrix)', 'Matrix:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'UpperTriangularTest:assertEquals(double,double,double)']
VectorBinaryAggregateTest:testSelf():['Vector:like()', 'DenseVector:<init>(int)', 'Lists:newArrayList()', 'Vector:size()', 'Random:nextDouble()', 'Double:valueOf(double)', 'List:add(java.lang.Object)', 'Vector:size()', 'List:get(int)', 'Double:doubleValue()', 'Vector:setQuick(int,double)', 'List:get(int)', 'Double:doubleValue()', 'Vector:setQuick(int,double)', 'Vector:like()', 'Vector:assign(org.apache.mahout.math.Vector)', 'DenseVector:<init>(org.apache.mahout.math.Vector)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'DoubleDoubleFunction:apply(double,double)', 'Vector:size()', 'List:get(int)', 'Double:doubleValue()', 'List:get(int)', 'Double:doubleValue()', 'DoubleDoubleFunction:apply(double,double)', 'DoubleDoubleFunction:apply(double,double)', 'VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Assert:assertEquals(double,double,double)', 'Assert:assertEquals(double,double,double)']
VectorBinaryAggregateTest:testSeparate():['Lists:newArrayList()', 'Lists:newArrayList()', 'Random:nextDouble()', 'Double:valueOf(double)', 'List:add(java.lang.Object)', 'Random:nextDouble()', 'Double:valueOf(double)', 'List:add(java.lang.Object)', 'Vector:like()', 'DenseVector:<init>(int)', 'Vector:size()', 'List:get(int)', 'Double:doubleValue()', 'Vector:setQuick(int,double)', 'List:get(int)', 'Double:doubleValue()', 'Vector:setQuick(int,double)', 'Vector:like()', 'DenseVector:<init>(int)', 'Vector:size()', 'List:get(int)', 'Double:doubleValue()', 'Vector:setQuick(int,double)', 'List:get(int)', 'Double:doubleValue()', 'Vector:setQuick(int,double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'List:get(int)', 'Double:doubleValue()', 'List:get(int)', 'Double:doubleValue()', 'DoubleDoubleFunction:apply(double,double)', 'Vector:size()', 'List:get(int)', 'Double:doubleValue()', 'List:get(int)', 'Double:doubleValue()', 'DoubleDoubleFunction:apply(double,double)', 'DoubleDoubleFunction:apply(double,double)', 'VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'VectorBinaryAggregate:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Assert:assertEquals(double,double,double)', 'Assert:assertEquals(double,double,double)']
VectorBinaryAssignTest:testAll():['SequentialAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:size()', 'SequentialAccessSparseVector:setQuick(int,double)', 'SequentialAccessSparseVector:<init>(org.apache.mahout.math.SequentialAccessSparseVector)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'VectorBinaryAssign:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'SequentialAccessSparseVector:size()', 'SequentialAccessSparseVector:getQuick(int)', 'DoubleDoubleFunction:apply(double,double)', 'Assert:assertEquals(double,double,double)']
VectorTest:testAddTo():['DenseVector:<init>(int)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'DenseVector:<init>(double[])', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Object:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)']
VectorTest:testAggregation():['DenseVector:<init>(int)', 'DenseVector:<init>(int)', 'VectorTest:setUpFirstVector(org.apache.mahout.math.Vector)', 'VectorTest:setUpSecondVector(org.apache.mahout.math.Vector)', 'VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:<init>(int)', 'VectorTest:setUpFirstVector(org.apache.mahout.math.Vector)', 'VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'VectorTest:setUpSecondVector(org.apache.mahout.math.Vector)', 'VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'SequentialAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:<init>(int)', 'VectorTest:setUpFirstVector(org.apache.mahout.math.Vector)', 'VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'VectorTest:setUpSecondVector(org.apache.mahout.math.Vector)', 'VectorTest:doTestAggregation(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
VectorTest:testDenseVector():['DenseVector:<init>(int)', 'DenseVector:<init>(int)', 'VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
VectorTest:testEmptyAggregate1():['DenseVector:<init>(double[])', 'DenseVector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'VectorTest:assertEquals(double,double,double)', 'DenseVector:<init>(double[])', 'DenseVector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'VectorTest:assertEquals(double,double,double)', 'DenseVector:<init>(double[])', 'DenseVector:aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'VectorTest:assertEquals(double,double,double)']
VectorTest:testEmptyAggregate2():['DenseVector:<init>(double[])', 'DenseVector:<init>(double[])', 'DenseVector:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'VectorTest:assertEquals(double,double,double)', 'DenseVector:<init>(double[])', 'DenseVector:<init>(double[])', 'DenseVector:aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'VectorTest:assertEquals(double,double,double)']
VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector):['Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'VectorTest:assertEquals(long,long)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'VectorTest:assertFalse(boolean)', 'Iterator:next()', 'VectorTest:fail()', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'VectorTest:assertFalse(boolean)', 'Iterator:next()', 'VectorTest:fail()']
VectorTest:testEmptyNonZeroIterator(org.apache.mahout.math.Vector):['Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'VectorTest:assertEquals(long,long)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'VectorTest:assertFalse(boolean)', 'Iterator:next()', 'VectorTest:fail()']
VectorTest:testEnumeration():['DenseVector:<init>(double[])', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)', 'DenseVector:<init>(double[])', 'VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(int)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'VectorTest:doTestEnumeration(double[],org.apache.mahout.math.Vector)']
VectorTest:testEquivalent():['RandomAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:<init>(int)', 'DenseVector:<init>(int)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:setQuick(int,double)', 'RandomAccessSparseVector:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'RandomAccessSparseVector:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)', 'DenseVector:<init>(int)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)']
VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector):['Vector:set(int,double)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Integer:valueOf(int)', 'Sets:newHashSet(java.lang.Object[])', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Double:valueOf(double)', 'Sets:newHashSet(java.lang.Object[])', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Integer:valueOf(int)', 'Set:contains(java.lang.Object)', 'VectorTest:assertTrue(boolean)', 'Vector$Element:get()', 'Double:valueOf(double)', 'Set:contains(java.lang.Object)', 'VectorTest:assertTrue(boolean)', 'VectorTest:assertEquals(long,long)', 'Vector:getNumNonZeroElements()', 'VectorTest:assertEquals(long,long)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Vector$Element:set(double)', 'VectorTest:assertEquals(long,long)', 'Vector:getNumNonZeroElements()', 'VectorTest:assertEquals(long,long)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Vector:set(int,double)', 'VectorTest:assertEquals(long,long)', 'Vector:getNumNonZeroElements()', 'VectorTest:assertEquals(long,long)']
VectorTest:testGetDistanceSquared():['DenseVector:<init>(int)', 'DenseVector:<init>(int)', 'VectorTest:setUpV(org.apache.mahout.math.Vector)', 'VectorTest:setUpW(org.apache.mahout.math.Vector)', 'VectorTest:doTestGetDistanceSquared(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:<init>(int)', 'VectorTest:setUpV(org.apache.mahout.math.Vector)', 'VectorTest:setUpW(org.apache.mahout.math.Vector)', 'VectorTest:doTestGetDistanceSquared(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'SequentialAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:<init>(int)', 'VectorTest:setUpV(org.apache.mahout.math.Vector)', 'VectorTest:setUpW(org.apache.mahout.math.Vector)', 'VectorTest:doTestGetDistanceSquared(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
VectorTest:testGetLengthSquared():['DenseVector:<init>(int)', 'VectorTest:setUpV(org.apache.mahout.math.Vector)', 'VectorTest:doTestGetLengthSquared(org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(int)', 'VectorTest:setUpV(org.apache.mahout.math.Vector)', 'VectorTest:doTestGetLengthSquared(org.apache.mahout.math.Vector)', 'SequentialAccessSparseVector:<init>(int)', 'VectorTest:setUpV(org.apache.mahout.math.Vector)', 'VectorTest:doTestGetLengthSquared(org.apache.mahout.math.Vector)']
VectorTest:testHashCode():['SequentialAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Object:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertFalse(boolean)', 'RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Object:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertFalse(boolean)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Object:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertFalse(boolean)', 'RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Object:equals(java.lang.Object)', 'VectorTest:assertFalse(boolean)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertFalse(boolean)']
VectorTest:testHashCodeEquivalence():['RandomAccessSparseVector:<init>(int)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertEquals(long,long)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Object:hashCode()', 'Object:hashCode()', 'VectorTest:assertEquals(long,long)', 'DenseVector:<init>(int)', 'SequentialAccessSparseVector:<init>(int)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'DenseVector:hashCode()', 'Object:hashCode()', 'VectorTest:assertEquals(long,long)', 'RandomAccessSparseVector:<init>(int)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'DenseVector:hashCode()', 'Object:hashCode()', 'VectorTest:assertEquals(long,long)']
VectorTest:testIterator():['Sets:newHashSet()', 'Integer:valueOf(int)', 'Collection:add(java.lang.Object)', 'DenseVector:<init>(int)', 'Collection:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Integer:intValue()', 'Vector:set(int,double)', 'VectorTest:doTestIterators(org.apache.mahout.math.Vector,java.util.Collection)', 'RandomAccessSparseVector:<init>(int)', 'Collection:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Integer:intValue()', 'Vector:set(int,double)', 'VectorTest:doTestIterators(org.apache.mahout.math.Vector,java.util.Collection)', 'SequentialAccessSparseVector:<init>(int)', 'Collection:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Integer:intValue()', 'Vector:set(int,double)', 'VectorTest:doTestIterators(org.apache.mahout.math.Vector,java.util.Collection)']
VectorTest:testIterator(org.apache.mahout.math.Vector):['Vector:like()', 'VectorTest:testSkips(org.apache.mahout.math.Vector)', 'Vector:like()', 'VectorTest:testSkipsLast(org.apache.mahout.math.Vector)', 'Vector:like()', 'VectorTest:testEmptyNonZeroIterator(org.apache.mahout.math.Vector)', 'Vector:like()', 'VectorTest:testSingleNonZeroIterator(org.apache.mahout.math.Vector)']
VectorTest:testIteratorDense():['DenseVector:<init>(int)', 'VectorTest:testIterator(org.apache.mahout.math.Vector)', 'DenseVector:<init>(int)', 'VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector)', 'DenseVector:<init>(int)', 'VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector)']
VectorTest:testIteratorRasv():['RandomAccessSparseVector:<init>(int)', 'VectorTest:testIterator(org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(int)', 'VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector)', 'RandomAccessSparseVector:<init>(int)', 'VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector)']
VectorTest:testIteratorSasv():['SequentialAccessSparseVector:<init>(int)', 'VectorTest:testIterator(org.apache.mahout.math.Vector)', 'SequentialAccessSparseVector:<init>(int)', 'VectorTest:testEmptyAllIterator(org.apache.mahout.math.Vector)', 'SequentialAccessSparseVector:<init>(int)', 'VectorTest:testExample1NonZeroIterator(org.apache.mahout.math.Vector)']
VectorTest:testLogNormalize():['RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:logNormalize()', 'VectorTest:assertNotNull(java.lang.String,java.lang.Object)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:logNormalize()', 'VectorTest:assertNotNull(java.lang.String,java.lang.Object)', 'DenseVector:<init>(double[])', 'VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', 'VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', 'Vector:logNormalize(double)', 'VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', 'Vector:logNormalize(double)', 'VectorTest:assertVectorEquals(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,double)', 'Vector:logNormalize(double)', 'VectorTest:fail(java.lang.String)', 'Vector:logNormalize(double)', 'VectorTest:fail(java.lang.String)', 'Vector:logNormalize(double)', 'VectorTest:fail(java.lang.String)']
VectorTest:testMax():['RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'RandomAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'DenseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'RandomAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'DenseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)']
VectorTest:testMin():['RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:minValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'DenseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'Vector:maxValueIndex()', 'VectorTest:assertEquals(long,long)', 'RandomAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'DenseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'RandomAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'DenseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:maxValue()', 'VectorTest:assertEquals(double,double,double)']
VectorTest:testNormalize():['RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:normalize()', 'VectorTest:assertNotNull(java.lang.String,java.lang.Object)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:normalize()', 'VectorTest:assertNotNull(java.lang.String,java.lang.Object)', 'RandomAccessSparseVector:<init>(int)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:normalize(double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:normalize(double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:normalize(double)', 'Vector:normalize(double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:normalize(double)', 'Math:pow(double,double)', 'Vector:divide(double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:normalize(double)', 'Vector:normalize(double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:normalize(double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'Vector:setQuick(int,double)', 'VectorTest:assertEquals(java.lang.Object,java.lang.Object)', 'Vector:normalize(double)', 'VectorTest:fail()', 'Vector:normalize(double)', 'VectorTest:fail()']
VectorTest:testNumNonZerosDense():['DenseVector:<init>(int)', 'DenseVector:assign(double)', 'DenseVector:setQuick(int,double)', 'DenseVector:set(int,double)', 'DenseVector:getNumNonZeroElements()', 'VectorTest:assertEquals(long,long)']
VectorTest:testNumNonZerosRandomAccessSparse():['RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:set(int,double)', 'RandomAccessSparseVector:setQuick(int,double)', 'RandomAccessSparseVector:set(int,double)', 'RandomAccessSparseVector:getNumNonZeroElements()', 'VectorTest:assertEquals(long,long)']
VectorTest:testNumNonZerosSequentialAccessSparse():['SequentialAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:setQuick(int,double)', 'SequentialAccessSparseVector:set(int,double)', 'SequentialAccessSparseVector:setQuick(int,double)', 'SequentialAccessSparseVector:set(int,double)', 'SequentialAccessSparseVector:getNumNonZeroElements()', 'VectorTest:assertEquals(long,long)']
VectorTest:testSingleNonZeroIterator(org.apache.mahout.math.Vector):['Vector:set(int,double)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'VectorTest:assertTrue(boolean)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:next()', 'Iterator:hasNext()', 'VectorTest:assertFalse(boolean)', 'Iterator:next()', 'VectorTest:fail()']
VectorTest:testSkips(org.apache.mahout.math.Vector):['Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'HashSet:<init>()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'Integer:valueOf(int)', 'HashSet:add(java.lang.Object)', 'Vector$Element:get()', 'Vector$Element:index()', 'Vector:get(int)', 'VectorTest:assertEquals(double,double,double)', 'VectorTest:assertEquals(long,long)', 'HashSet:size()', 'VectorTest:assertEquals(long,long)', 'Integer:valueOf(int)', 'HashSet:contains(java.lang.Object)', 'VectorTest:assertTrue(boolean)', 'Integer:valueOf(int)', 'HashSet:contains(java.lang.Object)', 'VectorTest:assertTrue(boolean)', 'Integer:valueOf(int)', 'HashSet:contains(java.lang.Object)', 'VectorTest:assertTrue(boolean)', 'Integer:valueOf(int)', 'HashSet:contains(java.lang.Object)', 'VectorTest:assertTrue(boolean)', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'VectorTest:assertEquals(long,long)', 'Vector$Element:get()', 'Vector:get(int)', 'VectorTest:assertEquals(double,double,double)', 'VectorTest:assertEquals(long,long)']
VectorTest:testSkipsLast(org.apache.mahout.math.Vector):['Vector:set(int,double)', 'Vector:set(int,double)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'VectorTest:assertEquals(long,long)', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'Vector$Element:index()', 'VectorTest:assertEquals(long,long)', 'Iterator:hasNext()', 'VectorTest:assertFalse(boolean)', 'VectorTest:assertEquals(long,long)']
VectorTest:testSparseVector():['RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:<init>(int)', 'VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
VectorTest:testSparseVectorFullIteration():['VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:set(int,double)', 'Vector:get(int)', 'VectorTest:assertEquals(double,double,double)', 'Vector:all()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:iterator()', 'Iterator:hasNext()', 'VectorTest:assertFalse(boolean)']
VectorTest:testSparseVectorSparseIteration():['VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:set(int,double)', 'Vector:get(int)', 'VectorTest:assertEquals(double,double,double)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'Iterator:next()', 'VectorTest:assertEquals(long,long)', 'SequentialAccessSparseVector:<init>(int)', 'Vector:nonZeroes()', 'Iterable:iterator()', 'Iterator:hasNext()', 'VectorTest:assertFalse(boolean)']
VectorTest:testVectorView():['RandomAccessSparseVector:<init>(int)', 'RandomAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:<init>(int)', 'SequentialAccessSparseVector:<init>(int)', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorView:<init>(org.apache.mahout.math.Vector,int,int)', 'VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'VectorTest:doTestVectors(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)']
WeightedVectorTest:testLength():['DenseVector:<init>(double[])', 'DenseVector:<init>(org.apache.mahout.math.Vector)', 'Centroid:<init>(int,org.apache.mahout.math.Vector,double)', 'Centroid:getVector()', 'Vector:getLengthSquared()', 'Centroid:getLengthSquared()', 'WeightedVectorTest:assertEquals(double,double,double)', 'Centroid:set(int,double)', 'Centroid:getLengthSquared()', 'Double:valueOf(double)', 'Centroid:getVector()', 'Vector:getLengthSquared()', 'Double:valueOf(double)', 'PrintStream:printf(java.lang.String,java.lang.Object[])', 'Centroid:getVector()', 'Vector:getLengthSquared()', 'Centroid:getLengthSquared()', 'WeightedVectorTest:assertEquals(double,double,double)']
WeightedVectorTest:testOrdering():['DenseVector:<init>(double[])', 'WeightedVector:<init>(org.apache.mahout.math.Vector,double,int)', 'DenseVector:<init>(double[])', 'WeightedVector:<init>(org.apache.mahout.math.Vector,double,int)', 'DenseVector:<init>(double[])', 'WeightedVector:<init>(org.apache.mahout.math.Vector,double,int)', 'WeightedVector:clone()', 'WeightedVectorComparator:<init>()', 'WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', 'WeightedVectorTest:assertTrue(boolean)', 'WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', 'WeightedVectorTest:assertTrue(boolean)', 'WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', 'WeightedVectorTest:assertTrue(boolean)', 'WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', 'WeightedVectorTest:assertEquals(long,long)', 'WeightedVectorComparator:compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', 'WeightedVectorTest:assertEquals(long,long)']
WeightedVectorTest:testProjection():['DenseVector:<init>(int)', 'Functions:random()', 'DenseVector:assign(org.apache.mahout.math.function.DoubleFunction)', 'WeightedVector:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int)', 'Vector:dot(org.apache.mahout.math.Vector)', 'WeightedVector:getWeight()', 'WeightedVectorTest:assertEquals(double,double,double)', 'WeightedVector:getIndex()', 'WeightedVectorTest:assertEquals(long,long)', 'DenseMatrix:<init>(int,int)', 'Functions:random()', 'DenseMatrix:assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix:viewPart(int,int,int,int)', 'QRDecomposition:<init>(org.apache.mahout.math.Matrix)', 'QRDecomposition:getQ()', 'Matrix:viewColumn(int)', 'Matrix:transpose()', 'Matrix:viewColumn(int)', 'Matrix:times(org.apache.mahout.math.Vector)', 'Matrix:times(org.apache.mahout.math.Vector)', 'Vector:minus(org.apache.mahout.math.Vector)', 'Matrix:viewColumn(int)', 'Matrix:viewColumn(int)', 'Vector:plus(org.apache.mahout.math.Vector)', 'WeightedVector:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int)', 'WeightedVector:getWeight()', 'WeightedVectorTest:assertEquals(double,double,double)', 'Matrix:viewColumn(int)', 'Matrix:viewColumn(int)', 'Vector:plus(org.apache.mahout.math.Vector)', 'Vector:normalize()', 'Matrix:viewColumn(int)', 'WeightedVector:<init>(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int)', 'Math:sqrt(double)', 'WeightedVector:getWeight()', 'WeightedVectorTest:assertEquals(double,double,double)', 'Matrix:viewColumn(int)', 'WeightedVector:project(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'Math:sqrt(double)', 'WeightedVector:getWeight()', 'WeightedVectorTest:assertEquals(double,double,double)']
WeightedVectorTest:testSize():['WeightedVectorTest:getTestVector()', 'Vector:getNumNonZeroElements()', 'WeightedVectorTest:assertEquals(java.lang.String,long,long)']
